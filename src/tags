!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AES_DECRYPTION	tls_aes128.h	27;"	d
AES_FROUND	tls_aes128.c	80;"	d	file:
AES_HEADER	tls_aes128.h	24;"	d
AES_RROUND	tls_aes128.c	95;"	d	file:
AF_INET	net_ft.h	19;"	d
AF_INET6	sock.c	26;"	d	file:
ATCOR	drivers/imxrt.c	/^      IEEE_R_OCTETS_OK, RESERVED16[71], ATCR, ATVR, ATOFF, ATPER, ATCOR, ATINC,$/;"	m	struct:imxrt_enet	file:
ATCR	drivers/imxrt.c	/^      IEEE_R_OCTETS_OK, RESERVED16[71], ATCR, ATVR, ATOFF, ATPER, ATCOR, ATINC,$/;"	m	struct:imxrt_enet	file:
ATINC	drivers/imxrt.c	/^      IEEE_R_OCTETS_OK, RESERVED16[71], ATCR, ATVR, ATOFF, ATPER, ATCOR, ATINC,$/;"	m	struct:imxrt_enet	file:
ATOFF	drivers/imxrt.c	/^      IEEE_R_OCTETS_OK, RESERVED16[71], ATCR, ATVR, ATOFF, ATPER, ATCOR, ATINC,$/;"	m	struct:imxrt_enet	file:
ATPER	drivers/imxrt.c	/^      IEEE_R_OCTETS_OK, RESERVED16[71], ATCR, ATVR, ATOFF, ATPER, ATCOR, ATINC,$/;"	m	struct:imxrt_enet	file:
ATSTMP	drivers/imxrt.c	/^      ATSTMP, RESERVED17[122], TGSR, TCSR0, TCCR0, TCSR1, TCCR1, TCSR2, TCCR2,$/;"	m	struct:imxrt_enet	file:
ATVR	drivers/imxrt.c	/^      IEEE_R_OCTETS_OK, RESERVED16[71], ATCR, ATVR, ATOFF, ATPER, ATCOR, ATINC,$/;"	m	struct:imxrt_enet	file:
BITS_TO_BYTES	tls_uecc.c	145;"	d	file:
BITS_TO_WORDS	tls_uecc.c	142;"	d	file:
BYTES_TO_WORDS_4	tls_uecc.c	782;"	d	file:
BYTES_TO_WORDS_4	tls_uecc.c	793;"	d	file:
BYTES_TO_WORDS_4	tls_uecc.c	804;"	d	file:
BYTES_TO_WORDS_8	tls_uecc.c	780;"	d	file:
BYTES_TO_WORDS_8	tls_uecc.c	792;"	d	file:
BYTES_TO_WORDS_8	tls_uecc.c	803;"	d	file:
CONCAT	tls_uecc.c	21;"	d	file:
CONCATX	tls_uecc.c	20;"	d	file:
CPY128	tls_aes128.c	123;"	d	file:
DEC	tls_uecc.c	65;"	d	file:
DECRYPT	tls_aes128.h	31;"	d
DEC_1	tls_uecc.c	32;"	d	file:
DEC_10	tls_uecc.c	41;"	d	file:
DEC_11	tls_uecc.c	42;"	d	file:
DEC_12	tls_uecc.c	43;"	d	file:
DEC_13	tls_uecc.c	44;"	d	file:
DEC_14	tls_uecc.c	45;"	d	file:
DEC_15	tls_uecc.c	46;"	d	file:
DEC_16	tls_uecc.c	47;"	d	file:
DEC_17	tls_uecc.c	48;"	d	file:
DEC_18	tls_uecc.c	49;"	d	file:
DEC_19	tls_uecc.c	50;"	d	file:
DEC_2	tls_uecc.c	33;"	d	file:
DEC_20	tls_uecc.c	51;"	d	file:
DEC_21	tls_uecc.c	52;"	d	file:
DEC_22	tls_uecc.c	53;"	d	file:
DEC_23	tls_uecc.c	54;"	d	file:
DEC_24	tls_uecc.c	55;"	d	file:
DEC_25	tls_uecc.c	56;"	d	file:
DEC_26	tls_uecc.c	57;"	d	file:
DEC_27	tls_uecc.c	58;"	d	file:
DEC_28	tls_uecc.c	59;"	d	file:
DEC_29	tls_uecc.c	60;"	d	file:
DEC_3	tls_uecc.c	34;"	d	file:
DEC_30	tls_uecc.c	61;"	d	file:
DEC_31	tls_uecc.c	62;"	d	file:
DEC_32	tls_uecc.c	63;"	d	file:
DEC_4	tls_uecc.c	35;"	d	file:
DEC_5	tls_uecc.c	36;"	d	file:
DEC_6	tls_uecc.c	37;"	d	file:
DEC_7	tls_uecc.c	38;"	d	file:
DEC_8	tls_uecc.c	39;"	d	file:
DEC_9	tls_uecc.c	40;"	d	file:
DEFER	tls_uecc.c	73;"	d	file:
DIR	fs_posix.c	/^} DIR;$/;"	t	typeref:struct:win32_dir	file:
DMABMR	drivers/stm32f.c	/^      DMABMR, DMATPDR, DMARPDR, DMARDLAR, DMATDLAR, DMASR, DMAOMR, DMAIER,$/;"	m	struct:stm32f_eth	file:
DMACCARBR	drivers/stm32h.c	/^      RESERVED43, DMACCATBR, RESERVED44, DMACCARBR, DMACSR, RESERVED45[2],$/;"	m	struct:stm32h_eth	file:
DMACCARDR	drivers/stm32h.c	/^      DMACRIWTR, DMACSFCSR, RESERVED41, DMACCATDR, RESERVED42, DMACCARDR,$/;"	m	struct:stm32h_eth	file:
DMACCATBR	drivers/stm32h.c	/^      RESERVED43, DMACCATBR, RESERVED44, DMACCARBR, DMACSR, RESERVED45[2],$/;"	m	struct:stm32h_eth	file:
DMACCATDR	drivers/stm32h.c	/^      DMACRIWTR, DMACSFCSR, RESERVED41, DMACCATDR, RESERVED42, DMACCARDR,$/;"	m	struct:stm32h_eth	file:
DMACCR	drivers/stm32h.c	/^      RESERVED36[177], DMAMR, DMASBMR, DMAISR, DMADSR, RESERVED37[60], DMACCR,$/;"	m	struct:stm32h_eth	file:
DMACHRBAR	drivers/stm32f.c	/^      DMACHRBAR;$/;"	m	struct:stm32f_eth	file:
DMACHRDR	drivers/stm32f.c	/^      DMAMFBOCR, DMARSWTR, RESERVED10[8], DMACHTDR, DMACHRDR, DMACHTBAR,$/;"	m	struct:stm32f_eth	file:
DMACHTBAR	drivers/stm32f.c	/^      DMAMFBOCR, DMARSWTR, RESERVED10[8], DMACHTDR, DMACHRDR, DMACHTBAR,$/;"	m	struct:stm32f_eth	file:
DMACHTDR	drivers/stm32f.c	/^      DMAMFBOCR, DMARSWTR, RESERVED10[8], DMACHTDR, DMACHRDR, DMACHTBAR,$/;"	m	struct:stm32f_eth	file:
DMACIER	drivers/stm32h.c	/^      DMACTDTPR, RESERVED40, DMACRDTPR, DMACTDRLR, DMACRDRLR, DMACIER,$/;"	m	struct:stm32h_eth	file:
DMACMFCR	drivers/stm32h.c	/^      DMACMFCR;$/;"	m	struct:stm32h_eth	file:
DMACRCR	drivers/stm32h.c	/^      DMACTCR, DMACRCR, RESERVED38[2], DMACTDLAR, RESERVED39, DMACRDLAR,$/;"	m	struct:stm32h_eth	file:
DMACRDLAR	drivers/stm32h.c	/^      DMACTCR, DMACRCR, RESERVED38[2], DMACTDLAR, RESERVED39, DMACRDLAR,$/;"	m	struct:stm32h_eth	file:
DMACRDRLR	drivers/stm32h.c	/^      DMACTDTPR, RESERVED40, DMACRDTPR, DMACTDRLR, DMACRDRLR, DMACIER,$/;"	m	struct:stm32h_eth	file:
DMACRDTPR	drivers/stm32h.c	/^      DMACTDTPR, RESERVED40, DMACRDTPR, DMACTDRLR, DMACRDRLR, DMACIER,$/;"	m	struct:stm32h_eth	file:
DMACRIWTR	drivers/stm32h.c	/^      DMACRIWTR, DMACSFCSR, RESERVED41, DMACCATDR, RESERVED42, DMACCARDR,$/;"	m	struct:stm32h_eth	file:
DMACSFCSR	drivers/stm32h.c	/^      DMACRIWTR, DMACSFCSR, RESERVED41, DMACCATDR, RESERVED42, DMACCARDR,$/;"	m	struct:stm32h_eth	file:
DMACSR	drivers/stm32h.c	/^      RESERVED43, DMACCATBR, RESERVED44, DMACCARBR, DMACSR, RESERVED45[2],$/;"	m	struct:stm32h_eth	file:
DMACTCR	drivers/stm32h.c	/^      DMACTCR, DMACRCR, RESERVED38[2], DMACTDLAR, RESERVED39, DMACRDLAR,$/;"	m	struct:stm32h_eth	file:
DMACTDLAR	drivers/stm32h.c	/^      DMACTCR, DMACRCR, RESERVED38[2], DMACTDLAR, RESERVED39, DMACRDLAR,$/;"	m	struct:stm32h_eth	file:
DMACTDRLR	drivers/stm32h.c	/^      DMACTDTPR, RESERVED40, DMACRDTPR, DMACTDRLR, DMACRDRLR, DMACIER,$/;"	m	struct:stm32h_eth	file:
DMACTDTPR	drivers/stm32h.c	/^      DMACTDTPR, RESERVED40, DMACRDTPR, DMACTDRLR, DMACRDRLR, DMACIER,$/;"	m	struct:stm32h_eth	file:
DMADSR	drivers/stm32h.c	/^      RESERVED36[177], DMAMR, DMASBMR, DMAISR, DMADSR, RESERVED37[60], DMACCR,$/;"	m	struct:stm32h_eth	file:
DMAIER	drivers/stm32f.c	/^      DMABMR, DMATPDR, DMARPDR, DMARDLAR, DMATDLAR, DMASR, DMAOMR, DMAIER,$/;"	m	struct:stm32f_eth	file:
DMAISR	drivers/stm32h.c	/^      RESERVED36[177], DMAMR, DMASBMR, DMAISR, DMADSR, RESERVED37[60], DMACCR,$/;"	m	struct:stm32h_eth	file:
DMAMFBOCR	drivers/stm32f.c	/^      DMAMFBOCR, DMARSWTR, RESERVED10[8], DMACHTDR, DMACHRDR, DMACHTBAR,$/;"	m	struct:stm32f_eth	file:
DMAMR	drivers/stm32h.c	/^      RESERVED36[177], DMAMR, DMASBMR, DMAISR, DMADSR, RESERVED37[60], DMACCR,$/;"	m	struct:stm32h_eth	file:
DMAOMR	drivers/stm32f.c	/^      DMABMR, DMATPDR, DMARPDR, DMARDLAR, DMATDLAR, DMASR, DMAOMR, DMAIER,$/;"	m	struct:stm32f_eth	file:
DMARDLAR	drivers/stm32f.c	/^      DMABMR, DMATPDR, DMARPDR, DMARDLAR, DMATDLAR, DMASR, DMAOMR, DMAIER,$/;"	m	struct:stm32f_eth	file:
DMARPDR	drivers/stm32f.c	/^      DMABMR, DMATPDR, DMARPDR, DMARDLAR, DMATDLAR, DMASR, DMAOMR, DMAIER,$/;"	m	struct:stm32f_eth	file:
DMARSWTR	drivers/stm32f.c	/^      DMAMFBOCR, DMARSWTR, RESERVED10[8], DMACHTDR, DMACHRDR, DMACHTBAR,$/;"	m	struct:stm32f_eth	file:
DMASBMR	drivers/stm32h.c	/^      RESERVED36[177], DMAMR, DMASBMR, DMAISR, DMADSR, RESERVED37[60], DMACCR,$/;"	m	struct:stm32h_eth	file:
DMASR	drivers/stm32f.c	/^      DMABMR, DMATPDR, DMARPDR, DMARDLAR, DMATDLAR, DMASR, DMAOMR, DMAIER,$/;"	m	struct:stm32f_eth	file:
DMATDLAR	drivers/stm32f.c	/^      DMABMR, DMATPDR, DMARPDR, DMARDLAR, DMATDLAR, DMASR, DMAOMR, DMAIER,$/;"	m	struct:stm32f_eth	file:
DMATPDR	drivers/stm32f.c	/^      DMABMR, DMATPDR, DMARPDR, DMARDLAR, DMATDLAR, DMASR, DMAOMR, DMAIER,$/;"	m	struct:stm32f_eth	file:
ECR	drivers/imxrt.c	/^      ECR, RESERVED3[6], MMFR, MSCR, RESERVED4[7], MIBC, RESERVED5[7], RCR,$/;"	m	struct:imxrt_enet	file:
EIMR	drivers/imxrt.c	/^  volatile uint32_t RESERVED0, EIR, EIMR, RESERVED1, RDAR, TDAR, RESERVED2[3],$/;"	m	struct:imxrt_enet	file:
EIR	drivers/imxrt.c	/^  volatile uint32_t RESERVED0, EIR, EIMR, RESERVED1, RDAR, TDAR, RESERVED2[3],$/;"	m	struct:imxrt_enet	file:
EMAC	drivers/tm4c.c	24;"	d	file:
EMAC	drivers/tm4c.c	25;"	d	file:
EMAC0_IRQHandler	drivers/tm4c.c	/^void EMAC0_IRQHandler(void) {$/;"	f
EMACADDR0H	drivers/tm4c.c	/^      EMACRWUFF, EMACPMTCTLSTAT, RESERVED1[2], EMACRIS, EMACIM, EMACADDR0H,$/;"	m	struct:tm4c_emac	file:
EMACADDR0L	drivers/tm4c.c	/^      EMACADDR0L, EMACADDR1H, EMACADDR1L, EMACADDR2H, EMACADDR2L, EMACADDR3H,$/;"	m	struct:tm4c_emac	file:
EMACADDR1H	drivers/tm4c.c	/^      EMACADDR0L, EMACADDR1H, EMACADDR1L, EMACADDR2H, EMACADDR2L, EMACADDR3H,$/;"	m	struct:tm4c_emac	file:
EMACADDR1L	drivers/tm4c.c	/^      EMACADDR0L, EMACADDR1H, EMACADDR1L, EMACADDR2H, EMACADDR2L, EMACADDR3H,$/;"	m	struct:tm4c_emac	file:
EMACADDR2H	drivers/tm4c.c	/^      EMACADDR0L, EMACADDR1H, EMACADDR1L, EMACADDR2H, EMACADDR2L, EMACADDR3H,$/;"	m	struct:tm4c_emac	file:
EMACADDR2L	drivers/tm4c.c	/^      EMACADDR0L, EMACADDR1H, EMACADDR1L, EMACADDR2H, EMACADDR2L, EMACADDR3H,$/;"	m	struct:tm4c_emac	file:
EMACADDR3H	drivers/tm4c.c	/^      EMACADDR0L, EMACADDR1H, EMACADDR1L, EMACADDR2H, EMACADDR2L, EMACADDR3H,$/;"	m	struct:tm4c_emac	file:
EMACADDR3L	drivers/tm4c.c	/^      EMACADDR3L, RESERVED2[31], EMACWDOGTO, RESERVED3[8], EMACMMCCTRL,$/;"	m	struct:tm4c_emac	file:
EMACCC	drivers/tm4c.c	/^      RESERVED15[218], EMACPP, EMACPC, EMACCC, RESERVED16, EMACEPHYRIS,$/;"	m	struct:tm4c_emac	file:
EMACCFG	drivers/tm4c.c	/^  volatile uint32_t EMACCFG, EMACFRAMEFLTR, EMACHASHTBLH, EMACHASHTBLL,$/;"	m	struct:tm4c_emac	file:
EMACDMABUSMOD	drivers/tm4c.c	/^      EMACDMABUSMOD, EMACTXPOLLD, EMACRXPOLLD, EMACRXDLADDR, EMACTXDLADDR,$/;"	m	struct:tm4c_emac	file:
EMACDMAIM	drivers/tm4c.c	/^      EMACDMARIS, EMACDMAOPMODE, EMACDMAIM, EMACMFBOC, EMACRXINTWDT,$/;"	m	struct:tm4c_emac	file:
EMACDMAOPMODE	drivers/tm4c.c	/^      EMACDMARIS, EMACDMAOPMODE, EMACDMAIM, EMACMFBOC, EMACRXINTWDT,$/;"	m	struct:tm4c_emac	file:
EMACDMARIS	drivers/tm4c.c	/^      EMACDMARIS, EMACDMAOPMODE, EMACDMAIM, EMACMFBOC, EMACRXINTWDT,$/;"	m	struct:tm4c_emac	file:
EMACEPHYIM	drivers/tm4c.c	/^      EMACEPHYIM, EMACEPHYIMSC;$/;"	m	struct:tm4c_emac	file:
EMACEPHYIMSC	drivers/tm4c.c	/^      EMACEPHYIM, EMACEPHYIMSC;$/;"	m	struct:tm4c_emac	file:
EMACEPHYRIS	drivers/tm4c.c	/^      RESERVED15[218], EMACPP, EMACPC, EMACCC, RESERVED16, EMACEPHYRIS,$/;"	m	struct:tm4c_emac	file:
EMACFLOWCTL	drivers/tm4c.c	/^      EMACMIIADDR, EMACMIIDATA, EMACFLOWCTL, EMACVLANTG, RESERVED0, EMACSTATUS,$/;"	m	struct:tm4c_emac	file:
EMACFRAMEFLTR	drivers/tm4c.c	/^  volatile uint32_t EMACCFG, EMACFRAMEFLTR, EMACHASHTBLH, EMACHASHTBLL,$/;"	m	struct:tm4c_emac	file:
EMACHASHTBLH	drivers/tm4c.c	/^  volatile uint32_t EMACCFG, EMACFRAMEFLTR, EMACHASHTBLH, EMACHASHTBLL,$/;"	m	struct:tm4c_emac	file:
EMACHASHTBLL	drivers/tm4c.c	/^  volatile uint32_t EMACCFG, EMACFRAMEFLTR, EMACHASHTBLH, EMACHASHTBLL,$/;"	m	struct:tm4c_emac	file:
EMACHOSRXBA	drivers/tm4c.c	/^      RESERVED14[8], EMACHOSTXDESC, EMACHOSRXDESC, EMACHOSTXBA, EMACHOSRXBA,$/;"	m	struct:tm4c_emac	file:
EMACHOSRXDESC	drivers/tm4c.c	/^      RESERVED14[8], EMACHOSTXDESC, EMACHOSRXDESC, EMACHOSTXBA, EMACHOSRXBA,$/;"	m	struct:tm4c_emac	file:
EMACHOSTXBA	drivers/tm4c.c	/^      RESERVED14[8], EMACHOSTXDESC, EMACHOSRXDESC, EMACHOSTXBA, EMACHOSRXBA,$/;"	m	struct:tm4c_emac	file:
EMACHOSTXDESC	drivers/tm4c.c	/^      RESERVED14[8], EMACHOSTXDESC, EMACHOSRXDESC, EMACHOSTXBA, EMACHOSRXBA,$/;"	m	struct:tm4c_emac	file:
EMACHWORDSEC	drivers/tm4c.c	/^      EMACTARGSEC, EMACTARGNANO, EMACHWORDSEC, EMACTIMSTAT, EMACPPSCTRL,$/;"	m	struct:tm4c_emac	file:
EMACIM	drivers/tm4c.c	/^      EMACRWUFF, EMACPMTCTLSTAT, RESERVED1[2], EMACRIS, EMACIM, EMACADDR0H,$/;"	m	struct:tm4c_emac	file:
EMACMFBOC	drivers/tm4c.c	/^      EMACDMARIS, EMACDMAOPMODE, EMACDMAIM, EMACMFBOC, EMACRXINTWDT,$/;"	m	struct:tm4c_emac	file:
EMACMIIADDR	drivers/tm4c.c	/^      EMACMIIADDR, EMACMIIDATA, EMACFLOWCTL, EMACVLANTG, RESERVED0, EMACSTATUS,$/;"	m	struct:tm4c_emac	file:
EMACMIIDATA	drivers/tm4c.c	/^      EMACMIIADDR, EMACMIIDATA, EMACFLOWCTL, EMACVLANTG, RESERVED0, EMACSTATUS,$/;"	m	struct:tm4c_emac	file:
EMACMMCCTRL	drivers/tm4c.c	/^      EMACADDR3L, RESERVED2[31], EMACWDOGTO, RESERVED3[8], EMACMMCCTRL,$/;"	m	struct:tm4c_emac	file:
EMACMMCRXIM	drivers/tm4c.c	/^      EMACMMCRXRIS, EMACMMCTXRIS, EMACMMCRXIM, EMACMMCTXIM, RESERVED4,$/;"	m	struct:tm4c_emac	file:
EMACMMCRXRIS	drivers/tm4c.c	/^      EMACMMCRXRIS, EMACMMCTXRIS, EMACMMCRXIM, EMACMMCTXIM, RESERVED4,$/;"	m	struct:tm4c_emac	file:
EMACMMCTXIM	drivers/tm4c.c	/^      EMACMMCRXRIS, EMACMMCTXRIS, EMACMMCRXIM, EMACMMCTXIM, RESERVED4,$/;"	m	struct:tm4c_emac	file:
EMACMMCTXRIS	drivers/tm4c.c	/^      EMACMMCRXRIS, EMACMMCTXRIS, EMACMMCRXIM, EMACMMCTXIM, RESERVED4,$/;"	m	struct:tm4c_emac	file:
EMACPC	drivers/tm4c.c	/^      RESERVED15[218], EMACPP, EMACPC, EMACCC, RESERVED16, EMACEPHYRIS,$/;"	m	struct:tm4c_emac	file:
EMACPMTCTLSTAT	drivers/tm4c.c	/^      EMACRWUFF, EMACPMTCTLSTAT, RESERVED1[2], EMACRIS, EMACIM, EMACADDR0H,$/;"	m	struct:tm4c_emac	file:
EMACPP	drivers/tm4c.c	/^      RESERVED15[218], EMACPP, EMACPC, EMACCC, RESERVED16, EMACEPHYRIS,$/;"	m	struct:tm4c_emac	file:
EMACPPS0INTVL	drivers/tm4c.c	/^      RESERVED12[12], EMACPPS0INTVL, EMACPPS0WIDTH, RESERVED13[294],$/;"	m	struct:tm4c_emac	file:
EMACPPS0WIDTH	drivers/tm4c.c	/^      RESERVED12[12], EMACPPS0INTVL, EMACPPS0WIDTH, RESERVED13[294],$/;"	m	struct:tm4c_emac	file:
EMACPPSCTRL	drivers/tm4c.c	/^      EMACTARGSEC, EMACTARGNANO, EMACHWORDSEC, EMACTIMSTAT, EMACPPSCTRL,$/;"	m	struct:tm4c_emac	file:
EMACRIS	drivers/tm4c.c	/^      EMACRWUFF, EMACPMTCTLSTAT, RESERVED1[2], EMACRIS, EMACIM, EMACADDR0H,$/;"	m	struct:tm4c_emac	file:
EMACRWUFF	drivers/tm4c.c	/^      EMACRWUFF, EMACPMTCTLSTAT, RESERVED1[2], EMACRIS, EMACIM, EMACADDR0H,$/;"	m	struct:tm4c_emac	file:
EMACRXCNTALGNERR	drivers/tm4c.c	/^      EMACRXCNTALGNERR, RESERVED9[10], EMACRXCNTGUNI, RESERVED10[239],$/;"	m	struct:tm4c_emac	file:
EMACRXCNTCRCERR	drivers/tm4c.c	/^      EMACTXOCTCNTG, RESERVED7[6], EMACRXCNTGB, RESERVED8[4], EMACRXCNTCRCERR,$/;"	m	struct:tm4c_emac	file:
EMACRXCNTGB	drivers/tm4c.c	/^      EMACTXOCTCNTG, RESERVED7[6], EMACRXCNTGB, RESERVED8[4], EMACRXCNTCRCERR,$/;"	m	struct:tm4c_emac	file:
EMACRXCNTGUNI	drivers/tm4c.c	/^      EMACRXCNTALGNERR, RESERVED9[10], EMACRXCNTGUNI, RESERVED10[239],$/;"	m	struct:tm4c_emac	file:
EMACRXDLADDR	drivers/tm4c.c	/^      EMACDMABUSMOD, EMACTXPOLLD, EMACRXPOLLD, EMACRXDLADDR, EMACTXDLADDR,$/;"	m	struct:tm4c_emac	file:
EMACRXINTWDT	drivers/tm4c.c	/^      EMACDMARIS, EMACDMAOPMODE, EMACDMAIM, EMACMFBOC, EMACRXINTWDT,$/;"	m	struct:tm4c_emac	file:
EMACRXPOLLD	drivers/tm4c.c	/^      EMACDMABUSMOD, EMACTXPOLLD, EMACRXPOLLD, EMACRXDLADDR, EMACTXDLADDR,$/;"	m	struct:tm4c_emac	file:
EMACSTATUS	drivers/tm4c.c	/^      EMACMIIADDR, EMACMIIDATA, EMACFLOWCTL, EMACVLANTG, RESERVED0, EMACSTATUS,$/;"	m	struct:tm4c_emac	file:
EMACSUBSECINC	drivers/tm4c.c	/^      EMACVLNINCREP, EMACVLANHASH, RESERVED11[93], EMACTIMSTCTRL, EMACSUBSECINC,$/;"	m	struct:tm4c_emac	file:
EMACTARGNANO	drivers/tm4c.c	/^      EMACTARGSEC, EMACTARGNANO, EMACHWORDSEC, EMACTIMSTAT, EMACPPSCTRL,$/;"	m	struct:tm4c_emac	file:
EMACTARGSEC	drivers/tm4c.c	/^      EMACTARGSEC, EMACTARGNANO, EMACHWORDSEC, EMACTIMSTAT, EMACPPSCTRL,$/;"	m	struct:tm4c_emac	file:
EMACTIMADD	drivers/tm4c.c	/^      EMACTIMSEC, EMACTIMNANO, EMACTIMSECU, EMACTIMNANOU, EMACTIMADD,$/;"	m	struct:tm4c_emac	file:
EMACTIMNANO	drivers/tm4c.c	/^      EMACTIMSEC, EMACTIMNANO, EMACTIMSECU, EMACTIMNANOU, EMACTIMADD,$/;"	m	struct:tm4c_emac	file:
EMACTIMNANOU	drivers/tm4c.c	/^      EMACTIMSEC, EMACTIMNANO, EMACTIMSECU, EMACTIMNANOU, EMACTIMADD,$/;"	m	struct:tm4c_emac	file:
EMACTIMSEC	drivers/tm4c.c	/^      EMACTIMSEC, EMACTIMNANO, EMACTIMSECU, EMACTIMNANOU, EMACTIMADD,$/;"	m	struct:tm4c_emac	file:
EMACTIMSECU	drivers/tm4c.c	/^      EMACTIMSEC, EMACTIMNANO, EMACTIMSECU, EMACTIMNANOU, EMACTIMADD,$/;"	m	struct:tm4c_emac	file:
EMACTIMSTAT	drivers/tm4c.c	/^      EMACTARGSEC, EMACTARGNANO, EMACHWORDSEC, EMACTIMSTAT, EMACPPSCTRL,$/;"	m	struct:tm4c_emac	file:
EMACTIMSTCTRL	drivers/tm4c.c	/^      EMACVLNINCREP, EMACVLANHASH, RESERVED11[93], EMACTIMSTCTRL, EMACSUBSECINC,$/;"	m	struct:tm4c_emac	file:
EMACTXCNTGB	drivers/tm4c.c	/^      EMACTXCNTGB, RESERVED5[12], EMACTXCNTSCOL, EMACTXCNTMCOL, RESERVED6[4],$/;"	m	struct:tm4c_emac	file:
EMACTXCNTMCOL	drivers/tm4c.c	/^      EMACTXCNTGB, RESERVED5[12], EMACTXCNTSCOL, EMACTXCNTMCOL, RESERVED6[4],$/;"	m	struct:tm4c_emac	file:
EMACTXCNTSCOL	drivers/tm4c.c	/^      EMACTXCNTGB, RESERVED5[12], EMACTXCNTSCOL, EMACTXCNTMCOL, RESERVED6[4],$/;"	m	struct:tm4c_emac	file:
EMACTXDLADDR	drivers/tm4c.c	/^      EMACDMABUSMOD, EMACTXPOLLD, EMACRXPOLLD, EMACRXDLADDR, EMACTXDLADDR,$/;"	m	struct:tm4c_emac	file:
EMACTXOCTCNTG	drivers/tm4c.c	/^      EMACTXOCTCNTG, RESERVED7[6], EMACRXCNTGB, RESERVED8[4], EMACRXCNTCRCERR,$/;"	m	struct:tm4c_emac	file:
EMACTXPOLLD	drivers/tm4c.c	/^      EMACDMABUSMOD, EMACTXPOLLD, EMACRXPOLLD, EMACRXDLADDR, EMACTXDLADDR,$/;"	m	struct:tm4c_emac	file:
EMACVLANHASH	drivers/tm4c.c	/^      EMACVLNINCREP, EMACVLANHASH, RESERVED11[93], EMACTIMSTCTRL, EMACSUBSECINC,$/;"	m	struct:tm4c_emac	file:
EMACVLANTG	drivers/tm4c.c	/^      EMACMIIADDR, EMACMIIDATA, EMACFLOWCTL, EMACVLANTG, RESERVED0, EMACSTATUS,$/;"	m	struct:tm4c_emac	file:
EMACVLNINCREP	drivers/tm4c.c	/^      EMACVLNINCREP, EMACVLANHASH, RESERVED11[93], EMACTIMSTCTRL, EMACSUBSECINC,$/;"	m	struct:tm4c_emac	file:
EMACWDOGTO	drivers/tm4c.c	/^      EMACADDR3L, RESERVED2[31], EMACWDOGTO, RESERVED3[8], EMACMMCCTRL,$/;"	m	struct:tm4c_emac	file:
EMPTY	tls_uecc.c	72;"	d	file:
ENCRYPT	tls_aes128.h	30;"	d
ENET	drivers/imxrt.c	28;"	d	file:
ENET	drivers/imxrt.c	29;"	d	file:
ENET_IRQHandler	drivers/imxrt.c	/^void ENET_IRQHandler(void) {$/;"	f
EPHYBMCR	drivers/tm4c.c	/^  EPHYBMCR = 0,$/;"	e	enum:__anon19	file:
EPHYBMSR	drivers/tm4c.c	/^  EPHYBMSR = 1,$/;"	e	enum:__anon19	file:
EPHYSTS	drivers/tm4c.c	/^  EPHYSTS = 16$/;"	e	enum:__anon19	file:
EPHY_ADDR	drivers/tm4c.c	/^  EPHY_ADDR = 0,$/;"	e	enum:__anon19	file:
ETH	drivers/stm32f.c	18;"	d	file:
ETH	drivers/stm32f.c	19;"	d	file:
ETH	drivers/stm32h.c	35;"	d	file:
ETH	drivers/stm32h.c	36;"	d	file:
ETH_DESC_CNT	drivers/imxrt.c	32;"	d	file:
ETH_DESC_CNT	drivers/same54.c	7;"	d	file:
ETH_DESC_CNT	drivers/stm32f.c	22;"	d	file:
ETH_DESC_CNT	drivers/stm32h.c	40;"	d	file:
ETH_DESC_CNT	drivers/tm4c.c	28;"	d	file:
ETH_DS	drivers/same54.c	8;"	d	file:
ETH_DS	drivers/stm32f.c	23;"	d	file:
ETH_DS	drivers/stm32h.c	41;"	d	file:
ETH_DS	drivers/tm4c.c	29;"	d	file:
ETH_IRQHandler	drivers/stm32f.c	/^void ETH_IRQHandler(void) {$/;"	f
ETH_IRQHandler	drivers/stm32h.c	/^void ETH_IRQHandler(void) {$/;"	f
ETH_PKT_SIZE	drivers/imxrt.c	31;"	d	file:
ETH_PKT_SIZE	drivers/same54.c	6;"	d	file:
ETH_PKT_SIZE	drivers/stm32f.c	21;"	d	file:
ETH_PKT_SIZE	drivers/stm32h.c	39;"	d	file:
ETH_PKT_SIZE	drivers/tm4c.c	27;"	d	file:
EVAL	tls_uecc.c	26;"	d	file:
EVAL1	tls_uecc.c	27;"	d	file:
EVAL2	tls_uecc.c	28;"	d	file:
EVAL3	tls_uecc.c	29;"	d	file:
EVAL4	tls_uecc.c	30;"	d	file:
EVEN	tls_uecc.c	699;"	d	file:
EccPoint_compute_public_key	tls_uecc.c	/^static uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,$/;"	f	file:
EccPoint_isZero	tls_uecc.c	2261;"	d	file:
EccPoint_mult	tls_uecc.c	/^static void EccPoint_mult(uECC_word_t *result, const uECC_word_t *point,$/;"	f	file:
F1	md5.c	34;"	d	file:
F2	md5.c	35;"	d	file:
F3	md5.c	36;"	d	file:
F4	md5.c	37;"	d	file:
FD	sock.c	18;"	d	file:
FD_CLOEXEC	arch_zephyr.h	27;"	d
FLASH_ACTLR	device_ch32v307.c	8;"	d	file:
FLASH_ADDR	device_ch32v307.c	13;"	d	file:
FLASH_BASE	device_ch32v307.c	7;"	d	file:
FLASH_BASE	device_stm32h5.c	6;"	d	file:
FLASH_BASE1	device_stm32h7.c	6;"	d	file:
FLASH_BASE2	device_stm32h7.c	7;"	d	file:
FLASH_CCR	device_stm32h7.c	13;"	d	file:
FLASH_CR	device_stm32h7.c	12;"	d	file:
FLASH_CTLR	device_ch32v307.c	12;"	d	file:
FLASH_KEYR	device_ch32v307.c	9;"	d	file:
FLASH_KEYR	device_stm32h5.c	7;"	d	file:
FLASH_KEYR	device_stm32h7.c	8;"	d	file:
FLASH_NSCCR	device_stm32h5.c	12;"	d	file:
FLASH_NSCR	device_stm32h5.c	11;"	d	file:
FLASH_NSSR	device_stm32h5.c	10;"	d	file:
FLASH_OBKEYR	device_ch32v307.c	10;"	d	file:
FLASH_OBR	device_ch32v307.c	14;"	d	file:
FLASH_OPTCR	device_stm32h5.c	9;"	d	file:
FLASH_OPTCR	device_stm32h7.c	10;"	d	file:
FLASH_OPTKEYR	device_stm32h5.c	8;"	d	file:
FLASH_OPTKEYR	device_stm32h7.c	9;"	d	file:
FLASH_OPTSR_CUR	device_stm32h5.c	13;"	d	file:
FLASH_OPTSR_CUR	device_stm32h7.c	14;"	d	file:
FLASH_OPTSR_PRG	device_stm32h5.c	14;"	d	file:
FLASH_OPTSR_PRG	device_stm32h7.c	15;"	d	file:
FLASH_SIZE_REG	device_stm32h7.c	16;"	d	file:
FLASH_SR	device_stm32h7.c	11;"	d	file:
FLASH_STATR	device_ch32v307.c	11;"	d	file:
FLASH_WPR	device_ch32v307.c	15;"	d	file:
FOPEN_MAX	arch_azurertos.h	25;"	d
FSb	tls_aes128.c	/^static uchar FSb[256];     \/\/ Forward substitution box (FSb)$/;"	v	file:
FT0	tls_aes128.c	/^static uint32_t FT0[256];  \/\/ Forward key schedule assembly tables$/;"	v	file:
FT1	tls_aes128.c	/^static uint32_t FT1[256];$/;"	v	file:
FT2	tls_aes128.c	/^static uint32_t FT2[256];$/;"	v	file:
FT3	tls_aes128.c	/^static uint32_t FT3[256];$/;"	v	file:
FTRL	drivers/imxrt.c	/^      RAEM, RAFL, TSEM, TAEM, TAFL, TIPG, FTRL, RESERVED12[3], TACC, RACC,$/;"	m	struct:imxrt_enet	file:
F_SETFD	arch_zephyr.h	31;"	d
G	tls_uecc.c	/^  uECC_word_t G[uECC_MAX_WORDS * 2];$/;"	m	struct:uECC_Curve_t	file:
GALR	drivers/imxrt.c	/^      RESERVED8, RXIC0, RXIC1, RXIC2, RESERVED9[3], IAUR, IALR, GAUR, GALR,$/;"	m	struct:imxrt_enet	file:
GAUR	drivers/imxrt.c	/^      RESERVED8, RXIC0, RXIC1, RXIC2, RESERVED9[3], IAUR, IALR, GAUR, GALR,$/;"	m	struct:imxrt_enet	file:
GCM_AUTH_FAILURE	tls_aes128.h	99;"	d
GCM_HEADER	tls_aes128.h	96;"	d
GET_SECOND_ARG	tls_uecc.c	69;"	d	file:
GET_UINT32_BE	tls_aes128.c	542;"	d	file:
GET_UINT32_LE	tls_aes128.c	63;"	d	file:
GMAC_Handler	drivers/same54.c	/^void GMAC_Handler(void) {$/;"	f
HH	tls_aes128.h	/^  uint64_t HH[16];      \/\/ precalculated hi-half HTable$/;"	m	struct:__anon13
HIGH_BIT_SET	tls_uecc.h	612;"	d
HIGH_BIT_SET	tls_uecc.h	622;"	d
HIGH_BIT_SET	tls_uecc.h	631;"	d
HL	tls_aes128.h	/^  uint64_t HL[16];      \/\/ precalculated lo-half HTable$/;"	m	struct:__anon13
HMAC_finish	tls_uecc.c	/^static void HMAC_finish(const uECC_HashContext *hash_context, const uint8_t *K,$/;"	f	file:
HMAC_init	tls_uecc.c	/^static void HMAC_init(const uECC_HashContext *hash_context, const uint8_t *K) {$/;"	f	file:
HMAC_update	tls_uecc.c	/^static void HMAC_update(const uECC_HashContext *hash_context,$/;"	f	file:
IALR	drivers/imxrt.c	/^      RESERVED8, RXIC0, RXIC1, RXIC2, RESERVED9[3], IAUR, IALR, GAUR, GALR,$/;"	m	struct:imxrt_enet	file:
IAUR	drivers/imxrt.c	/^      RESERVED8, RXIC0, RXIC1, RXIC2, RESERVED9[3], IAUR, IALR, GAUR, GALR,$/;"	m	struct:imxrt_enet	file:
IEEE_R_ALIGN	drivers/imxrt.c	/^      IEEE_R_FRAME_OK, IEEE_R_CRC, IEEE_R_ALIGN, IEEE_R_MACERR, IEEE_R_FDXFC,$/;"	m	struct:imxrt_enet	file:
IEEE_R_CRC	drivers/imxrt.c	/^      IEEE_R_FRAME_OK, IEEE_R_CRC, IEEE_R_ALIGN, IEEE_R_MACERR, IEEE_R_FDXFC,$/;"	m	struct:imxrt_enet	file:
IEEE_R_DROP	drivers/imxrt.c	/^      RMON_R_P1024TO2047, RMON_R_GTE2048, RMON_R_OCTETS, IEEE_R_DROP,$/;"	m	struct:imxrt_enet	file:
IEEE_R_FDXFC	drivers/imxrt.c	/^      IEEE_R_FRAME_OK, IEEE_R_CRC, IEEE_R_ALIGN, IEEE_R_MACERR, IEEE_R_FDXFC,$/;"	m	struct:imxrt_enet	file:
IEEE_R_FRAME_OK	drivers/imxrt.c	/^      IEEE_R_FRAME_OK, IEEE_R_CRC, IEEE_R_ALIGN, IEEE_R_MACERR, IEEE_R_FDXFC,$/;"	m	struct:imxrt_enet	file:
IEEE_R_MACERR	drivers/imxrt.c	/^      IEEE_R_FRAME_OK, IEEE_R_CRC, IEEE_R_ALIGN, IEEE_R_MACERR, IEEE_R_FDXFC,$/;"	m	struct:imxrt_enet	file:
IEEE_R_OCTETS_OK	drivers/imxrt.c	/^      IEEE_R_OCTETS_OK, RESERVED16[71], ATCR, ATVR, ATOFF, ATPER, ATCOR, ATINC,$/;"	m	struct:imxrt_enet	file:
IEEE_T_1COL	drivers/imxrt.c	/^      RMON_T_OCTETS, IEEE_T_DROP, IEEE_T_FRAME_OK, IEEE_T_1COL, IEEE_T_MCOL,$/;"	m	struct:imxrt_enet	file:
IEEE_T_CSERR	drivers/imxrt.c	/^      IEEE_T_DEF, IEEE_T_LCOL, IEEE_T_EXCOL, IEEE_T_MACERR, IEEE_T_CSERR,$/;"	m	struct:imxrt_enet	file:
IEEE_T_DEF	drivers/imxrt.c	/^      IEEE_T_DEF, IEEE_T_LCOL, IEEE_T_EXCOL, IEEE_T_MACERR, IEEE_T_CSERR,$/;"	m	struct:imxrt_enet	file:
IEEE_T_DROP	drivers/imxrt.c	/^      RMON_T_OCTETS, IEEE_T_DROP, IEEE_T_FRAME_OK, IEEE_T_1COL, IEEE_T_MCOL,$/;"	m	struct:imxrt_enet	file:
IEEE_T_EXCOL	drivers/imxrt.c	/^      IEEE_T_DEF, IEEE_T_LCOL, IEEE_T_EXCOL, IEEE_T_MACERR, IEEE_T_CSERR,$/;"	m	struct:imxrt_enet	file:
IEEE_T_FDXFC	drivers/imxrt.c	/^      IEEE_T_SQE, IEEE_T_FDXFC, IEEE_T_OCTETS_OK, RESERVED14[3], RMON_R_PACKETS,$/;"	m	struct:imxrt_enet	file:
IEEE_T_FRAME_OK	drivers/imxrt.c	/^      RMON_T_OCTETS, IEEE_T_DROP, IEEE_T_FRAME_OK, IEEE_T_1COL, IEEE_T_MCOL,$/;"	m	struct:imxrt_enet	file:
IEEE_T_LCOL	drivers/imxrt.c	/^      IEEE_T_DEF, IEEE_T_LCOL, IEEE_T_EXCOL, IEEE_T_MACERR, IEEE_T_CSERR,$/;"	m	struct:imxrt_enet	file:
IEEE_T_MACERR	drivers/imxrt.c	/^      IEEE_T_DEF, IEEE_T_LCOL, IEEE_T_EXCOL, IEEE_T_MACERR, IEEE_T_CSERR,$/;"	m	struct:imxrt_enet	file:
IEEE_T_MCOL	drivers/imxrt.c	/^      RMON_T_OCTETS, IEEE_T_DROP, IEEE_T_FRAME_OK, IEEE_T_1COL, IEEE_T_MCOL,$/;"	m	struct:imxrt_enet	file:
IEEE_T_OCTETS_OK	drivers/imxrt.c	/^      IEEE_T_SQE, IEEE_T_FDXFC, IEEE_T_OCTETS_OK, RESERVED14[3], RMON_R_PACKETS,$/;"	m	struct:imxrt_enet	file:
IEEE_T_SQE	drivers/imxrt.c	/^      IEEE_T_SQE, IEEE_T_FDXFC, IEEE_T_OCTETS_OK, RESERVED14[3], RMON_R_PACKETS,$/;"	m	struct:imxrt_enet	file:
IPPROTO_TCP	net_ft.h	17;"	d
IPPROTO_UDP	net_ft.h	18;"	d
IP_FRAG_OFFSET_MSK	net_builtin.c	48;"	d	file:
IP_MORE_FRAGS_MSK	net_builtin.c	49;"	d	file:
ISPRINT	log.c	52;"	d	file:
LIMB	tls_builtin.c	59;"	d	file:
LIST_ADD_HEAD	util.h	66;"	d
LIST_ADD_TAIL	util.h	72;"	d
LIST_DELETE	util.h	79;"	d
MAC1USTCR	drivers/stm32h.c	/^      MACLTCR, MACLETR, MAC1USTCR, RESERVED9[12], MACVR, MACDR, RESERVED10,$/;"	m	struct:stm32h_eth	file:
MACA0HR	drivers/stm32f.c	/^      MACIMR, MACA0HR, MACA0LR, MACA1HR, MACA1LR, MACA2HR, MACA2LR, MACA3HR,$/;"	m	struct:stm32f_eth	file:
MACA0HR	drivers/stm32h.c	/^      RESERVED12[2], MACARPAR, RESERVED13[59], MACA0HR, MACA0LR, MACA1HR,$/;"	m	struct:stm32h_eth	file:
MACA0LR	drivers/stm32f.c	/^      MACIMR, MACA0HR, MACA0LR, MACA1HR, MACA1LR, MACA2HR, MACA2LR, MACA3HR,$/;"	m	struct:stm32f_eth	file:
MACA0LR	drivers/stm32h.c	/^      RESERVED12[2], MACARPAR, RESERVED13[59], MACA0HR, MACA0LR, MACA1HR,$/;"	m	struct:stm32h_eth	file:
MACA1HR	drivers/stm32f.c	/^      MACIMR, MACA0HR, MACA0LR, MACA1HR, MACA1LR, MACA2HR, MACA2LR, MACA3HR,$/;"	m	struct:stm32f_eth	file:
MACA1HR	drivers/stm32h.c	/^      RESERVED12[2], MACARPAR, RESERVED13[59], MACA0HR, MACA0LR, MACA1HR,$/;"	m	struct:stm32h_eth	file:
MACA1LR	drivers/stm32f.c	/^      MACIMR, MACA0HR, MACA0LR, MACA1HR, MACA1LR, MACA2HR, MACA2LR, MACA3HR,$/;"	m	struct:stm32f_eth	file:
MACA1LR	drivers/stm32h.c	/^      MACA1LR, MACA2HR, MACA2LR, MACA3HR, MACA3LR, RESERVED14[248], MMCCR,$/;"	m	struct:stm32h_eth	file:
MACA2HR	drivers/stm32f.c	/^      MACIMR, MACA0HR, MACA0LR, MACA1HR, MACA1LR, MACA2HR, MACA2LR, MACA3HR,$/;"	m	struct:stm32f_eth	file:
MACA2HR	drivers/stm32h.c	/^      MACA1LR, MACA2HR, MACA2LR, MACA3HR, MACA3LR, RESERVED14[248], MMCCR,$/;"	m	struct:stm32h_eth	file:
MACA2LR	drivers/stm32f.c	/^      MACIMR, MACA0HR, MACA0LR, MACA1HR, MACA1LR, MACA2HR, MACA2LR, MACA3HR,$/;"	m	struct:stm32f_eth	file:
MACA2LR	drivers/stm32h.c	/^      MACA1LR, MACA2HR, MACA2LR, MACA3HR, MACA3LR, RESERVED14[248], MMCCR,$/;"	m	struct:stm32h_eth	file:
MACA3HR	drivers/stm32f.c	/^      MACIMR, MACA0HR, MACA0LR, MACA1HR, MACA1LR, MACA2HR, MACA2LR, MACA3HR,$/;"	m	struct:stm32f_eth	file:
MACA3HR	drivers/stm32h.c	/^      MACA1LR, MACA2HR, MACA2LR, MACA3HR, MACA3LR, RESERVED14[248], MMCCR,$/;"	m	struct:stm32h_eth	file:
MACA3LR	drivers/stm32f.c	/^      MACA3LR, RESERVED2[40], MMCCR, MMCRIR, MMCTIR, MMCRIMR, MMCTIMR,$/;"	m	struct:stm32f_eth	file:
MACA3LR	drivers/stm32h.c	/^      MACA1LR, MACA2HR, MACA2LR, MACA3HR, MACA3LR, RESERVED14[248], MMCCR,$/;"	m	struct:stm32h_eth	file:
MACACR	drivers/stm32h.c	/^      RESERVED26[3], MACTTSSNR, MACTTSSSR, RESERVED27[2], MACACR, RESERVED28,$/;"	m	struct:stm32h_eth	file:
MACARPAR	drivers/stm32h.c	/^      RESERVED12[2], MACARPAR, RESERVED13[59], MACA0HR, MACA0LR, MACA1HR,$/;"	m	struct:stm32h_eth	file:
MACATSNR	drivers/stm32h.c	/^      MACATSNR, MACATSSR, MACTSIACR, MACTSEACR, MACTSICNR, MACTSECNR,$/;"	m	struct:stm32h_eth	file:
MACATSSR	drivers/stm32h.c	/^      MACATSNR, MACATSSR, MACTSIACR, MACTSEACR, MACTSICNR, MACTSECNR,$/;"	m	struct:stm32h_eth	file:
MACCR	drivers/stm32f.c	/^  volatile uint32_t MACCR, MACFFR, MACHTHR, MACHTLR, MACMIIAR, MACMIIDR, MACFCR,$/;"	m	struct:stm32f_eth	file:
MACCR	drivers/stm32h.c	/^  volatile uint32_t MACCR, MACECR, MACPFR, MACWTR, MACHT0R, MACHT1R,$/;"	m	struct:stm32h_eth	file:
MACDBGR	drivers/stm32f.c	/^      MACVLANTR, RESERVED0[2], MACRWUFFR, MACPMTCSR, RESERVED1, MACDBGR, MACSR,$/;"	m	struct:stm32f_eth	file:
MACDR	drivers/stm32h.c	/^      MACLTCR, MACLETR, MAC1USTCR, RESERVED9[12], MACVR, MACDR, RESERVED10,$/;"	m	struct:stm32h_eth	file:
MACECR	drivers/stm32h.c	/^  volatile uint32_t MACCR, MACECR, MACPFR, MACWTR, MACHT0R, MACHT1R,$/;"	m	struct:stm32h_eth	file:
MACFCR	drivers/stm32f.c	/^  volatile uint32_t MACCR, MACFFR, MACHTHR, MACHTLR, MACMIIAR, MACMIIDR, MACFCR,$/;"	m	struct:stm32f_eth	file:
MACFFR	drivers/stm32f.c	/^  volatile uint32_t MACCR, MACFFR, MACHTHR, MACHTLR, MACMIIAR, MACMIIDR, MACFCR,$/;"	m	struct:stm32f_eth	file:
MACHT0R	drivers/stm32h.c	/^  volatile uint32_t MACCR, MACECR, MACPFR, MACWTR, MACHT0R, MACHT1R,$/;"	m	struct:stm32h_eth	file:
MACHT1R	drivers/stm32h.c	/^  volatile uint32_t MACCR, MACECR, MACPFR, MACWTR, MACHT0R, MACHT1R,$/;"	m	struct:stm32h_eth	file:
MACHTHR	drivers/stm32f.c	/^  volatile uint32_t MACCR, MACFFR, MACHTHR, MACHTLR, MACMIIAR, MACMIIDR, MACFCR,$/;"	m	struct:stm32f_eth	file:
MACHTLR	drivers/stm32f.c	/^  volatile uint32_t MACCR, MACFFR, MACHTHR, MACHTLR, MACMIIAR, MACMIIDR, MACFCR,$/;"	m	struct:stm32f_eth	file:
MACHWF0R	drivers/stm32h.c	/^      MACHWF0R, MACHWF1R, MACHWF2R, RESERVED11[54], MACMDIOAR, MACMDIODR,$/;"	m	struct:stm32h_eth	file:
MACHWF1R	drivers/stm32h.c	/^      MACHWF0R, MACHWF1R, MACHWF2R, RESERVED11[54], MACMDIOAR, MACMDIODR,$/;"	m	struct:stm32h_eth	file:
MACHWF2R	drivers/stm32h.c	/^      MACHWF0R, MACHWF1R, MACHWF2R, RESERVED11[54], MACMDIOAR, MACMDIODR,$/;"	m	struct:stm32h_eth	file:
MACIER	drivers/stm32h.c	/^      MACIER, MACRXTXSR, RESERVED7, MACPCSR, MACRWKPFR, RESERVED8[2], MACLCSR,$/;"	m	struct:stm32h_eth	file:
MACIMR	drivers/stm32f.c	/^      MACIMR, MACA0HR, MACA0LR, MACA1HR, MACA1LR, MACA2HR, MACA2LR, MACA3HR,$/;"	m	struct:stm32f_eth	file:
MACISR	drivers/stm32h.c	/^      RESERVED4[2], MACTFCR, RESERVED5[7], MACRFCR, RESERVED6[7], MACISR,$/;"	m	struct:stm32h_eth	file:
MACIVIR	drivers/stm32h.c	/^      RESERVED1[14], MACVTR, RESERVED2, MACVHTR, RESERVED3, MACVIR, MACIVIR,$/;"	m	struct:stm32h_eth	file:
MACL3A0R0R	drivers/stm32h.c	/^      RESERVED21[2], MACL3A0R0R, MACL3A1R0R, MACL3A2R0R, MACL3A3R0R,$/;"	m	struct:stm32h_eth	file:
MACL3A0R1R	drivers/stm32h.c	/^      RESERVED22[4], MACL3L4C1R, MACL4A1R, RESERVED23[2], MACL3A0R1R,$/;"	m	struct:stm32h_eth	file:
MACL3A1R0R	drivers/stm32h.c	/^      RESERVED21[2], MACL3A0R0R, MACL3A1R0R, MACL3A2R0R, MACL3A3R0R,$/;"	m	struct:stm32h_eth	file:
MACL3A1R1R	drivers/stm32h.c	/^      MACL3A1R1R, MACL3A2R1R, MACL3A3R1R, RESERVED24[108], MACTSCR, MACSSIR,$/;"	m	struct:stm32h_eth	file:
MACL3A2R0R	drivers/stm32h.c	/^      RESERVED21[2], MACL3A0R0R, MACL3A1R0R, MACL3A2R0R, MACL3A3R0R,$/;"	m	struct:stm32h_eth	file:
MACL3A2R1R	drivers/stm32h.c	/^      MACL3A1R1R, MACL3A2R1R, MACL3A3R1R, RESERVED24[108], MACTSCR, MACSSIR,$/;"	m	struct:stm32h_eth	file:
MACL3A3R0R	drivers/stm32h.c	/^      RESERVED21[2], MACL3A0R0R, MACL3A1R0R, MACL3A2R0R, MACL3A3R0R,$/;"	m	struct:stm32h_eth	file:
MACL3A3R1R	drivers/stm32h.c	/^      MACL3A1R1R, MACL3A2R1R, MACL3A3R1R, RESERVED24[108], MACTSCR, MACSSIR,$/;"	m	struct:stm32h_eth	file:
MACL3L4C0R	drivers/stm32h.c	/^      MMCRLPIMSTR, MMCRLPITCR, RESERVED20[65], MACL3L4C0R, MACL4A0R,$/;"	m	struct:stm32h_eth	file:
MACL3L4C1R	drivers/stm32h.c	/^      RESERVED22[4], MACL3L4C1R, MACL4A1R, RESERVED23[2], MACL3A0R1R,$/;"	m	struct:stm32h_eth	file:
MACL4A0R	drivers/stm32h.c	/^      MMCRLPIMSTR, MMCRLPITCR, RESERVED20[65], MACL3L4C0R, MACL4A0R,$/;"	m	struct:stm32h_eth	file:
MACL4A1R	drivers/stm32h.c	/^      RESERVED22[4], MACL3L4C1R, MACL4A1R, RESERVED23[2], MACL3A0R1R,$/;"	m	struct:stm32h_eth	file:
MACLCSR	drivers/stm32h.c	/^      MACIER, MACRXTXSR, RESERVED7, MACPCSR, MACRWKPFR, RESERVED8[2], MACLCSR,$/;"	m	struct:stm32h_eth	file:
MACLETR	drivers/stm32h.c	/^      MACLTCR, MACLETR, MAC1USTCR, RESERVED9[12], MACVR, MACDR, RESERVED10,$/;"	m	struct:stm32h_eth	file:
MACLMIR	drivers/stm32h.c	/^      MACPPSWR, RESERVED31[12], MACPOCR, MACSPI0R, MACSPI1R, MACSPI2R, MACLMIR,$/;"	m	struct:stm32h_eth	file:
MACLTCR	drivers/stm32h.c	/^      MACLTCR, MACLETR, MAC1USTCR, RESERVED9[12], MACVR, MACDR, RESERVED10,$/;"	m	struct:stm32h_eth	file:
MACMDIOAR	drivers/stm32h.c	/^      MACHWF0R, MACHWF1R, MACHWF2R, RESERVED11[54], MACMDIOAR, MACMDIODR,$/;"	m	struct:stm32h_eth	file:
MACMDIODR	drivers/stm32h.c	/^      MACHWF0R, MACHWF1R, MACHWF2R, RESERVED11[54], MACMDIOAR, MACMDIODR,$/;"	m	struct:stm32h_eth	file:
MACMIIAR	drivers/stm32f.c	/^  volatile uint32_t MACCR, MACFFR, MACHTHR, MACHTLR, MACMIIAR, MACMIIDR, MACFCR,$/;"	m	struct:stm32f_eth	file:
MACMIIDR	drivers/stm32f.c	/^  volatile uint32_t MACCR, MACFFR, MACHTHR, MACHTLR, MACMIIAR, MACMIIDR, MACFCR,$/;"	m	struct:stm32f_eth	file:
MACPCSR	drivers/stm32h.c	/^      MACIER, MACRXTXSR, RESERVED7, MACPCSR, MACRWKPFR, RESERVED8[2], MACLCSR,$/;"	m	struct:stm32h_eth	file:
MACPFR	drivers/stm32h.c	/^  volatile uint32_t MACCR, MACECR, MACPFR, MACWTR, MACHT0R, MACHT1R,$/;"	m	struct:stm32h_eth	file:
MACPMTCSR	drivers/stm32f.c	/^      MACVLANTR, RESERVED0[2], MACRWUFFR, MACPMTCSR, RESERVED1, MACDBGR, MACSR,$/;"	m	struct:stm32f_eth	file:
MACPOCR	drivers/stm32h.c	/^      MACPPSWR, RESERVED31[12], MACPOCR, MACSPI0R, MACSPI1R, MACSPI2R, MACLMIR,$/;"	m	struct:stm32h_eth	file:
MACPPSCR	drivers/stm32h.c	/^      RESERVED29[4], MACPPSCR, RESERVED30[3], MACPPSTTSR, MACPPSTTNR, MACPPSIR,$/;"	m	struct:stm32h_eth	file:
MACPPSIR	drivers/stm32h.c	/^      RESERVED29[4], MACPPSCR, RESERVED30[3], MACPPSTTSR, MACPPSTTNR, MACPPSIR,$/;"	m	struct:stm32h_eth	file:
MACPPSTTNR	drivers/stm32h.c	/^      RESERVED29[4], MACPPSCR, RESERVED30[3], MACPPSTTSR, MACPPSTTNR, MACPPSIR,$/;"	m	struct:stm32h_eth	file:
MACPPSTTSR	drivers/stm32h.c	/^      RESERVED29[4], MACPPSCR, RESERVED30[3], MACPPSTTSR, MACPPSTTNR, MACPPSIR,$/;"	m	struct:stm32h_eth	file:
MACPPSWR	drivers/stm32h.c	/^      MACPPSWR, RESERVED31[12], MACPOCR, MACSPI0R, MACSPI1R, MACSPI2R, MACLMIR,$/;"	m	struct:stm32h_eth	file:
MACRFCR	drivers/stm32h.c	/^      RESERVED4[2], MACTFCR, RESERVED5[7], MACRFCR, RESERVED6[7], MACISR,$/;"	m	struct:stm32h_eth	file:
MACRWKPFR	drivers/stm32h.c	/^      MACIER, MACRXTXSR, RESERVED7, MACPCSR, MACRWKPFR, RESERVED8[2], MACLCSR,$/;"	m	struct:stm32h_eth	file:
MACRWUFFR	drivers/stm32f.c	/^      MACVLANTR, RESERVED0[2], MACRWUFFR, MACPMTCSR, RESERVED1, MACDBGR, MACSR,$/;"	m	struct:stm32f_eth	file:
MACRXTXSR	drivers/stm32h.c	/^      MACIER, MACRXTXSR, RESERVED7, MACPCSR, MACRWKPFR, RESERVED8[2], MACLCSR,$/;"	m	struct:stm32h_eth	file:
MACSPI0R	drivers/stm32h.c	/^      MACPPSWR, RESERVED31[12], MACPOCR, MACSPI0R, MACSPI1R, MACSPI2R, MACLMIR,$/;"	m	struct:stm32h_eth	file:
MACSPI1R	drivers/stm32h.c	/^      MACPPSWR, RESERVED31[12], MACPOCR, MACSPI0R, MACSPI1R, MACSPI2R, MACLMIR,$/;"	m	struct:stm32h_eth	file:
MACSPI2R	drivers/stm32h.c	/^      MACPPSWR, RESERVED31[12], MACPOCR, MACSPI0R, MACSPI1R, MACSPI2R, MACLMIR,$/;"	m	struct:stm32h_eth	file:
MACSR	drivers/stm32f.c	/^      MACVLANTR, RESERVED0[2], MACRWUFFR, MACPMTCSR, RESERVED1, MACDBGR, MACSR,$/;"	m	struct:stm32f_eth	file:
MACSSIR	drivers/stm32h.c	/^      MACL3A1R1R, MACL3A2R1R, MACL3A3R1R, RESERVED24[108], MACTSCR, MACSSIR,$/;"	m	struct:stm32h_eth	file:
MACSTNR	drivers/stm32h.c	/^      MACSTSR, MACSTNR, MACSTSUR, MACSTNUR, MACTSAR, RESERVED25, MACTSSR,$/;"	m	struct:stm32h_eth	file:
MACSTNUR	drivers/stm32h.c	/^      MACSTSR, MACSTNR, MACSTSUR, MACSTNUR, MACTSAR, RESERVED25, MACTSSR,$/;"	m	struct:stm32h_eth	file:
MACSTSR	drivers/stm32h.c	/^      MACSTSR, MACSTNR, MACSTSUR, MACSTNUR, MACTSAR, RESERVED25, MACTSSR,$/;"	m	struct:stm32h_eth	file:
MACSTSUR	drivers/stm32h.c	/^      MACSTSR, MACSTNR, MACSTSUR, MACSTNUR, MACTSAR, RESERVED25, MACTSSR,$/;"	m	struct:stm32h_eth	file:
MACTFCR	drivers/stm32h.c	/^      RESERVED4[2], MACTFCR, RESERVED5[7], MACRFCR, RESERVED6[7], MACISR,$/;"	m	struct:stm32h_eth	file:
MACTSAR	drivers/stm32h.c	/^      MACSTSR, MACSTNR, MACSTSUR, MACSTNUR, MACTSAR, RESERVED25, MACTSSR,$/;"	m	struct:stm32h_eth	file:
MACTSCR	drivers/stm32h.c	/^      MACL3A1R1R, MACL3A2R1R, MACL3A3R1R, RESERVED24[108], MACTSCR, MACSSIR,$/;"	m	struct:stm32h_eth	file:
MACTSEACR	drivers/stm32h.c	/^      MACATSNR, MACATSSR, MACTSIACR, MACTSEACR, MACTSICNR, MACTSECNR,$/;"	m	struct:stm32h_eth	file:
MACTSECNR	drivers/stm32h.c	/^      MACATSNR, MACATSSR, MACTSIACR, MACTSEACR, MACTSICNR, MACTSECNR,$/;"	m	struct:stm32h_eth	file:
MACTSIACR	drivers/stm32h.c	/^      MACATSNR, MACATSSR, MACTSIACR, MACTSEACR, MACTSICNR, MACTSECNR,$/;"	m	struct:stm32h_eth	file:
MACTSICNR	drivers/stm32h.c	/^      MACATSNR, MACATSSR, MACTSIACR, MACTSEACR, MACTSICNR, MACTSECNR,$/;"	m	struct:stm32h_eth	file:
MACTSSR	drivers/stm32h.c	/^      MACSTSR, MACSTNR, MACSTSUR, MACSTNUR, MACTSAR, RESERVED25, MACTSSR,$/;"	m	struct:stm32h_eth	file:
MACTTSSNR	drivers/stm32h.c	/^      RESERVED26[3], MACTTSSNR, MACTTSSSR, RESERVED27[2], MACACR, RESERVED28,$/;"	m	struct:stm32h_eth	file:
MACTTSSSR	drivers/stm32h.c	/^      RESERVED26[3], MACTTSSNR, MACTTSSSR, RESERVED27[2], MACACR, RESERVED28,$/;"	m	struct:stm32h_eth	file:
MACVHTR	drivers/stm32h.c	/^      RESERVED1[14], MACVTR, RESERVED2, MACVHTR, RESERVED3, MACVIR, MACIVIR,$/;"	m	struct:stm32h_eth	file:
MACVIR	drivers/stm32h.c	/^      RESERVED1[14], MACVTR, RESERVED2, MACVHTR, RESERVED3, MACVIR, MACIVIR,$/;"	m	struct:stm32h_eth	file:
MACVLANTR	drivers/stm32f.c	/^      MACVLANTR, RESERVED0[2], MACRWUFFR, MACPMTCSR, RESERVED1, MACDBGR, MACSR,$/;"	m	struct:stm32f_eth	file:
MACVR	drivers/stm32h.c	/^      MACLTCR, MACLETR, MAC1USTCR, RESERVED9[12], MACVR, MACDR, RESERVED10,$/;"	m	struct:stm32h_eth	file:
MACVTR	drivers/stm32h.c	/^      RESERVED1[14], MACVTR, RESERVED2, MACVHTR, RESERVED3, MACVIR, MACIVIR,$/;"	m	struct:stm32h_eth	file:
MACWTR	drivers/stm32h.c	/^  volatile uint32_t MACCR, MACECR, MACPFR, MACWTR, MACHT0R, MACHT1R,$/;"	m	struct:stm32h_eth	file:
MD5STEP	md5.c	39;"	d	file:
MG_64BIT_ALIGNED	drivers/imxrt.c	/^static uint8_t s_rxbuf[ETH_DESC_CNT][ETH_PKT_SIZE] MG_64BIT_ALIGNED;$/;"	v	file:
MG_64BIT_ALIGNED	drivers/imxrt.c	/^static uint8_t s_txbuf[ETH_DESC_CNT][ETH_PKT_SIZE] MG_64BIT_ALIGNED;$/;"	v	file:
MG_64BIT_ALIGNED	drivers/imxrt.c	/^static volatile struct enet_desc s_rxdesc[ETH_DESC_CNT] MG_64BIT_ALIGNED;$/;"	v	typeref:struct:s_rxdesc	file:
MG_64BIT_ALIGNED	drivers/imxrt.c	/^static volatile struct enet_desc s_txdesc[ETH_DESC_CNT] MG_64BIT_ALIGNED;$/;"	v	typeref:struct:s_txdesc	file:
MG_64BIT_ALIGNED	drivers/imxrt.c	41;"	d	file:
MG_ARCH	arch.h	21;"	d
MG_ARCH	arch.h	23;"	d
MG_ARCH	arch.h	25;"	d
MG_ARCH	arch.h	27;"	d
MG_ARCH	arch.h	29;"	d
MG_ARCH	arch.h	31;"	d
MG_ARCH	arch.h	34;"	d
MG_ARCH	arch.h	36;"	d
MG_ARCH	arch.h	38;"	d
MG_ARCH	arch.h	40;"	d
MG_ARCH_ARMCC	arch.h	15;"	d
MG_ARCH_AZURERTOS	arch.h	9;"	d
MG_ARCH_CMSIS_RTOS1	arch.h	12;"	d
MG_ARCH_CMSIS_RTOS2	arch.h	16;"	d
MG_ARCH_CUSTOM	arch.h	3;"	d
MG_ARCH_ESP32	arch.h	6;"	d
MG_ARCH_ESP8266	arch.h	7;"	d
MG_ARCH_FREERTOS	arch.h	8;"	d
MG_ARCH_NEWLIB	arch.h	11;"	d
MG_ARCH_RP2040	arch.h	14;"	d
MG_ARCH_RTTHREAD	arch.h	17;"	d
MG_ARCH_TIRTOS	arch.h	13;"	d
MG_ARCH_UNIX	arch.h	4;"	d
MG_ARCH_WIN32	arch.h	5;"	d
MG_ARCH_ZEPHYR	arch.h	10;"	d
MG_ARM_DISABLE_IRQ	util.h	43;"	d
MG_ARM_DISABLE_IRQ	util.h	46;"	d
MG_ARM_ENABLE_IRQ	util.h	44;"	d
MG_ARM_ENABLE_IRQ	util.h	47;"	d
MG_BIG_ENDIAN	arch.h	55;"	d
MG_BIT	util.h	36;"	d
MG_CHECKRET	json.c	141;"	d	file:
MG_C_STR	str.h	13;"	d
MG_DATA_SIZE	config.h	93;"	d
MG_DEBUG	log.h	35;"	d
MG_DEVICE	device.h	15;"	d
MG_DEVICE_CH32V307	device.h	11;"	d
MG_DEVICE_CUSTOM	device.h	12;"	d
MG_DEVICE_NONE	device.h	8;"	d
MG_DEVICE_STM32H5	device.h	9;"	d
MG_DEVICE_STM32H7	device.h	10;"	d
MG_DIRSEP	arch_azurertos.h	20;"	d
MG_DIRSEP	arch_win32.h	76;"	d
MG_DIRSEP	config.h	117;"	d
MG_DMARK	http.c	35;"	d	file:
MG_DSB	util.h	51;"	d
MG_DSB	util.h	53;"	d
MG_DSB	util.h	55;"	d
MG_DSB	util.h	57;"	d
MG_DSB	util.h	59;"	d
MG_ENABLE_ASSERT	config.h	81;"	d
MG_ENABLE_CUSTOM_LOG	config.h	8;"	d
MG_ENABLE_CUSTOM_MILLIS	config.h	73;"	d
MG_ENABLE_CUSTOM_RANDOM	config.h	69;"	d
MG_ENABLE_DIRLIST	arch_newlib.h	21;"	d
MG_ENABLE_DIRLIST	arch_unix.h	52;"	d
MG_ENABLE_DIRLIST	arch_win32.h	106;"	d
MG_ENABLE_DIRLIST	config.h	65;"	d
MG_ENABLE_EPOLL	arch_unix.h	12;"	d
MG_ENABLE_EPOLL	config.h	36;"	d
MG_ENABLE_FATFS	config.h	40;"	d
MG_ENABLE_FILE	config.h	122;"	d
MG_ENABLE_FILE	config.h	124;"	d
MG_ENABLE_FREERTOS_TCP	arch.h	32;"	d
MG_ENABLE_FREERTOS_TCP	config.h	20;"	d
MG_ENABLE_IPV6	config.h	48;"	d
MG_ENABLE_LOG	config.h	4;"	d
MG_ENABLE_LWIP	config.h	16;"	d
MG_ENABLE_MD5	config.h	56;"	d
MG_ENABLE_PACKED_FS	config.h	77;"	d
MG_ENABLE_POLL	arch_unix.h	14;"	d
MG_ENABLE_POLL	config.h	32;"	d
MG_ENABLE_PROFILE	config.h	158;"	d
MG_ENABLE_RL	arch_rtx.h	38;"	d
MG_ENABLE_RL	config.h	24;"	d
MG_ENABLE_SOCKET	arch_newlib.h	20;"	d
MG_ENABLE_SOCKET	config.h	28;"	d
MG_ENABLE_SSI	arch_zephyr.h	34;"	d
MG_ENABLE_SSI	config.h	44;"	d
MG_ENABLE_TCPIP	config.h	12;"	d
MG_ENABLE_WINSOCK	config.h	61;"	d
MG_EOO	json.c	151;"	d	file:
MG_EPHEMERAL_PORT_BASE	net_builtin.c	4;"	d	file:
MG_EPOLL_ADD	config.h	141;"	d
MG_EPOLL_ADD	config.h	153;"	d
MG_EPOLL_MOD	config.h	146;"	d
MG_EPOLL_MOD	config.h	154;"	d
MG_ERROR	log.h	33;"	d
MG_ESC	printf.h	30;"	d
MG_EV_ACCEPT	event.h	/^  MG_EV_ACCEPT,     \/\/ Connection accepted          NULL$/;"	e	enum:__anon11
MG_EV_CLOSE	event.h	/^  MG_EV_CLOSE,      \/\/ Connection closed            NULL$/;"	e	enum:__anon11
MG_EV_CONNECT	event.h	/^  MG_EV_CONNECT,    \/\/ Connection established       NULL$/;"	e	enum:__anon11
MG_EV_ERROR	event.h	/^  MG_EV_ERROR,      \/\/ Error                        char *error_message$/;"	e	enum:__anon11
MG_EV_HTTP_MSG	event.h	/^  MG_EV_HTTP_MSG,   \/\/ HTTP request\/response        struct mg_http_message *$/;"	e	enum:__anon11
MG_EV_MQTT_CMD	event.h	/^  MG_EV_MQTT_CMD,   \/\/ MQTT low-level command       struct mg_mqtt_message *$/;"	e	enum:__anon11
MG_EV_MQTT_MSG	event.h	/^  MG_EV_MQTT_MSG,   \/\/ MQTT PUBLISH received        struct mg_mqtt_message *$/;"	e	enum:__anon11
MG_EV_MQTT_OPEN	event.h	/^  MG_EV_MQTT_OPEN,  \/\/ MQTT CONNACK received        int *connack_status_code$/;"	e	enum:__anon11
MG_EV_OPEN	event.h	/^  MG_EV_OPEN,       \/\/ Connection created           NULL$/;"	e	enum:__anon11
MG_EV_POLL	event.h	/^  MG_EV_POLL,       \/\/ mg_mgr_poll iteration        uint64_t *uptime_millis$/;"	e	enum:__anon11
MG_EV_READ	event.h	/^  MG_EV_READ,       \/\/ Data received from socket    long *bytes_read$/;"	e	enum:__anon11
MG_EV_RESOLVE	event.h	/^  MG_EV_RESOLVE,    \/\/ Host name is resolved        NULL$/;"	e	enum:__anon11
MG_EV_SNTP_TIME	event.h	/^  MG_EV_SNTP_TIME,  \/\/ SNTP time received           uint64_t *epoch_millis$/;"	e	enum:__anon11
MG_EV_TLS_HS	event.h	/^  MG_EV_TLS_HS,     \/\/ TLS handshake succeeded      NULL$/;"	e	enum:__anon11
MG_EV_USER	event.h	/^  MG_EV_USER        \/\/ Starting ID for user events$/;"	e	enum:__anon11
MG_EV_WAKEUP	event.h	/^  MG_EV_WAKEUP,     \/\/ mg_wakeup() data received    struct mg_str *data$/;"	e	enum:__anon11
MG_EV_WRITE	event.h	/^  MG_EV_WRITE,      \/\/ Data written to socket       long *bytes_written$/;"	e	enum:__anon11
MG_EV_WS_CTL	event.h	/^  MG_EV_WS_CTL,     \/\/ Websocket control msg        struct mg_ws_message *$/;"	e	enum:__anon11
MG_EV_WS_MSG	event.h	/^  MG_EV_WS_MSG,     \/\/ Websocket msg, text or bin   struct mg_ws_message *$/;"	e	enum:__anon11
MG_EV_WS_OPEN	event.h	/^  MG_EV_WS_OPEN,    \/\/ Websocket handshake done     struct mg_http_message *$/;"	e	enum:__anon11
MG_FIRMWARE_CURRENT	ota.h	/^enum { MG_FIRMWARE_CURRENT = 0, MG_FIRMWARE_PREVIOUS = 1 };$/;"	e	enum:__anon8
MG_FIRMWARE_PREVIOUS	ota.h	/^enum { MG_FIRMWARE_CURRENT = 0, MG_FIRMWARE_PREVIOUS = 1 };$/;"	e	enum:__anon8
MG_FS_DIR	fs.h	/^enum { MG_FS_READ = 1, MG_FS_WRITE = 2, MG_FS_DIR = 4 };$/;"	e	enum:__anon6
MG_FS_READ	fs.h	/^enum { MG_FS_READ = 1, MG_FS_WRITE = 2, MG_FS_DIR = 4 };$/;"	e	enum:__anon6
MG_FS_WRITE	fs.h	/^enum { MG_FS_READ = 1, MG_FS_WRITE = 2, MG_FS_DIR = 4 };$/;"	e	enum:__anon6
MG_HTTP_INDEX	config.h	101;"	d
MG_INFO	log.h	34;"	d
MG_INVALID_SOCKET	arch_win32.h	63;"	d
MG_INVALID_SOCKET	config.h	129;"	d
MG_INVALID_SOCKET	net_ft.h	13;"	d
MG_IO_ERR	tls.h	/^enum { MG_IO_ERR = -1, MG_IO_WAIT = -2, MG_IO_RESET = -3 };$/;"	e	enum:__anon3
MG_IO_RESET	tls.h	/^enum { MG_IO_ERR = -1, MG_IO_WAIT = -2, MG_IO_RESET = -3 };$/;"	e	enum:__anon3
MG_IO_SIZE	arch_freertos.h	27;"	d
MG_IO_SIZE	arch_rtthread.h	21;"	d
MG_IO_SIZE	config.h	85;"	d
MG_IO_WAIT	tls.h	/^enum { MG_IO_ERR = -1, MG_IO_WAIT = -2, MG_IO_RESET = -3 };$/;"	e	enum:__anon3
MG_IPADDR_PARTS	util.h	32;"	d
MG_IPV6_V6ONLY	config.h	52;"	d
MG_IRAM	ota.h	17;"	d
MG_IRAM	ota.h	19;"	d
MG_JSON_INVALID	json.h	/^enum { MG_JSON_TOO_DEEP = -1, MG_JSON_INVALID = -2, MG_JSON_NOT_FOUND = -3 };$/;"	e	enum:__anon9
MG_JSON_MAX_DEPTH	json.h	7;"	d
MG_JSON_NOT_FOUND	json.h	/^enum { MG_JSON_TOO_DEEP = -1, MG_JSON_INVALID = -2, MG_JSON_NOT_FOUND = -3 };$/;"	e	enum:__anon9
MG_JSON_TOO_DEEP	json.h	/^enum { MG_JSON_TOO_DEEP = -1, MG_JSON_INVALID = -2, MG_JSON_NOT_FOUND = -3 };$/;"	e	enum:__anon9
MG_LL_DEBUG	log.h	/^enum { MG_LL_NONE, MG_LL_ERROR, MG_LL_INFO, MG_LL_DEBUG, MG_LL_VERBOSE };$/;"	e	enum:__anon4
MG_LL_ERROR	log.h	/^enum { MG_LL_NONE, MG_LL_ERROR, MG_LL_INFO, MG_LL_DEBUG, MG_LL_VERBOSE };$/;"	e	enum:__anon4
MG_LL_INFO	log.h	/^enum { MG_LL_NONE, MG_LL_ERROR, MG_LL_INFO, MG_LL_DEBUG, MG_LL_VERBOSE };$/;"	e	enum:__anon4
MG_LL_NONE	log.h	/^enum { MG_LL_NONE, MG_LL_ERROR, MG_LL_INFO, MG_LL_DEBUG, MG_LL_VERBOSE };$/;"	e	enum:__anon4
MG_LL_VERBOSE	log.h	/^enum { MG_LL_NONE, MG_LL_ERROR, MG_LL_INFO, MG_LL_DEBUG, MG_LL_VERBOSE };$/;"	e	enum:__anon4
MG_LOAD_BE16	tls_builtin.c	42;"	d	file:
MG_LOG	log.h	19;"	d
MG_LOG	log.h	27;"	d
MG_MAX_HTTP_HEADERS	config.h	97;"	d
MG_MAX_RECV_SIZE	config.h	89;"	d
MG_MAX_SSI_DEPTH	ssi.c	6;"	d	file:
MG_MBEDTLS_RNG_GET	tls_mbed.c	7;"	d	file:
MG_MBEDTLS_RNG_GET	tls_mbed.c	9;"	d	file:
MG_MEMORY_BARRIER	queue.c	11;"	d	file:
MG_MEMORY_BARRIER	queue.c	7;"	d	file:
MG_MEMORY_BARRIER	queue.c	9;"	d	file:
MG_NULL_STR	str.h	10;"	d
MG_OTA	ota.h	13;"	d
MG_OTADATA_KEY	ota_flash.c	12;"	d	file:
MG_OTA_COMMITTED	ota.h	/^  MG_OTA_COMMITTED = 3     \/\/ The firmware is good$/;"	e	enum:__anon7
MG_OTA_CUSTOM	ota.h	10;"	d
MG_OTA_FIRST_BOOT	ota.h	/^  MG_OTA_FIRST_BOOT = 1,   \/\/ Device booting the first time after the OTA$/;"	e	enum:__anon7
MG_OTA_FLASH	ota.h	9;"	d
MG_OTA_NONE	ota.h	8;"	d
MG_OTA_UNAVAILABLE	ota.h	/^  MG_OTA_UNAVAILABLE = 0,  \/\/ No OTA information is present$/;"	e	enum:__anon7
MG_OTA_UNCOMMITTED	ota.h	/^  MG_OTA_UNCOMMITTED = 2,  \/\/ Ditto, but marking us for the rollback$/;"	e	enum:__anon7
MG_PATH_MAX	arch_esp32.h	22;"	d
MG_PATH_MAX	arch_esp8266.h	24;"	d
MG_PATH_MAX	arch_newlib.h	19;"	d
MG_PATH_MAX	arch_unix.h	56;"	d
MG_PATH_MAX	arch_win32.h	79;"	d
MG_PATH_MAX	config.h	106;"	d
MG_PATH_MAX	config.h	108;"	d
MG_PROFILE_ALLOC_GRANULARITY	profile.h	31;"	d
MG_PROF_ADD	profile.h	38;"	d
MG_PROF_ADD	profile.h	72;"	d
MG_PROF_DUMP	profile.h	57;"	d
MG_PROF_DUMP	profile.h	73;"	d
MG_PROF_FREE	profile.h	54;"	d
MG_PROF_FREE	profile.h	71;"	d
MG_PROF_INIT	profile.h	47;"	d
MG_PROF_INIT	profile.h	70;"	d
MG_PUTCHAR	arch_zephyr.h	20;"	d
MG_REG	util.h	35;"	d
MG_ROUND_DOWN	util.h	40;"	d
MG_ROUND_UP	util.h	39;"	d
MG_SET_BITS	util.h	37;"	d
MG_SOCKET_ERRNO	config.h	137;"	d
MG_SOCKET_TYPE	arch_win32.h	64;"	d
MG_SOCKET_TYPE	config.h	133;"	d
MG_SOCKET_TYPE	net_ft.h	12;"	d
MG_SOCK_ERR	arch_win32.h	86;"	d
MG_SOCK_ERR	net_ft.h	27;"	d
MG_SOCK_ERR	net_rl.h	10;"	d
MG_SOCK_ERR	sock.c	30;"	d	file:
MG_SOCK_INTR	net_ft.h	38;"	d
MG_SOCK_INTR	net_rl.h	22;"	d
MG_SOCK_INTR	sock.c	34;"	d	file:
MG_SOCK_LISTEN_BACKLOG_SIZE	arch_rtx.h	40;"	d
MG_SOCK_LISTEN_BACKLOG_SIZE	config.h	113;"	d
MG_SOCK_PENDING	arch_win32.h	88;"	d
MG_SOCK_PENDING	net_ft.h	29;"	d
MG_SOCK_PENDING	net_rl.h	12;"	d
MG_SOCK_PENDING	sock.c	38;"	d	file:
MG_SOCK_RESET	arch_win32.h	93;"	d
MG_SOCK_RESET	net_ft.h	35;"	d
MG_SOCK_RESET	net_rl.h	16;"	d
MG_SOCK_RESET	sock.c	43;"	d	file:
MG_SSI_BUFSIZ	ssi.c	10;"	d	file:
MG_STAT_FUNC	fs_posix.c	10;"	d	file:
MG_STAT_STRUCT	fs_posix.c	6;"	d	file:
MG_TCPIP_MTU_DEFAULT	net_builtin.h	32;"	d
MG_TCPIP_STATE_DOWN	net_builtin.h	45;"	d
MG_TCPIP_STATE_READY	net_builtin.h	48;"	d
MG_TCPIP_STATE_REQ	net_builtin.h	47;"	d
MG_TCPIP_STATE_UP	net_builtin.h	46;"	d
MG_TIMER_CALLED	timer.c	4;"	d	file:
MG_TIMER_ONCE	timer.h	10;"	d
MG_TIMER_REPEAT	timer.h	11;"	d
MG_TIMER_RUN_NOW	timer.h	12;"	d
MG_TLS	tls.h	10;"	d
MG_TLS_BUILTIN	tls.h	6;"	d
MG_TLS_CUSTOM	tls.h	7;"	d
MG_TLS_HS_CLIENT_CHANGE_CIPHER	tls_builtin.c	/^  MG_TLS_HS_CLIENT_CHANGE_CIPHER,  \/\/ finally wait for ClientChangeCipher$/;"	e	enum:mg_tls_hs_state	file:
MG_TLS_HS_CLIENT_FINISH	tls_builtin.c	/^  MG_TLS_HS_CLIENT_FINISH,         \/\/ and ClientFinish (encrypted)$/;"	e	enum:mg_tls_hs_state	file:
MG_TLS_HS_CLIENT_HELLO	tls_builtin.c	/^  MG_TLS_HS_CLIENT_HELLO,  \/\/ first, wait for ClientHello$/;"	e	enum:mg_tls_hs_state	file:
MG_TLS_HS_DONE	tls_builtin.c	/^  MG_TLS_HS_DONE,  \/\/ finish handshake, start application data flow$/;"	e	enum:mg_tls_hs_state	file:
MG_TLS_HS_SERVER_HELLO	tls_builtin.c	/^  MG_TLS_HS_SERVER_HELLO,  \/\/ then, send all server handshake data at once$/;"	e	enum:mg_tls_hs_state	file:
MG_TLS_MBED	tls.h	4;"	d
MG_TLS_NONE	tls.h	3;"	d
MG_TLS_OPENSSL	tls.h	5;"	d
MG_U32	util.h	26;"	d
MG_U8P	util.h	31;"	d
MG_VERBOSE	log.h	36;"	d
MG_VERSION	version.h	1;"	d
MIBC	drivers/imxrt.c	/^      ECR, RESERVED3[6], MMFR, MSCR, RESERVED4[7], MIBC, RESERVED5[7], RCR,$/;"	m	struct:imxrt_enet	file:
MIP_TCP_ACK_MS	net_builtin.c	11;"	d	file:
MIP_TCP_ARP_MS	net_builtin.c	12;"	d	file:
MIP_TCP_FIN_MS	net_builtin.c	14;"	d	file:
MIP_TCP_KEEPALIVE_MS	net_builtin.c	8;"	d	file:
MIP_TCP_SYN_MS	net_builtin.c	13;"	d	file:
MIP_TTYPE_ACK	net_builtin.c	22;"	d	file:
MIP_TTYPE_ARP	net_builtin.c	23;"	d	file:
MIP_TTYPE_FIN	net_builtin.c	25;"	d	file:
MIP_TTYPE_KEEPALIVE	net_builtin.c	21;"	d	file:
MIP_TTYPE_SYN	net_builtin.c	24;"	d	file:
MIX	tls_aes128.c	118;"	d	file:
MMCCR	drivers/stm32f.c	/^      MACA3LR, RESERVED2[40], MMCCR, MMCRIR, MMCTIR, MMCRIMR, MMCTIMR,$/;"	m	struct:stm32f_eth	file:
MMCCR	drivers/stm32h.c	/^      MACA1LR, MACA2HR, MACA2LR, MACA3HR, MACA3LR, RESERVED14[248], MMCCR,$/;"	m	struct:stm32h_eth	file:
MMCRAEPR	drivers/stm32h.c	/^      RESERVED16[5], MMCTPCGR, RESERVED17[10], MMCRCRCEPR, MMCRAEPR,$/;"	m	struct:stm32h_eth	file:
MMCRCRCEPR	drivers/stm32h.c	/^      RESERVED16[5], MMCTPCGR, RESERVED17[10], MMCRCRCEPR, MMCRAEPR,$/;"	m	struct:stm32h_eth	file:
MMCRFAECR	drivers/stm32f.c	/^      RESERVED5[10], MMCRFCECR, MMCRFAECR, RESERVED6[10], MMCRGUFCR,$/;"	m	struct:stm32f_eth	file:
MMCRFCECR	drivers/stm32f.c	/^      RESERVED5[10], MMCRFCECR, MMCRFAECR, RESERVED6[10], MMCRGUFCR,$/;"	m	struct:stm32f_eth	file:
MMCRGUFCR	drivers/stm32f.c	/^      RESERVED5[10], MMCRFCECR, MMCRFAECR, RESERVED6[10], MMCRGUFCR,$/;"	m	struct:stm32f_eth	file:
MMCRIMR	drivers/stm32f.c	/^      MACA3LR, RESERVED2[40], MMCCR, MMCRIR, MMCTIR, MMCRIMR, MMCTIMR,$/;"	m	struct:stm32f_eth	file:
MMCRIMR	drivers/stm32h.c	/^      MMCRIR, MMCTIR, MMCRIMR, MMCTIMR, RESERVED15[14], MMCTSCGPR, MMCTMCGPR,$/;"	m	struct:stm32h_eth	file:
MMCRIR	drivers/stm32f.c	/^      MACA3LR, RESERVED2[40], MMCCR, MMCRIR, MMCTIR, MMCRIMR, MMCTIMR,$/;"	m	struct:stm32f_eth	file:
MMCRIR	drivers/stm32h.c	/^      MMCRIR, MMCTIR, MMCRIMR, MMCTIMR, RESERVED15[14], MMCTSCGPR, MMCTMCGPR,$/;"	m	struct:stm32h_eth	file:
MMCRLPIMSTR	drivers/stm32h.c	/^      MMCRLPIMSTR, MMCRLPITCR, RESERVED20[65], MACL3L4C0R, MACL4A0R,$/;"	m	struct:stm32h_eth	file:
MMCRLPITCR	drivers/stm32h.c	/^      MMCRLPIMSTR, MMCRLPITCR, RESERVED20[65], MACL3L4C0R, MACL4A0R,$/;"	m	struct:stm32h_eth	file:
MMCRUPGR	drivers/stm32h.c	/^      RESERVED18[10], MMCRUPGR, RESERVED19[9], MMCTLPIMSTR, MMCTLPITCR,$/;"	m	struct:stm32h_eth	file:
MMCTGFCR	drivers/stm32f.c	/^      RESERVED3[14], MMCTGFSCCR, MMCTGFMSCCR, RESERVED4[5], MMCTGFCR,$/;"	m	struct:stm32f_eth	file:
MMCTGFMSCCR	drivers/stm32f.c	/^      RESERVED3[14], MMCTGFSCCR, MMCTGFMSCCR, RESERVED4[5], MMCTGFCR,$/;"	m	struct:stm32f_eth	file:
MMCTGFSCCR	drivers/stm32f.c	/^      RESERVED3[14], MMCTGFSCCR, MMCTGFMSCCR, RESERVED4[5], MMCTGFCR,$/;"	m	struct:stm32f_eth	file:
MMCTIMR	drivers/stm32f.c	/^      MACA3LR, RESERVED2[40], MMCCR, MMCRIR, MMCTIR, MMCRIMR, MMCTIMR,$/;"	m	struct:stm32f_eth	file:
MMCTIMR	drivers/stm32h.c	/^      MMCRIR, MMCTIR, MMCRIMR, MMCTIMR, RESERVED15[14], MMCTSCGPR, MMCTMCGPR,$/;"	m	struct:stm32h_eth	file:
MMCTIR	drivers/stm32f.c	/^      MACA3LR, RESERVED2[40], MMCCR, MMCRIR, MMCTIR, MMCRIMR, MMCTIMR,$/;"	m	struct:stm32f_eth	file:
MMCTIR	drivers/stm32h.c	/^      MMCRIR, MMCTIR, MMCRIMR, MMCTIMR, RESERVED15[14], MMCTSCGPR, MMCTMCGPR,$/;"	m	struct:stm32h_eth	file:
MMCTLPIMSTR	drivers/stm32h.c	/^      RESERVED18[10], MMCRUPGR, RESERVED19[9], MMCTLPIMSTR, MMCTLPITCR,$/;"	m	struct:stm32h_eth	file:
MMCTLPITCR	drivers/stm32h.c	/^      RESERVED18[10], MMCRUPGR, RESERVED19[9], MMCTLPIMSTR, MMCTLPITCR,$/;"	m	struct:stm32h_eth	file:
MMCTMCGPR	drivers/stm32h.c	/^      MMCRIR, MMCTIR, MMCRIMR, MMCTIMR, RESERVED15[14], MMCTSCGPR, MMCTMCGPR,$/;"	m	struct:stm32h_eth	file:
MMCTPCGR	drivers/stm32h.c	/^      RESERVED16[5], MMCTPCGR, RESERVED17[10], MMCRCRCEPR, MMCRAEPR,$/;"	m	struct:stm32h_eth	file:
MMCTSCGPR	drivers/stm32h.c	/^      MMCRIR, MMCTIR, MMCRIMR, MMCTIMR, RESERVED15[14], MMCTSCGPR, MMCTMCGPR,$/;"	m	struct:stm32h_eth	file:
MMFR	drivers/imxrt.c	/^      ECR, RESERVED3[6], MMFR, MSCR, RESERVED4[7], MIBC, RESERVED5[7], RCR,$/;"	m	struct:imxrt_enet	file:
MRBR	drivers/imxrt.c	/^      RESERVED10[7], TFWR, RESERVED11[14], RDSR, TDSR, MRBR[2], RSFL, RSEM,$/;"	m	struct:imxrt_enet	file:
MSCR	drivers/imxrt.c	/^      ECR, RESERVED3[6], MMFR, MSCR, RESERVED4[7], MIBC, RESERVED5[7], RCR,$/;"	m	struct:imxrt_enet	file:
MSG_NONBLOCKING	sock.c	22;"	d	file:
MTLISR	drivers/stm32h.c	/^      RESERVED32[11], MTLOMR, RESERVED33[7], MTLISR, RESERVED34[55], MTLTQOMR,$/;"	m	struct:stm32h_eth	file:
MTLOMR	drivers/stm32h.c	/^      RESERVED32[11], MTLOMR, RESERVED33[7], MTLISR, RESERVED34[55], MTLTQOMR,$/;"	m	struct:stm32h_eth	file:
MTLQICSR	drivers/stm32h.c	/^      MTLTQUR, MTLTQDR, RESERVED35[8], MTLQICSR, MTLRQOMR, MTLRQMPOCR, MTLRQDR,$/;"	m	struct:stm32h_eth	file:
MTLRQDR	drivers/stm32h.c	/^      MTLTQUR, MTLTQDR, RESERVED35[8], MTLQICSR, MTLRQOMR, MTLRQMPOCR, MTLRQDR,$/;"	m	struct:stm32h_eth	file:
MTLRQMPOCR	drivers/stm32h.c	/^      MTLTQUR, MTLTQDR, RESERVED35[8], MTLQICSR, MTLRQOMR, MTLRQMPOCR, MTLRQDR,$/;"	m	struct:stm32h_eth	file:
MTLRQOMR	drivers/stm32h.c	/^      MTLTQUR, MTLTQDR, RESERVED35[8], MTLQICSR, MTLRQOMR, MTLRQMPOCR, MTLRQDR,$/;"	m	struct:stm32h_eth	file:
MTLTQDR	drivers/stm32h.c	/^      MTLTQUR, MTLTQDR, RESERVED35[8], MTLQICSR, MTLRQOMR, MTLRQMPOCR, MTLRQDR,$/;"	m	struct:stm32h_eth	file:
MTLTQOMR	drivers/stm32h.c	/^      RESERVED32[11], MTLOMR, RESERVED33[7], MTLISR, RESERVED34[55], MTLTQOMR,$/;"	m	struct:stm32h_eth	file:
MTLTQUR	drivers/stm32h.c	/^      MTLTQUR, MTLTQDR, RESERVED35[8], MTLQICSR, MTLRQOMR, MTLRQMPOCR, MTLRQDR,$/;"	m	struct:stm32h_eth	file:
MUL	tls_aes128.c	117;"	d	file:
NLIMBS	tls_builtin.c	61;"	d	file:
OPD	drivers/imxrt.c	/^      RESERVED6[15], TCR, RESERVED7[7], PALR, PAUR, OPD, TXIC0, TXIC1, TXIC2,$/;"	m	struct:imxrt_enet	file:
PALR	drivers/imxrt.c	/^      RESERVED6[15], TCR, RESERVED7[7], PALR, PAUR, OPD, TXIC0, TXIC1, TXIC2,$/;"	m	struct:imxrt_enet	file:
PATH_MAX	arch_azurertos.h	19;"	d
PAUR	drivers/imxrt.c	/^      RESERVED6[15], TCR, RESERVED7[7], PALR, PAUR, OPD, TXIC0, TXIC1, TXIC2,$/;"	m	struct:imxrt_enet	file:
PDIFF	net_builtin.c	5;"	d	file:
PHY_ADDR	drivers/same54.c	/^enum { PHY_ADDR = 0, PHY_BCR = 0, PHY_BSR = 1 };$/;"	e	enum:__anon16	file:
PHY_ADDR	drivers/stm32h.c	/^  PHY_ADDR = 0,$/;"	e	enum:__anon18	file:
PHY_BCR	drivers/imxrt.c	/^enum { PHY_BCR = 0, PHY_BSR = 1, PHY_ID1 = 2, PHY_ID2 = 3 };$/;"	e	enum:__anon15	file:
PHY_BCR	drivers/same54.c	/^enum { PHY_ADDR = 0, PHY_BCR = 0, PHY_BSR = 1 };$/;"	e	enum:__anon16	file:
PHY_BCR	drivers/stm32f.c	/^enum { PHY_BCR = 0, PHY_BSR = 1, PHY_ID1 = 2, PHY_ID2 = 3, PHY_CSCR = 31 };$/;"	e	enum:__anon17	file:
PHY_BCR	drivers/stm32h.c	/^  PHY_BCR = 0,$/;"	e	enum:__anon18	file:
PHY_BCR_DUPLEX_MODE_Msk	drivers/same54.c	20;"	d	file:
PHY_BCR_SPEED_Msk	drivers/same54.c	21;"	d	file:
PHY_BSR	drivers/imxrt.c	/^enum { PHY_BCR = 0, PHY_BSR = 1, PHY_ID1 = 2, PHY_ID2 = 3 };$/;"	e	enum:__anon15	file:
PHY_BSR	drivers/same54.c	/^enum { PHY_ADDR = 0, PHY_BCR = 0, PHY_BSR = 1 };$/;"	e	enum:__anon16	file:
PHY_BSR	drivers/stm32f.c	/^enum { PHY_BCR = 0, PHY_BSR = 1, PHY_ID1 = 2, PHY_ID2 = 3, PHY_CSCR = 31 };$/;"	e	enum:__anon17	file:
PHY_BSR	drivers/stm32h.c	/^  PHY_BSR = 1,$/;"	e	enum:__anon18	file:
PHY_BSR_LINK_STATUS_Msk	drivers/same54.c	22;"	d	file:
PHY_CSCR	drivers/stm32f.c	/^enum { PHY_BCR = 0, PHY_BSR = 1, PHY_ID1 = 2, PHY_ID2 = 3, PHY_CSCR = 31 };$/;"	e	enum:__anon17	file:
PHY_CSCR	drivers/stm32h.c	/^  PHY_CSCR = 31$/;"	e	enum:__anon18	file:
PHY_ID1	drivers/imxrt.c	/^enum { PHY_BCR = 0, PHY_BSR = 1, PHY_ID1 = 2, PHY_ID2 = 3 };$/;"	e	enum:__anon15	file:
PHY_ID1	drivers/stm32f.c	/^enum { PHY_BCR = 0, PHY_BSR = 1, PHY_ID1 = 2, PHY_ID2 = 3, PHY_CSCR = 31 };$/;"	e	enum:__anon17	file:
PHY_ID2	drivers/imxrt.c	/^enum { PHY_BCR = 0, PHY_BSR = 1, PHY_ID1 = 2, PHY_ID2 = 3 };$/;"	e	enum:__anon15	file:
PHY_ID2	drivers/stm32f.c	/^enum { PHY_BCR = 0, PHY_BSR = 1, PHY_ID1 = 2, PHY_ID2 = 3, PHY_CSCR = 31 };$/;"	e	enum:__anon17	file:
PTPPPSCR	drivers/stm32f.c	/^      PTPTSAR, PTPTTHR, PTPTTLR, RESERVED8, PTPTSSR, PTPPPSCR, RESERVED9[564],$/;"	m	struct:stm32f_eth	file:
PTPSSIR	drivers/stm32f.c	/^      RESERVED7[334], PTPTSCR, PTPSSIR, PTPTSHR, PTPTSLR, PTPTSHUR, PTPTSLUR,$/;"	m	struct:stm32f_eth	file:
PTPTSAR	drivers/stm32f.c	/^      PTPTSAR, PTPTTHR, PTPTTLR, RESERVED8, PTPTSSR, PTPPPSCR, RESERVED9[564],$/;"	m	struct:stm32f_eth	file:
PTPTSCR	drivers/stm32f.c	/^      RESERVED7[334], PTPTSCR, PTPSSIR, PTPTSHR, PTPTSLR, PTPTSHUR, PTPTSLUR,$/;"	m	struct:stm32f_eth	file:
PTPTSHR	drivers/stm32f.c	/^      RESERVED7[334], PTPTSCR, PTPSSIR, PTPTSHR, PTPTSLR, PTPTSHUR, PTPTSLUR,$/;"	m	struct:stm32f_eth	file:
PTPTSHUR	drivers/stm32f.c	/^      RESERVED7[334], PTPTSCR, PTPSSIR, PTPTSHR, PTPTSLR, PTPTSHUR, PTPTSLUR,$/;"	m	struct:stm32f_eth	file:
PTPTSLR	drivers/stm32f.c	/^      RESERVED7[334], PTPTSCR, PTPSSIR, PTPTSHR, PTPTSLR, PTPTSHUR, PTPTSLUR,$/;"	m	struct:stm32f_eth	file:
PTPTSLUR	drivers/stm32f.c	/^      RESERVED7[334], PTPTSCR, PTPSSIR, PTPTSHR, PTPTSLR, PTPTSHUR, PTPTSLUR,$/;"	m	struct:stm32f_eth	file:
PTPTSSR	drivers/stm32f.c	/^      PTPTSAR, PTPTTHR, PTPTTLR, RESERVED8, PTPTSSR, PTPPPSCR, RESERVED9[564],$/;"	m	struct:stm32f_eth	file:
PTPTTHR	drivers/stm32f.c	/^      PTPTSAR, PTPTTHR, PTPTTLR, RESERVED8, PTPTSSR, PTPPPSCR, RESERVED9[564],$/;"	m	struct:stm32f_eth	file:
PTPTTLR	drivers/stm32f.c	/^      PTPTSAR, PTPTTHR, PTPTTLR, RESERVED8, PTPTSSR, PTPPPSCR, RESERVED9[564],$/;"	m	struct:stm32f_eth	file:
PUT_UINT32_BE	tls_aes128.c	548;"	d	file:
PUT_UINT32_LE	tls_aes128.c	69;"	d	file:
R0	sha1.c	24;"	d	file:
R0	sha1.c	34;"	d	file:
R1	sha1.c	25;"	d	file:
R1	sha1.c	37;"	d	file:
R2	sha1.c	26;"	d	file:
R2	sha1.c	40;"	d	file:
R3	sha1.c	27;"	d	file:
R3	sha1.c	43;"	d	file:
R4	sha1.c	28;"	d	file:
R4	sha1.c	46;"	d	file:
RACC	drivers/imxrt.c	/^      RAEM, RAFL, TSEM, TAEM, TAFL, TIPG, FTRL, RESERVED12[3], TACC, RACC,$/;"	m	struct:imxrt_enet	file:
RAEM	drivers/imxrt.c	/^      RAEM, RAFL, TSEM, TAEM, TAFL, TIPG, FTRL, RESERVED12[3], TACC, RACC,$/;"	m	struct:imxrt_enet	file:
RAFL	drivers/imxrt.c	/^      RAEM, RAFL, TSEM, TAEM, TAFL, TIPG, FTRL, RESERVED12[3], TACC, RACC,$/;"	m	struct:imxrt_enet	file:
RCON	tls_aes128.c	/^static uint32_t RCON[10];  \/\/ AES round constants$/;"	v	file:
RCR	drivers/imxrt.c	/^      ECR, RESERVED3[6], MMFR, MSCR, RESERVED4[7], MIBC, RESERVED5[7], RCR,$/;"	m	struct:imxrt_enet	file:
RDAR	drivers/imxrt.c	/^  volatile uint32_t RESERVED0, EIR, EIMR, RESERVED1, RDAR, TDAR, RESERVED2[3],$/;"	m	struct:imxrt_enet	file:
RDSR	drivers/imxrt.c	/^      RESERVED10[7], TFWR, RESERVED11[14], RDSR, TDSR, MRBR[2], RSFL, RSEM,$/;"	m	struct:imxrt_enet	file:
REPEAT	tls_uecc.c	80;"	d	file:
REPEATM	tls_uecc.c	87;"	d	file:
REPEATM_0	tls_uecc.c	84;"	d	file:
REPEATM_NAME_0	tls_uecc.c	82;"	d	file:
REPEATM_NAME_SOME	tls_uecc.c	83;"	d	file:
REPEATM_SOME	tls_uecc.c	85;"	d	file:
REPEAT_0	tls_uecc.c	77;"	d	file:
REPEAT_NAME_0	tls_uecc.c	75;"	d	file:
REPEAT_NAME_SOME	tls_uecc.c	76;"	d	file:
REPEAT_SOME	tls_uecc.c	78;"	d	file:
RESERVED0	drivers/imxrt.c	/^  volatile uint32_t RESERVED0, EIR, EIMR, RESERVED1, RDAR, TDAR, RESERVED2[3],$/;"	m	struct:imxrt_enet	file:
RESERVED0	drivers/stm32f.c	/^      MACVLANTR, RESERVED0[2], MACRWUFFR, MACPMTCSR, RESERVED1, MACDBGR, MACSR,$/;"	m	struct:stm32f_eth	file:
RESERVED0	drivers/tm4c.c	/^      EMACMIIADDR, EMACMIIDATA, EMACFLOWCTL, EMACVLANTG, RESERVED0, EMACSTATUS,$/;"	m	struct:tm4c_emac	file:
RESERVED1	drivers/imxrt.c	/^  volatile uint32_t RESERVED0, EIR, EIMR, RESERVED1, RDAR, TDAR, RESERVED2[3],$/;"	m	struct:imxrt_enet	file:
RESERVED1	drivers/stm32f.c	/^      MACVLANTR, RESERVED0[2], MACRWUFFR, MACPMTCSR, RESERVED1, MACDBGR, MACSR,$/;"	m	struct:stm32f_eth	file:
RESERVED1	drivers/stm32h.c	/^      RESERVED1[14], MACVTR, RESERVED2, MACVHTR, RESERVED3, MACVIR, MACIVIR,$/;"	m	struct:stm32h_eth	file:
RESERVED1	drivers/tm4c.c	/^      EMACRWUFF, EMACPMTCTLSTAT, RESERVED1[2], EMACRIS, EMACIM, EMACADDR0H,$/;"	m	struct:tm4c_emac	file:
RESERVED10	drivers/imxrt.c	/^      RESERVED10[7], TFWR, RESERVED11[14], RDSR, TDSR, MRBR[2], RSFL, RSEM,$/;"	m	struct:imxrt_enet	file:
RESERVED10	drivers/stm32f.c	/^      DMAMFBOCR, DMARSWTR, RESERVED10[8], DMACHTDR, DMACHRDR, DMACHTBAR,$/;"	m	struct:stm32f_eth	file:
RESERVED10	drivers/stm32h.c	/^      MACLTCR, MACLETR, MAC1USTCR, RESERVED9[12], MACVR, MACDR, RESERVED10,$/;"	m	struct:stm32h_eth	file:
RESERVED10	drivers/tm4c.c	/^      EMACRXCNTALGNERR, RESERVED9[10], EMACRXCNTGUNI, RESERVED10[239],$/;"	m	struct:tm4c_emac	file:
RESERVED11	drivers/imxrt.c	/^      RESERVED10[7], TFWR, RESERVED11[14], RDSR, TDSR, MRBR[2], RSFL, RSEM,$/;"	m	struct:imxrt_enet	file:
RESERVED11	drivers/stm32h.c	/^      MACHWF0R, MACHWF1R, MACHWF2R, RESERVED11[54], MACMDIOAR, MACMDIODR,$/;"	m	struct:stm32h_eth	file:
RESERVED11	drivers/tm4c.c	/^      EMACVLNINCREP, EMACVLANHASH, RESERVED11[93], EMACTIMSTCTRL, EMACSUBSECINC,$/;"	m	struct:tm4c_emac	file:
RESERVED12	drivers/imxrt.c	/^      RAEM, RAFL, TSEM, TAEM, TAFL, TIPG, FTRL, RESERVED12[3], TACC, RACC,$/;"	m	struct:imxrt_enet	file:
RESERVED12	drivers/stm32h.c	/^      RESERVED12[2], MACARPAR, RESERVED13[59], MACA0HR, MACA0LR, MACA1HR,$/;"	m	struct:stm32h_eth	file:
RESERVED12	drivers/tm4c.c	/^      RESERVED12[12], EMACPPS0INTVL, EMACPPS0WIDTH, RESERVED13[294],$/;"	m	struct:tm4c_emac	file:
RESERVED13	drivers/imxrt.c	/^      RESERVED13[15], RMON_T_PACKETS, RMON_T_BC_PKT, RMON_T_MC_PKT,$/;"	m	struct:imxrt_enet	file:
RESERVED13	drivers/stm32h.c	/^      RESERVED12[2], MACARPAR, RESERVED13[59], MACA0HR, MACA0LR, MACA1HR,$/;"	m	struct:stm32h_eth	file:
RESERVED13	drivers/tm4c.c	/^      RESERVED12[12], EMACPPS0INTVL, EMACPPS0WIDTH, RESERVED13[294],$/;"	m	struct:tm4c_emac	file:
RESERVED14	drivers/imxrt.c	/^      IEEE_T_SQE, IEEE_T_FDXFC, IEEE_T_OCTETS_OK, RESERVED14[3], RMON_R_PACKETS,$/;"	m	struct:imxrt_enet	file:
RESERVED14	drivers/stm32h.c	/^      MACA1LR, MACA2HR, MACA2LR, MACA3HR, MACA3LR, RESERVED14[248], MMCCR,$/;"	m	struct:stm32h_eth	file:
RESERVED14	drivers/tm4c.c	/^      RESERVED14[8], EMACHOSTXDESC, EMACHOSRXDESC, EMACHOSTXBA, EMACHOSRXBA,$/;"	m	struct:tm4c_emac	file:
RESERVED15	drivers/imxrt.c	/^      RMON_R_OVERSIZE, RMON_R_FRAG, RMON_R_JAB, RESERVED15, RMON_R_P64,$/;"	m	struct:imxrt_enet	file:
RESERVED15	drivers/stm32h.c	/^      MMCRIR, MMCTIR, MMCRIMR, MMCTIMR, RESERVED15[14], MMCTSCGPR, MMCTMCGPR,$/;"	m	struct:stm32h_eth	file:
RESERVED15	drivers/tm4c.c	/^      RESERVED15[218], EMACPP, EMACPC, EMACCC, RESERVED16, EMACEPHYRIS,$/;"	m	struct:tm4c_emac	file:
RESERVED16	drivers/imxrt.c	/^      IEEE_R_OCTETS_OK, RESERVED16[71], ATCR, ATVR, ATOFF, ATPER, ATCOR, ATINC,$/;"	m	struct:imxrt_enet	file:
RESERVED16	drivers/stm32h.c	/^      RESERVED16[5], MMCTPCGR, RESERVED17[10], MMCRCRCEPR, MMCRAEPR,$/;"	m	struct:stm32h_eth	file:
RESERVED16	drivers/tm4c.c	/^      RESERVED15[218], EMACPP, EMACPC, EMACCC, RESERVED16, EMACEPHYRIS,$/;"	m	struct:tm4c_emac	file:
RESERVED17	drivers/imxrt.c	/^      ATSTMP, RESERVED17[122], TGSR, TCSR0, TCCR0, TCSR1, TCCR1, TCSR2, TCCR2,$/;"	m	struct:imxrt_enet	file:
RESERVED17	drivers/stm32h.c	/^      RESERVED16[5], MMCTPCGR, RESERVED17[10], MMCRCRCEPR, MMCRAEPR,$/;"	m	struct:stm32h_eth	file:
RESERVED18	drivers/stm32h.c	/^      RESERVED18[10], MMCRUPGR, RESERVED19[9], MMCTLPIMSTR, MMCTLPITCR,$/;"	m	struct:stm32h_eth	file:
RESERVED19	drivers/stm32h.c	/^      RESERVED18[10], MMCRUPGR, RESERVED19[9], MMCTLPIMSTR, MMCTLPITCR,$/;"	m	struct:stm32h_eth	file:
RESERVED2	drivers/imxrt.c	/^  volatile uint32_t RESERVED0, EIR, EIMR, RESERVED1, RDAR, TDAR, RESERVED2[3],$/;"	m	struct:imxrt_enet	file:
RESERVED2	drivers/stm32f.c	/^      MACA3LR, RESERVED2[40], MMCCR, MMCRIR, MMCTIR, MMCRIMR, MMCTIMR,$/;"	m	struct:stm32f_eth	file:
RESERVED2	drivers/stm32h.c	/^      RESERVED1[14], MACVTR, RESERVED2, MACVHTR, RESERVED3, MACVIR, MACIVIR,$/;"	m	struct:stm32h_eth	file:
RESERVED2	drivers/tm4c.c	/^      EMACADDR3L, RESERVED2[31], EMACWDOGTO, RESERVED3[8], EMACMMCCTRL,$/;"	m	struct:tm4c_emac	file:
RESERVED20	drivers/stm32h.c	/^      MMCRLPIMSTR, MMCRLPITCR, RESERVED20[65], MACL3L4C0R, MACL4A0R,$/;"	m	struct:stm32h_eth	file:
RESERVED21	drivers/stm32h.c	/^      RESERVED21[2], MACL3A0R0R, MACL3A1R0R, MACL3A2R0R, MACL3A3R0R,$/;"	m	struct:stm32h_eth	file:
RESERVED22	drivers/stm32h.c	/^      RESERVED22[4], MACL3L4C1R, MACL4A1R, RESERVED23[2], MACL3A0R1R,$/;"	m	struct:stm32h_eth	file:
RESERVED23	drivers/stm32h.c	/^      RESERVED22[4], MACL3L4C1R, MACL4A1R, RESERVED23[2], MACL3A0R1R,$/;"	m	struct:stm32h_eth	file:
RESERVED24	drivers/stm32h.c	/^      MACL3A1R1R, MACL3A2R1R, MACL3A3R1R, RESERVED24[108], MACTSCR, MACSSIR,$/;"	m	struct:stm32h_eth	file:
RESERVED25	drivers/stm32h.c	/^      MACSTSR, MACSTNR, MACSTSUR, MACSTNUR, MACTSAR, RESERVED25, MACTSSR,$/;"	m	struct:stm32h_eth	file:
RESERVED26	drivers/stm32h.c	/^      RESERVED26[3], MACTTSSNR, MACTTSSSR, RESERVED27[2], MACACR, RESERVED28,$/;"	m	struct:stm32h_eth	file:
RESERVED27	drivers/stm32h.c	/^      RESERVED26[3], MACTTSSNR, MACTTSSSR, RESERVED27[2], MACACR, RESERVED28,$/;"	m	struct:stm32h_eth	file:
RESERVED28	drivers/stm32h.c	/^      RESERVED26[3], MACTTSSNR, MACTTSSSR, RESERVED27[2], MACACR, RESERVED28,$/;"	m	struct:stm32h_eth	file:
RESERVED29	drivers/stm32h.c	/^      RESERVED29[4], MACPPSCR, RESERVED30[3], MACPPSTTSR, MACPPSTTNR, MACPPSIR,$/;"	m	struct:stm32h_eth	file:
RESERVED3	drivers/imxrt.c	/^      ECR, RESERVED3[6], MMFR, MSCR, RESERVED4[7], MIBC, RESERVED5[7], RCR,$/;"	m	struct:imxrt_enet	file:
RESERVED3	drivers/stm32f.c	/^      RESERVED3[14], MMCTGFSCCR, MMCTGFMSCCR, RESERVED4[5], MMCTGFCR,$/;"	m	struct:stm32f_eth	file:
RESERVED3	drivers/stm32h.c	/^      RESERVED1[14], MACVTR, RESERVED2, MACVHTR, RESERVED3, MACVIR, MACIVIR,$/;"	m	struct:stm32h_eth	file:
RESERVED3	drivers/tm4c.c	/^      EMACADDR3L, RESERVED2[31], EMACWDOGTO, RESERVED3[8], EMACMMCCTRL,$/;"	m	struct:tm4c_emac	file:
RESERVED30	drivers/stm32h.c	/^      RESERVED29[4], MACPPSCR, RESERVED30[3], MACPPSTTSR, MACPPSTTNR, MACPPSIR,$/;"	m	struct:stm32h_eth	file:
RESERVED31	drivers/stm32h.c	/^      MACPPSWR, RESERVED31[12], MACPOCR, MACSPI0R, MACSPI1R, MACSPI2R, MACLMIR,$/;"	m	struct:stm32h_eth	file:
RESERVED32	drivers/stm32h.c	/^      RESERVED32[11], MTLOMR, RESERVED33[7], MTLISR, RESERVED34[55], MTLTQOMR,$/;"	m	struct:stm32h_eth	file:
RESERVED33	drivers/stm32h.c	/^      RESERVED32[11], MTLOMR, RESERVED33[7], MTLISR, RESERVED34[55], MTLTQOMR,$/;"	m	struct:stm32h_eth	file:
RESERVED34	drivers/stm32h.c	/^      RESERVED32[11], MTLOMR, RESERVED33[7], MTLISR, RESERVED34[55], MTLTQOMR,$/;"	m	struct:stm32h_eth	file:
RESERVED35	drivers/stm32h.c	/^      MTLTQUR, MTLTQDR, RESERVED35[8], MTLQICSR, MTLRQOMR, MTLRQMPOCR, MTLRQDR,$/;"	m	struct:stm32h_eth	file:
RESERVED36	drivers/stm32h.c	/^      RESERVED36[177], DMAMR, DMASBMR, DMAISR, DMADSR, RESERVED37[60], DMACCR,$/;"	m	struct:stm32h_eth	file:
RESERVED37	drivers/stm32h.c	/^      RESERVED36[177], DMAMR, DMASBMR, DMAISR, DMADSR, RESERVED37[60], DMACCR,$/;"	m	struct:stm32h_eth	file:
RESERVED38	drivers/stm32h.c	/^      DMACTCR, DMACRCR, RESERVED38[2], DMACTDLAR, RESERVED39, DMACRDLAR,$/;"	m	struct:stm32h_eth	file:
RESERVED39	drivers/stm32h.c	/^      DMACTCR, DMACRCR, RESERVED38[2], DMACTDLAR, RESERVED39, DMACRDLAR,$/;"	m	struct:stm32h_eth	file:
RESERVED4	drivers/imxrt.c	/^      ECR, RESERVED3[6], MMFR, MSCR, RESERVED4[7], MIBC, RESERVED5[7], RCR,$/;"	m	struct:imxrt_enet	file:
RESERVED4	drivers/stm32f.c	/^      RESERVED3[14], MMCTGFSCCR, MMCTGFMSCCR, RESERVED4[5], MMCTGFCR,$/;"	m	struct:stm32f_eth	file:
RESERVED4	drivers/stm32h.c	/^      RESERVED4[2], MACTFCR, RESERVED5[7], MACRFCR, RESERVED6[7], MACISR,$/;"	m	struct:stm32h_eth	file:
RESERVED4	drivers/tm4c.c	/^      EMACMMCRXRIS, EMACMMCTXRIS, EMACMMCRXIM, EMACMMCTXIM, RESERVED4,$/;"	m	struct:tm4c_emac	file:
RESERVED40	drivers/stm32h.c	/^      DMACTDTPR, RESERVED40, DMACRDTPR, DMACTDRLR, DMACRDRLR, DMACIER,$/;"	m	struct:stm32h_eth	file:
RESERVED41	drivers/stm32h.c	/^      DMACRIWTR, DMACSFCSR, RESERVED41, DMACCATDR, RESERVED42, DMACCARDR,$/;"	m	struct:stm32h_eth	file:
RESERVED42	drivers/stm32h.c	/^      DMACRIWTR, DMACSFCSR, RESERVED41, DMACCATDR, RESERVED42, DMACCARDR,$/;"	m	struct:stm32h_eth	file:
RESERVED43	drivers/stm32h.c	/^      RESERVED43, DMACCATBR, RESERVED44, DMACCARBR, DMACSR, RESERVED45[2],$/;"	m	struct:stm32h_eth	file:
RESERVED44	drivers/stm32h.c	/^      RESERVED43, DMACCATBR, RESERVED44, DMACCARBR, DMACSR, RESERVED45[2],$/;"	m	struct:stm32h_eth	file:
RESERVED45	drivers/stm32h.c	/^      RESERVED43, DMACCATBR, RESERVED44, DMACCARBR, DMACSR, RESERVED45[2],$/;"	m	struct:stm32h_eth	file:
RESERVED5	drivers/imxrt.c	/^      ECR, RESERVED3[6], MMFR, MSCR, RESERVED4[7], MIBC, RESERVED5[7], RCR,$/;"	m	struct:imxrt_enet	file:
RESERVED5	drivers/stm32f.c	/^      RESERVED5[10], MMCRFCECR, MMCRFAECR, RESERVED6[10], MMCRGUFCR,$/;"	m	struct:stm32f_eth	file:
RESERVED5	drivers/stm32h.c	/^      RESERVED4[2], MACTFCR, RESERVED5[7], MACRFCR, RESERVED6[7], MACISR,$/;"	m	struct:stm32h_eth	file:
RESERVED5	drivers/tm4c.c	/^      EMACTXCNTGB, RESERVED5[12], EMACTXCNTSCOL, EMACTXCNTMCOL, RESERVED6[4],$/;"	m	struct:tm4c_emac	file:
RESERVED6	drivers/imxrt.c	/^      RESERVED6[15], TCR, RESERVED7[7], PALR, PAUR, OPD, TXIC0, TXIC1, TXIC2,$/;"	m	struct:imxrt_enet	file:
RESERVED6	drivers/stm32f.c	/^      RESERVED5[10], MMCRFCECR, MMCRFAECR, RESERVED6[10], MMCRGUFCR,$/;"	m	struct:stm32f_eth	file:
RESERVED6	drivers/stm32h.c	/^      RESERVED4[2], MACTFCR, RESERVED5[7], MACRFCR, RESERVED6[7], MACISR,$/;"	m	struct:stm32h_eth	file:
RESERVED6	drivers/tm4c.c	/^      EMACTXCNTGB, RESERVED5[12], EMACTXCNTSCOL, EMACTXCNTMCOL, RESERVED6[4],$/;"	m	struct:tm4c_emac	file:
RESERVED7	drivers/imxrt.c	/^      RESERVED6[15], TCR, RESERVED7[7], PALR, PAUR, OPD, TXIC0, TXIC1, TXIC2,$/;"	m	struct:imxrt_enet	file:
RESERVED7	drivers/stm32f.c	/^      RESERVED7[334], PTPTSCR, PTPSSIR, PTPTSHR, PTPTSLR, PTPTSHUR, PTPTSLUR,$/;"	m	struct:stm32f_eth	file:
RESERVED7	drivers/stm32h.c	/^      MACIER, MACRXTXSR, RESERVED7, MACPCSR, MACRWKPFR, RESERVED8[2], MACLCSR,$/;"	m	struct:stm32h_eth	file:
RESERVED7	drivers/tm4c.c	/^      EMACTXOCTCNTG, RESERVED7[6], EMACRXCNTGB, RESERVED8[4], EMACRXCNTCRCERR,$/;"	m	struct:tm4c_emac	file:
RESERVED8	drivers/imxrt.c	/^      RESERVED8, RXIC0, RXIC1, RXIC2, RESERVED9[3], IAUR, IALR, GAUR, GALR,$/;"	m	struct:imxrt_enet	file:
RESERVED8	drivers/stm32f.c	/^      PTPTSAR, PTPTTHR, PTPTTLR, RESERVED8, PTPTSSR, PTPPPSCR, RESERVED9[564],$/;"	m	struct:stm32f_eth	file:
RESERVED8	drivers/stm32h.c	/^      MACIER, MACRXTXSR, RESERVED7, MACPCSR, MACRWKPFR, RESERVED8[2], MACLCSR,$/;"	m	struct:stm32h_eth	file:
RESERVED8	drivers/tm4c.c	/^      EMACTXOCTCNTG, RESERVED7[6], EMACRXCNTGB, RESERVED8[4], EMACRXCNTCRCERR,$/;"	m	struct:tm4c_emac	file:
RESERVED9	drivers/imxrt.c	/^      RESERVED8, RXIC0, RXIC1, RXIC2, RESERVED9[3], IAUR, IALR, GAUR, GALR,$/;"	m	struct:imxrt_enet	file:
RESERVED9	drivers/stm32f.c	/^      PTPTSAR, PTPTTHR, PTPTTLR, RESERVED8, PTPTSSR, PTPPPSCR, RESERVED9[564],$/;"	m	struct:stm32f_eth	file:
RESERVED9	drivers/stm32h.c	/^      MACLTCR, MACLETR, MAC1USTCR, RESERVED9[12], MACVR, MACDR, RESERVED10,$/;"	m	struct:stm32h_eth	file:
RESERVED9	drivers/tm4c.c	/^      EMACRXCNTALGNERR, RESERVED9[10], EMACRXCNTGUNI, RESERVED10[239],$/;"	m	struct:tm4c_emac	file:
RMON_R_BC_PKT	drivers/imxrt.c	/^      RMON_R_BC_PKT, RMON_R_MC_PKT, RMON_R_CRC_ALIGN, RMON_R_UNDERSIZE,$/;"	m	struct:imxrt_enet	file:
RMON_R_CRC_ALIGN	drivers/imxrt.c	/^      RMON_R_BC_PKT, RMON_R_MC_PKT, RMON_R_CRC_ALIGN, RMON_R_UNDERSIZE,$/;"	m	struct:imxrt_enet	file:
RMON_R_FRAG	drivers/imxrt.c	/^      RMON_R_OVERSIZE, RMON_R_FRAG, RMON_R_JAB, RESERVED15, RMON_R_P64,$/;"	m	struct:imxrt_enet	file:
RMON_R_GTE2048	drivers/imxrt.c	/^      RMON_R_P1024TO2047, RMON_R_GTE2048, RMON_R_OCTETS, IEEE_R_DROP,$/;"	m	struct:imxrt_enet	file:
RMON_R_JAB	drivers/imxrt.c	/^      RMON_R_OVERSIZE, RMON_R_FRAG, RMON_R_JAB, RESERVED15, RMON_R_P64,$/;"	m	struct:imxrt_enet	file:
RMON_R_MC_PKT	drivers/imxrt.c	/^      RMON_R_BC_PKT, RMON_R_MC_PKT, RMON_R_CRC_ALIGN, RMON_R_UNDERSIZE,$/;"	m	struct:imxrt_enet	file:
RMON_R_OCTETS	drivers/imxrt.c	/^      RMON_R_P1024TO2047, RMON_R_GTE2048, RMON_R_OCTETS, IEEE_R_DROP,$/;"	m	struct:imxrt_enet	file:
RMON_R_OVERSIZE	drivers/imxrt.c	/^      RMON_R_OVERSIZE, RMON_R_FRAG, RMON_R_JAB, RESERVED15, RMON_R_P64,$/;"	m	struct:imxrt_enet	file:
RMON_R_P1024TO2047	drivers/imxrt.c	/^      RMON_R_P1024TO2047, RMON_R_GTE2048, RMON_R_OCTETS, IEEE_R_DROP,$/;"	m	struct:imxrt_enet	file:
RMON_R_P128TO255	drivers/imxrt.c	/^      RMON_R_P65TO127, RMON_R_P128TO255, RMON_R_P256TO511, RMON_R_P512TO1023,$/;"	m	struct:imxrt_enet	file:
RMON_R_P256TO511	drivers/imxrt.c	/^      RMON_R_P65TO127, RMON_R_P128TO255, RMON_R_P256TO511, RMON_R_P512TO1023,$/;"	m	struct:imxrt_enet	file:
RMON_R_P512TO1023	drivers/imxrt.c	/^      RMON_R_P65TO127, RMON_R_P128TO255, RMON_R_P256TO511, RMON_R_P512TO1023,$/;"	m	struct:imxrt_enet	file:
RMON_R_P64	drivers/imxrt.c	/^      RMON_R_OVERSIZE, RMON_R_FRAG, RMON_R_JAB, RESERVED15, RMON_R_P64,$/;"	m	struct:imxrt_enet	file:
RMON_R_P65TO127	drivers/imxrt.c	/^      RMON_R_P65TO127, RMON_R_P128TO255, RMON_R_P256TO511, RMON_R_P512TO1023,$/;"	m	struct:imxrt_enet	file:
RMON_R_PACKETS	drivers/imxrt.c	/^      IEEE_T_SQE, IEEE_T_FDXFC, IEEE_T_OCTETS_OK, RESERVED14[3], RMON_R_PACKETS,$/;"	m	struct:imxrt_enet	file:
RMON_R_UNDERSIZE	drivers/imxrt.c	/^      RMON_R_BC_PKT, RMON_R_MC_PKT, RMON_R_CRC_ALIGN, RMON_R_UNDERSIZE,$/;"	m	struct:imxrt_enet	file:
RMON_T_BC_PKT	drivers/imxrt.c	/^      RESERVED13[15], RMON_T_PACKETS, RMON_T_BC_PKT, RMON_T_MC_PKT,$/;"	m	struct:imxrt_enet	file:
RMON_T_COL	drivers/imxrt.c	/^      RMON_T_JAB, RMON_T_COL, RMON_T_P64, RMON_T_P65TO127, RMON_T_P128TO255,$/;"	m	struct:imxrt_enet	file:
RMON_T_CRC_ALIGN	drivers/imxrt.c	/^      RMON_T_CRC_ALIGN, RMON_T_UNDERSIZE, RMON_T_OVERSIZE, RMON_T_FRAG,$/;"	m	struct:imxrt_enet	file:
RMON_T_FRAG	drivers/imxrt.c	/^      RMON_T_CRC_ALIGN, RMON_T_UNDERSIZE, RMON_T_OVERSIZE, RMON_T_FRAG,$/;"	m	struct:imxrt_enet	file:
RMON_T_GTE2048	drivers/imxrt.c	/^      RMON_T_P256TO511, RMON_T_P512TO1023, RMON_T_P1024TO2048, RMON_T_GTE2048,$/;"	m	struct:imxrt_enet	file:
RMON_T_JAB	drivers/imxrt.c	/^      RMON_T_JAB, RMON_T_COL, RMON_T_P64, RMON_T_P65TO127, RMON_T_P128TO255,$/;"	m	struct:imxrt_enet	file:
RMON_T_MC_PKT	drivers/imxrt.c	/^      RESERVED13[15], RMON_T_PACKETS, RMON_T_BC_PKT, RMON_T_MC_PKT,$/;"	m	struct:imxrt_enet	file:
RMON_T_OCTETS	drivers/imxrt.c	/^      RMON_T_OCTETS, IEEE_T_DROP, IEEE_T_FRAME_OK, IEEE_T_1COL, IEEE_T_MCOL,$/;"	m	struct:imxrt_enet	file:
RMON_T_OVERSIZE	drivers/imxrt.c	/^      RMON_T_CRC_ALIGN, RMON_T_UNDERSIZE, RMON_T_OVERSIZE, RMON_T_FRAG,$/;"	m	struct:imxrt_enet	file:
RMON_T_P1024TO2048	drivers/imxrt.c	/^      RMON_T_P256TO511, RMON_T_P512TO1023, RMON_T_P1024TO2048, RMON_T_GTE2048,$/;"	m	struct:imxrt_enet	file:
RMON_T_P128TO255	drivers/imxrt.c	/^      RMON_T_JAB, RMON_T_COL, RMON_T_P64, RMON_T_P65TO127, RMON_T_P128TO255,$/;"	m	struct:imxrt_enet	file:
RMON_T_P256TO511	drivers/imxrt.c	/^      RMON_T_P256TO511, RMON_T_P512TO1023, RMON_T_P1024TO2048, RMON_T_GTE2048,$/;"	m	struct:imxrt_enet	file:
RMON_T_P512TO1023	drivers/imxrt.c	/^      RMON_T_P256TO511, RMON_T_P512TO1023, RMON_T_P1024TO2048, RMON_T_GTE2048,$/;"	m	struct:imxrt_enet	file:
RMON_T_P64	drivers/imxrt.c	/^      RMON_T_JAB, RMON_T_COL, RMON_T_P64, RMON_T_P65TO127, RMON_T_P128TO255,$/;"	m	struct:imxrt_enet	file:
RMON_T_P65TO127	drivers/imxrt.c	/^      RMON_T_JAB, RMON_T_COL, RMON_T_P64, RMON_T_P65TO127, RMON_T_P128TO255,$/;"	m	struct:imxrt_enet	file:
RMON_T_PACKETS	drivers/imxrt.c	/^      RESERVED13[15], RMON_T_PACKETS, RMON_T_BC_PKT, RMON_T_MC_PKT,$/;"	m	struct:imxrt_enet	file:
RMON_T_UNDERSIZE	drivers/imxrt.c	/^      RMON_T_CRC_ALIGN, RMON_T_UNDERSIZE, RMON_T_OVERSIZE, RMON_T_FRAG,$/;"	m	struct:imxrt_enet	file:
ROTL8	tls_aes128.c	115;"	d	file:
RSEM	drivers/imxrt.c	/^      RESERVED10[7], TFWR, RESERVED11[14], RDSR, TDSR, MRBR[2], RSFL, RSEM,$/;"	m	struct:imxrt_enet	file:
RSFL	drivers/imxrt.c	/^      RESERVED10[7], TFWR, RESERVED11[14], RDSR, TDSR, MRBR[2], RSFL, RSEM,$/;"	m	struct:imxrt_enet	file:
RSb	tls_aes128.c	/^static uchar RSb[256];     \/\/ Reverse substitution box (RSb)$/;"	v	file:
RT0	tls_aes128.c	/^static uint32_t RT0[256];  \/\/ Reverse key schedule assembly tables$/;"	v	file:
RT1	tls_aes128.c	/^static uint32_t RT1[256];$/;"	v	file:
RT2	tls_aes128.c	/^static uint32_t RT2[256];$/;"	v	file:
RT3	tls_aes128.c	/^static uint32_t RT3[256];$/;"	v	file:
RXIC0	drivers/imxrt.c	/^      RESERVED8, RXIC0, RXIC1, RXIC2, RESERVED9[3], IAUR, IALR, GAUR, GALR,$/;"	m	struct:imxrt_enet	file:
RXIC1	drivers/imxrt.c	/^      RESERVED8, RXIC0, RXIC1, RXIC2, RESERVED9[3], IAUR, IALR, GAUR, GALR,$/;"	m	struct:imxrt_enet	file:
RXIC2	drivers/imxrt.c	/^      RESERVED8, RXIC0, RXIC1, RXIC2, RESERVED9[3], IAUR, IALR, GAUR, GALR,$/;"	m	struct:imxrt_enet	file:
S2PTR	sock.c	19;"	d	file:
SECOND_ARG	tls_uecc.c	67;"	d	file:
SHA256_HashContext	tls_builtin.c	/^typedef struct SHA256_HashContext {$/;"	s	file:
SHA256_HashContext	tls_builtin.c	/^} SHA256_HashContext;$/;"	t	typeref:struct:SHA256_HashContext	file:
SIGPIPE	arch_win32.h	110;"	d
SNTP_MAX_FRAC	sntp.c	8;"	d	file:
SNTP_TIME_OFFSET	sntp.c	7;"	d	file:
SOCK_DGRAM	net_ft.h	21;"	d
SOCK_STREAM	net_ft.h	20;"	d
SOL_SOCKET	net_ft.h	24;"	d
SOME_CHECK_0	tls_uecc.c	68;"	d	file:
SOME_OR_0	tls_uecc.c	70;"	d	file:
SO_BROADCAST	net_ft.h	22;"	d
SO_ERROR	net_ft.h	23;"	d
SO_EXCLUSIVEADDRUSE	arch_win32.h	83;"	d
SO_REUSEADDR	net_ft.h	25;"	d
STACK_OF	tls_openssl.c	/^static STACK_OF(X509_INFO) * load_ca_certs(struct mg_str ca) {$/;"	f	file:
STR	tls_uecc.c	24;"	d	file:
STRX	tls_uecc.c	23;"	d	file:
S_ISDIR	arch_win32.h	102;"	d
TACC	drivers/imxrt.c	/^      RAEM, RAFL, TSEM, TAEM, TAFL, TIPG, FTRL, RESERVED12[3], TACC, RACC,$/;"	m	struct:imxrt_enet	file:
TAEM	drivers/imxrt.c	/^      RAEM, RAFL, TSEM, TAEM, TAFL, TIPG, FTRL, RESERVED12[3], TACC, RACC,$/;"	m	struct:imxrt_enet	file:
TAFL	drivers/imxrt.c	/^      RAEM, RAFL, TSEM, TAEM, TAFL, TIPG, FTRL, RESERVED12[3], TACC, RACC,$/;"	m	struct:imxrt_enet	file:
TCCR0	drivers/imxrt.c	/^      ATSTMP, RESERVED17[122], TGSR, TCSR0, TCCR0, TCSR1, TCCR1, TCSR2, TCCR2,$/;"	m	struct:imxrt_enet	file:
TCCR1	drivers/imxrt.c	/^      ATSTMP, RESERVED17[122], TGSR, TCSR0, TCCR0, TCSR1, TCCR1, TCSR2, TCCR2,$/;"	m	struct:imxrt_enet	file:
TCCR2	drivers/imxrt.c	/^      ATSTMP, RESERVED17[122], TGSR, TCSR0, TCCR0, TCSR1, TCCR1, TCSR2, TCCR2,$/;"	m	struct:imxrt_enet	file:
TCP_NODELAY	net_rl.h	8;"	d
TCR	drivers/imxrt.c	/^      RESERVED6[15], TCR, RESERVED7[7], PALR, PAUR, OPD, TXIC0, TXIC1, TXIC2,$/;"	m	struct:imxrt_enet	file:
TCSR0	drivers/imxrt.c	/^      ATSTMP, RESERVED17[122], TGSR, TCSR0, TCCR0, TCSR1, TCCR1, TCSR2, TCCR2,$/;"	m	struct:imxrt_enet	file:
TCSR1	drivers/imxrt.c	/^      ATSTMP, RESERVED17[122], TGSR, TCSR0, TCCR0, TCSR1, TCCR1, TCSR2, TCCR2,$/;"	m	struct:imxrt_enet	file:
TCSR2	drivers/imxrt.c	/^      ATSTMP, RESERVED17[122], TGSR, TCSR0, TCCR0, TCSR1, TCCR1, TCSR2, TCCR2,$/;"	m	struct:imxrt_enet	file:
TCSR3	drivers/imxrt.c	/^      TCSR3;$/;"	m	struct:imxrt_enet	file:
TDAR	drivers/imxrt.c	/^  volatile uint32_t RESERVED0, EIR, EIMR, RESERVED1, RDAR, TDAR, RESERVED2[3],$/;"	m	struct:imxrt_enet	file:
TDSR	drivers/imxrt.c	/^      RESERVED10[7], TFWR, RESERVED11[14], RDSR, TDSR, MRBR[2], RSFL, RSEM,$/;"	m	struct:imxrt_enet	file:
TFWR	drivers/imxrt.c	/^      RESERVED10[7], TFWR, RESERVED11[14], RDSR, TDSR, MRBR[2], RSFL, RSEM,$/;"	m	struct:imxrt_enet	file:
TGSR	drivers/imxrt.c	/^      ATSTMP, RESERVED17[122], TGSR, TCSR0, TCCR0, TCSR1, TCCR1, TCSR2, TCCR2,$/;"	m	struct:imxrt_enet	file:
TH_ACK	net_builtin.c	96;"	d	file:
TH_CWR	net_builtin.c	99;"	d	file:
TH_ECE	net_builtin.c	98;"	d	file:
TH_FIN	net_builtin.c	92;"	d	file:
TH_PUSH	net_builtin.c	95;"	d	file:
TH_RST	net_builtin.c	94;"	d	file:
TH_SYN	net_builtin.c	93;"	d	file:
TH_URG	net_builtin.c	97;"	d	file:
TIPG	drivers/imxrt.c	/^      RAEM, RAFL, TSEM, TAEM, TAFL, TIPG, FTRL, RESERVED12[3], TACC, RACC,$/;"	m	struct:imxrt_enet	file:
TLS_HDR_SIZE	tls_builtin.c	43;"	d	file:
TSEM	drivers/imxrt.c	/^      RAEM, RAFL, TSEM, TAEM, TAFL, TIPG, FTRL, RESERVED12[3], TACC, RACC,$/;"	m	struct:imxrt_enet	file:
TXIC0	drivers/imxrt.c	/^      RESERVED6[15], TCR, RESERVED7[7], PALR, PAUR, OPD, TXIC0, TXIC1, TXIC2,$/;"	m	struct:imxrt_enet	file:
TXIC1	drivers/imxrt.c	/^      RESERVED6[15], TCR, RESERVED7[7], PALR, PAUR, OPD, TXIC0, TXIC1, TXIC2,$/;"	m	struct:imxrt_enet	file:
TXIC2	drivers/imxrt.c	/^      RESERVED6[15], TCR, RESERVED7[7], PALR, PAUR, OPD, TXIC0, TXIC1, TXIC2,$/;"	m	struct:imxrt_enet	file:
W5500_CR	drivers/w5500.c	/^enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };$/;"	e	enum:__anon14	file:
W5500_RX0	drivers/w5500.c	/^enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };$/;"	e	enum:__anon14	file:
W5500_S0	drivers/w5500.c	/^enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };$/;"	e	enum:__anon14	file:
W5500_TX0	drivers/w5500.c	/^enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };$/;"	e	enum:__anon14	file:
WEBSOCKET_OP_BINARY	ws.h	5;"	d
WEBSOCKET_OP_CLOSE	ws.h	6;"	d
WEBSOCKET_OP_CONTINUE	ws.h	3;"	d
WEBSOCKET_OP_PING	ws.h	7;"	d
WEBSOCKET_OP_PONG	ws.h	8;"	d
WEBSOCKET_OP_TEXT	ws.h	4;"	d
WIN32_LEAN_AND_MEAN	arch_win32.h	6;"	d
X25519_BASE_POINT	tls_builtin.c	/^const uint8_t X25519_BASE_POINT[X25519_BYTES] = {9};$/;"	v
X25519_BYTES	tls_builtin.c	51;"	d	file:
X25519_WBITS	tls_builtin.c	54;"	d	file:
XTIME	tls_aes128.c	116;"	d	file:
XYcZ_add	tls_uecc.c	/^static void XYcZ_add(uECC_word_t *X1, uECC_word_t *Y1, uECC_word_t *X2,$/;"	f	file:
XYcZ_addC	tls_uecc.c	/^static void XYcZ_addC(uECC_word_t *X1, uECC_word_t *Y1, uECC_word_t *X2,$/;"	f	file:
XYcZ_initial_double	tls_uecc.c	/^static void XYcZ_initial_double(uECC_word_t *X1, uECC_word_t *Y1,$/;"	f	file:
_CRT_SECURE_NO_WARNINGS	arch_win32.h	10;"	d
_DARWIN_UNLIMITED_SELECT	arch_unix.h	5;"	d
_POSIX_TIMERS	arch_newlib.h	4;"	d
_UECC_CURVE_SPECIFIC_H_	tls_uecc.c	764;"	d	file:
_UECC_H_	tls_uecc.h	8;"	d
_UECC_TYPES_H_	tls_uecc.h	540;"	d
_UECC_VLI_H_	tls_uecc.h	381;"	d
_WINSOCK_DEPRECATED_NO_WARNINGS	arch_win32.h	14;"	d
__func__	arch_win32.h	33;"	d
a24	tls_builtin.c	/^static const limb_t a24[1] = {121665};$/;"	v	file:
accept	net_ft.h	42;"	d
accept_conn	net_builtin.c	/^static struct mg_connection *accept_conn(struct mg_connection *lsn,$/;"	f	file:
accept_conn	sock.c	/^static void accept_conn(struct mg_mgr *mgr, struct mg_connection *lsn) {$/;"	f	file:
ack	net_builtin.c	/^  uint32_t ack;    \/\/ Acknowledgement number$/;"	m	struct:tcp	file:
ack	net_builtin.c	/^  uint32_t seq, ack;           \/\/ TCP seq\/ack counters$/;"	m	struct:connstate	file:
aclass	dns.h	/^  uint16_t aclass;  \/\/ Address class$/;"	m	struct:mg_dns_rr
active_dns_requests	net.h	/^  void *active_dns_requests;    \/\/ DNS requests in progress$/;"	m	struct:mg_mgr
adc	tls_builtin.c	/^static limb_t adc(limb_t *carry, limb_t acc, limb_t mand) {$/;"	f	file:
adc0	tls_builtin.c	/^static limb_t adc0(limb_t *carry, limb_t acc) {$/;"	f	file:
add	tls_builtin.c	/^static void add(fe out, const fe a, const fe b) {$/;"	f	file:
add_ca_certs	tls_openssl.c	/^static bool add_ca_certs(SSL_CTX *ctx, STACK_OF(X509_INFO) * certs) {$/;"	f	file:
add_len	tls_aes128.h	/^  uint64_t add_len;     \/\/ total add data length$/;"	m	struct:__anon13
addexp	fmt.c	/^static int addexp(char *buf, int e, int sign) {$/;"	f	file:
addr	dns.h	/^  struct mg_addr addr;  \/\/ Resolved address$/;"	m	struct:mg_dns_message	typeref:struct:mg_dns_message::mg_addr
addr	net_builtin.c	/^  uint8_t addr, ctrl, proto[2], code, id, len[2];$/;"	m	struct:lcp	file:
aes_cipher	tls_aes128.c	/^int aes_cipher(aes_context *ctx, const uchar input[16], uchar output[16]) {$/;"	f
aes_context	tls_aes128.h	/^} aes_context;$/;"	t	typeref:struct:__anon12
aes_ctx	tls_aes128.h	/^  aes_context aes_ctx;  \/\/ cipher context used$/;"	m	struct:__anon13
aes_gcm_decrypt	tls_aes128.c	/^int aes_gcm_decrypt(unsigned char *output, const unsigned char *input,$/;"	f
aes_gcm_encrypt	tls_aes128.c	/^int aes_gcm_encrypt(unsigned char *output,  \/\/$/;"	f
aes_init_keygen_tables	tls_aes128.c	/^void aes_init_keygen_tables(void) {$/;"	f
aes_set_decryption_key	tls_aes128.c	/^static int aes_set_decryption_key(aes_context *ctx, const uchar *key, uint keysize) {$/;"	f	file:
aes_set_encryption_key	tls_aes128.c	/^static int aes_set_encryption_key(aes_context *ctx, const uchar *key, uint keysize) {$/;"	f	file:
aes_setkey	tls_aes128.c	/^int aes_setkey(aes_context *ctx,  \/\/ AES context provided by our caller$/;"	f
aes_tables_inited	tls_aes128.c	/^static int aes_tables_inited = 0;  \/\/ run-once flag for performing key$/;"	v	file:
alen	dns.h	/^  uint16_t alen;    \/\/ Address length$/;"	m	struct:mg_dns_rr
align	iobuf.h	/^  size_t align;        \/\/ Alignment during allocation$/;"	m	struct:mg_iobuf
alloca	arch_win32.h	69;"	d
apply_z	tls_uecc.c	/^static void apply_z(uECC_word_t *X1, uECC_word_t *Y1,$/;"	f	file:
arg	timer.h	/^  void *arg;                \/\/ Function argument$/;"	m	struct:mg_timer
arp	net_builtin.c	/^  struct arp *arp;$/;"	m	struct:pkt	typeref:struct:pkt::arp	file:
arp	net_builtin.c	/^struct arp {$/;"	s	file:
arp_ask	net_builtin.c	/^static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {$/;"	f	file:
asm_add	tls_uecc.c	195;"	d	file:
asm_clear	tls_uecc.c	189;"	d	file:
asm_mmod_fast_secp256r1	tls_uecc.c	207;"	d	file:
asm_mult	tls_uecc.c	201;"	d	file:
asm_rshift1	tls_uecc.c	204;"	d	file:
asm_set	tls_uecc.c	192;"	d	file:
asm_sub	tls_uecc.c	198;"	d	file:
assert	util.h	11;"	d
atype	dns.h	/^  uint16_t atype;   \/\/ Address type$/;"	m	struct:mg_dns_rr
b	tls_uecc.c	/^  uECC_word_t b[uECC_MAX_WORDS];$/;"	m	struct:uECC_Curve_t	file:
base_ectr	tls_aes128.h	/^  uchar base_ectr[16];  \/\/ first counter-mode cipher output for tag$/;"	m	struct:__anon13
bcopy	tls_uecc.c	/^static void bcopy(uint8_t *dst, const uint8_t *src, unsigned num_bytes) {$/;"	f	file:
bcpy	printf.c	/^static size_t bcpy(void (*out)(char, void *), void *arg, uint8_t *buf,$/;"	f	file:
be32	ws.c	/^static uint32_t be32(const uint8_t *p) {$/;"	f	file:
begin	net_builtin.h	/^  void (*begin)(void *);            \/\/ SPI begin: slave select low$/;"	m	struct:mg_tcpip_spi
bind	net_ft.h	44;"	d
bitcount_t	tls_uecc.h	/^typedef int16_t bitcount_t;$/;"	t
bits	md5.h	/^  uint32_t bits[2];$/;"	m	struct:__anon1
bits	sha256.h	/^  uint64_t bits;$/;"	m	struct:__anon5
bits2int	tls_uecc.c	/^static void bits2int(uECC_word_t *native, const uint8_t *bits,$/;"	f	file:
blk	sha1.c	23;"	d	file:
blk	sha1.c	30;"	d	file:
blk0	sha1.c	/^static uint32_t blk0(union char64long16 *block, int i) {$/;"	f	file:
block_size	tls_uecc.h	/^      block_size; \/* Hash function block size in bytes, eg 64 for SHA-256. *\/$/;"	m	struct:uECC_HashContext
bm	tls_openssl.h	/^  BIO_METHOD *bm;$/;"	m	struct:mg_tls
body	http.h	/^  struct mg_str body;                                  \/\/ Body$/;"	m	struct:mg_http_message	typeref:struct:mg_http_message::mg_str
body	http.h	/^  struct mg_str body;      \/\/ Part contents$/;"	m	struct:mg_http_part	typeref:struct:mg_http_part::mg_str
bool	arch_win32.h	/^typedef enum { false = 0, true = 1 } bool;$/;"	t	typeref:enum:__anon2
broadcast	net_builtin.c	/^static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};$/;"	v	file:
buf	iobuf.h	/^  unsigned char *buf;  \/\/ Pointer to stored data$/;"	m	struct:mg_iobuf
buf	md5.h	/^  uint32_t buf[4];$/;"	m	struct:__anon1
buf	queue.h	/^  char *buf;$/;"	m	struct:mg_queue
buf	tls_aes128.h	/^  uchar buf[16];        \/\/ buf working value$/;"	m	struct:__anon13
buf	tls_aes128.h	/^  uint32_t buf[68];  \/\/ key expansion buffer$/;"	m	struct:__anon12
buffer	drivers/imxrt.c	/^  uint32_t *buffer;  \/\/ Data ptr$/;"	m	struct:enet_desc	file:
buffer	sha1.h	/^  unsigned char buffer[64];$/;"	m	struct:__anon10
buffer	sha256.h	/^  unsigned char buffer[64];$/;"	m	struct:__anon5
c	dns.c	/^  struct mg_connection *c;$/;"	m	struct:dns_data	typeref:struct:dns_data::mg_connection	file:
c	http.c	/^  struct mg_connection *c;$/;"	m	struct:printdirentrydata	typeref:struct:printdirentrydata::mg_connection	file:
c	net.h	/^  struct mg_connection *c;  \/\/ DNS server connection$/;"	m	struct:mg_dns	typeref:struct:mg_dns::mg_connection
c	sha1.c	/^  unsigned char c[64];$/;"	m	union:char64long16	file:
ca	tls.h	/^  struct mg_str ca;    \/\/ PEM or DER$/;"	m	struct:mg_tls_opts	typeref:struct:mg_tls_opts::mg_str
ca	tls_mbed.h	/^  mbedtls_x509_crt ca;      \/\/ Parsed CA certificate$/;"	m	struct:mg_tls
calloc	arch_freertos.h	30;"	d
can_read	sock.c	/^static bool can_read(const struct mg_connection *c) {$/;"	f	file:
can_write	net_builtin.c	/^static bool can_write(struct mg_connection *c) {$/;"	f	file:
can_write	sock.c	/^static bool can_write(const struct mg_connection *c) {$/;"	f	file:
canon	tls_builtin.c	/^static limb_t canon(fe x) {$/;"	f	file:
cert	tls.h	/^  struct mg_str cert;  \/\/ PEM or DER$/;"	m	struct:mg_tls_opts	typeref:struct:mg_tls_opts::mg_str
cert	tls_mbed.h	/^  mbedtls_x509_crt cert;    \/\/ Parsed certificate$/;"	m	struct:mg_tls
ch	sha256.c	4;"	d	file:
char64long16	sha1.c	/^union char64long16 {$/;"	u	file:
ciaddr	net_builtin.c	/^  uint32_t ciaddr, yiaddr, siaddr, giaddr;$/;"	m	struct:dhcp	file:
cl	fs.h	/^  void (*cl)(void *fd);                                 \/\/ Close file$/;"	m	struct:mg_fs
clen	http.c	/^static size_t clen(const char *s, const char *end) {$/;"	f	file:
client_finished_key	tls_builtin.c	/^  uint8_t client_finished_key[32];$/;"	m	struct:tls_data	file:
client_write_iv	tls_builtin.c	/^  uint8_t client_write_iv[12];$/;"	m	struct:tls_data	file:
client_write_key	tls_builtin.c	/^  uint8_t client_write_key[16];$/;"	m	struct:tls_data	file:
close_conn	net_builtin.c	/^static void close_conn(struct mg_connection *c) {$/;"	f	file:
close_conn	sock.c	/^static void close_conn(struct mg_connection *c) {$/;"	f	file:
closedir	fs_posix.c	/^int closedir(DIR *d) {$/;"	f
closesocket	arch_azurertos.h	23;"	d
closesocket	arch_win32.h	73;"	d
closesocket	net_ft.h	53;"	d
closesocket	net_rl.h	6;"	d
closesocket	sock.c	15;"	d	file:
cmpresult_t	tls_uecc.h	/^typedef int8_t cmpresult_t;$/;"	t
cmsis_init	drivers/cmsis.c	/^static bool cmsis_init(struct mg_tcpip_if *ifp) {$/;"	f	file:
cmsis_rx	drivers/cmsis.c	/^static size_t cmsis_rx(void *buf, size_t buflen, struct mg_tcpip_if *ifp) {$/;"	f	file:
cmsis_tx	drivers/cmsis.c	/^static size_t cmsis_tx(const void *buf, size_t len, struct mg_tcpip_if *ifp) {$/;"	f	file:
cmsis_up	drivers/cmsis.c	/^static bool cmsis_up(struct mg_tcpip_if *ifp) {$/;"	f	file:
code	net_builtin.c	/^  uint8_t addr, ctrl, proto[2], code, id, len[2];$/;"	m	struct:lcp	file:
code	net_builtin.c	/^  uint8_t code;$/;"	m	struct:icmp	file:
condswap	tls_builtin.c	/^static void condswap(limb_t a[2 * NLIMBS], limb_t b[2 * NLIMBS],$/;"	f	file:
conf	tls_mbed.h	/^  mbedtls_ssl_config conf;  \/\/ SSL-TLS config$/;"	m	struct:mg_tls
connect	net_ft.h	43;"	d
connect_conn	sock.c	/^static void connect_conn(struct mg_connection *c) {$/;"	f	file:
conns	net.h	/^  struct mg_connection *conns;  \/\/ List of active connections$/;"	m	struct:mg_mgr	typeref:struct:mg_mgr::mg_connection
connstate	net_builtin.c	/^struct connstate {$/;"	s	file:
control	drivers/imxrt.c	/^  uint16_t control;  \/\/ Control and status$/;"	m	struct:enet_desc	file:
count	sha1.h	/^  uint32_t count[2];$/;"	m	struct:__anon10
crc32	ota_flash.c	/^  uint32_t crc32, size, timestamp, status;$/;"	m	struct:mg_otadata	file:
cseq	tls_builtin.c	/^  uint32_t cseq;  \/\/ client sequence number, used in decryption$/;"	m	struct:tls_data	file:
csum	net_builtin.c	/^  uint16_t csum;   \/\/ UDP checksum$/;"	m	struct:udp	file:
csum	net_builtin.c	/^  uint16_t csum;  \/\/ Checksum$/;"	m	struct:ip	file:
csum	net_builtin.c	/^  uint16_t csum;  \/\/ Checksum$/;"	m	struct:tcp	file:
csum	net_builtin.c	/^  uint16_t csum;$/;"	m	struct:icmp	file:
csumfin	net_builtin.c	/^static uint16_t csumfin(uint32_t sum) {$/;"	f	file:
csumup	net_builtin.c	/^static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {$/;"	f	file:
ctrl	net_builtin.c	/^  uint8_t addr, ctrl, proto[2], code, id, len[2];$/;"	m	struct:lcp	file:
ctx	tls_builtin.c	/^  mg_sha256_ctx ctx;$/;"	m	struct:SHA256_HashContext	file:
ctx	tls_openssl.h	/^  SSL_CTX *ctx;$/;"	m	struct:mg_tls
curve_secp160r1	tls_uecc.c	/^static const struct uECC_Curve_t curve_secp160r1 = {$/;"	v	typeref:struct:uECC_Curve_t	file:
curve_secp192r1	tls_uecc.c	/^static const struct uECC_Curve_t curve_secp192r1 = {$/;"	v	typeref:struct:uECC_Curve_t	file:
curve_secp224r1	tls_uecc.c	/^static const struct uECC_Curve_t curve_secp224r1 = {$/;"	v	typeref:struct:uECC_Curve_t	file:
curve_secp256k1	tls_uecc.c	/^static const struct uECC_Curve_t curve_secp256k1 = {$/;"	v	typeref:struct:uECC_Curve_t	file:
curve_secp256r1	tls_uecc.c	/^static const struct uECC_Curve_t curve_secp256r1 = {$/;"	v	typeref:struct:uECC_Curve_t	file:
d_name	fs_posix.c	/^  char d_name[MAX_PATH];$/;"	m	struct:dirent	file:
data	fs_packed.c	/^  const char *data;$/;"	m	struct:packed_file	file:
data	net.h	/^  char data[MG_DATA_SIZE];     \/\/ Arbitrary connection data$/;"	m	struct:mg_connection
data	ws.h	/^  struct mg_str data;  \/\/ Websocket message data$/;"	m	struct:mg_ws_message	typeref:struct:mg_ws_message::mg_str
data_len	ws.c	/^  size_t data_len;$/;"	m	struct:ws_msg	file:
debug_cb	tls_mbed.c	/^static void debug_cb(void *c, int lev, const char *s, int n, const char *s2) {$/;"	f	file:
dhcp	net_builtin.c	/^  struct dhcp *dhcp;$/;"	m	struct:pkt	typeref:struct:pkt::dhcp	file:
dhcp	net_builtin.c	/^struct dhcp {$/;"	s	file:
dir	http.c	/^  const char *dir;$/;"	m	struct:printdirentrydata	file:
dirent	fs_posix.c	/^struct dirent {$/;"	s	file:
dlimb_t	tls_builtin.c	/^typedef uint64_t dlimb_t;$/;"	t	file:
dns4	net.h	/^  struct mg_dns dns4;           \/\/ DNS for IPv4$/;"	m	struct:mg_mgr	typeref:struct:mg_mgr::mg_dns
dns6	net.h	/^  struct mg_dns dns6;           \/\/ DNS for IPv6$/;"	m	struct:mg_mgr	typeref:struct:mg_mgr::mg_dns
dns_cb	dns.c	/^static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {$/;"	f	file:
dns_data	dns.c	/^struct dns_data {$/;"	s	file:
dnstimeout	net.h	/^  int dnstimeout;               \/\/ DNS resolve timeout in milliseconds$/;"	m	struct:mg_mgr
double_jacobian	tls_uecc.c	/^  void (*double_jacobian)(uECC_word_t *X1, uECC_word_t *Y1, uECC_word_t *Z1,$/;"	m	struct:uECC_Curve_t	file:
double_jacobian_default	tls_uecc.c	/^static void double_jacobian_default(uECC_word_t *X1, uECC_word_t *Y1,$/;"	f	file:
double_jacobian_secp256k1	tls_uecc.c	/^static void double_jacobian_secp256k1(uECC_word_t *X1, uECC_word_t *Y1,$/;"	f	file:
dport	net_builtin.c	/^  uint16_t dport;  \/\/ Destination port$/;"	m	struct:tcp	file:
dport	net_builtin.c	/^  uint16_t dport;  \/\/ Destination port$/;"	m	struct:udp	file:
driver	net_builtin.h	/^  struct mg_tcpip_driver *driver;  \/\/ Low level driver$/;"	m	struct:mg_tcpip_if	typeref:struct:mg_tcpip_if::mg_tcpip_driver
driver_data	net_builtin.h	/^  void *driver_data;               \/\/ Driver-specific data$/;"	m	struct:mg_tcpip_if
dst	net_builtin.c	/^  uint32_t dst;   \/\/ Destination IP$/;"	m	struct:ip	file:
dst	net_builtin.c	/^  uint8_t dst[16];  \/\/ Destination IP$/;"	m	struct:ip6	file:
dst	net_builtin.c	/^  uint8_t dst[6];  \/\/ Destination MAC address$/;"	m	struct:eth	file:
dummy	tls_mbed.h	/^  int dummy;$/;"	m	struct:mg_tls_ctx
emac_read_phy	drivers/tm4c.c	/^static uint32_t emac_read_phy(uint8_t addr, uint8_t reg) {$/;"	f	file:
emac_write_phy	drivers/tm4c.c	/^static void emac_write_phy(uint8_t addr, uint8_t reg, uint32_t val) {$/;"	f	file:
enable_crc32_check	net_builtin.h	/^  bool enable_crc32_check;         \/\/ Do a CRC check on RX frames and strip it$/;"	m	struct:mg_tcpip_if
enable_dhcp_client	net_builtin.h	/^  bool enable_dhcp_client;         \/\/ Enable DCHP client$/;"	m	struct:mg_tcpip_if
enable_dhcp_server	net_builtin.h	/^  bool enable_dhcp_server;         \/\/ Enable DCHP server$/;"	m	struct:mg_tcpip_if
enable_get_gateway	net_builtin.h	/^  bool enable_get_gateway;         \/\/ DCHP server sets client as gateway$/;"	m	struct:mg_tcpip_if
enable_mac_check	net_builtin.h	/^  bool enable_mac_check;           \/\/ Do a MAC check on RX frames$/;"	m	struct:mg_tcpip_if
end	net_builtin.h	/^  void (*end)(void *);              \/\/ SPI end: slave select high$/;"	m	struct:mg_tcpip_spi
end	url.c	/^  size_t key, user, pass, host, port, uri, end;$/;"	m	struct:url	file:
enet_desc	drivers/imxrt.c	/^struct enet_desc {$/;"	s	file:
enet_phy_id	drivers/imxrt.c	/^static uint32_t enet_phy_id(uint8_t addr) {$/;"	f	file:
enet_phy_read	drivers/imxrt.c	/^static uint16_t enet_phy_read(uint8_t addr, uint8_t reg) {$/;"	f	file:
enet_phy_write	drivers/imxrt.c	/^static void enet_phy_write(uint8_t addr, uint8_t reg, uint16_t val) {$/;"	f	file:
ep0	sha256.c	6;"	d	file:
ep1	sha256.c	7;"	d	file:
epoll_fd	net.h	/^  int epoll_fd;                 \/\/ Used when MG_EPOLL_ENABLE=1$/;"	m	struct:mg_mgr
eport	net_builtin.h	/^  uint16_t eport;               \/\/ Next ephemeral port$/;"	m	struct:mg_tcpip_if
escapeseq	json.c	/^static const char *escapeseq(int esc) {$/;"	f	file:
eth	net_builtin.c	/^  struct eth *eth;$/;"	m	struct:pkt	typeref:struct:pkt::eth	file:
eth	net_builtin.c	/^struct eth {$/;"	s	file:
eth_read_phy	drivers/same54.c	/^static uint16_t eth_read_phy(uint8_t addr, uint8_t reg) {$/;"	f	file:
eth_read_phy	drivers/stm32f.c	/^static uint32_t eth_read_phy(uint8_t addr, uint8_t reg) {$/;"	f	file:
eth_read_phy	drivers/stm32h.c	/^static uint32_t eth_read_phy(uint8_t addr, uint8_t reg) {$/;"	f	file:
eth_write_phy	drivers/stm32f.c	/^static void eth_write_phy(uint8_t addr, uint8_t reg, uint32_t val) {$/;"	f	file:
eth_write_phy	drivers/stm32h.c	/^static void eth_write_phy(uint8_t addr, uint8_t reg, uint32_t val) {$/;"	f	file:
ether_output	net_builtin.c	/^static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {$/;"	f	file:
expire	dns.c	/^  uint64_t expire;$/;"	m	struct:dns_data	file:
expire	timer.h	/^  uint64_t expire;          \/\/ Expiration timestamp in milliseconds$/;"	m	struct:mg_timer
extra_headers	http.h	/^  const char *extra_headers;  \/\/ Extra HTTP headers to add in responses$/;"	m	struct:mg_http_serve_opts
extraconnsize	net.h	/^  size_t extraconnsize;         \/\/ Used by the MIP stack$/;"	m	struct:mg_mgr
false	arch_win32.h	/^typedef enum { false = 0, true = 1 } bool;$/;"	e	enum:__anon2
fd	fs.h	/^  void *fd;$/;"	m	struct:mg_fd
fd	net.h	/^  void *fd;                    \/\/ Connected socket, or LWIP data$/;"	m	struct:mg_connection
fe	tls_builtin.c	/^typedef limb_t fe[NLIMBS];$/;"	t	file:
ff_close	fs_fat.c	/^static void ff_close(void *fp) {$/;"	f	file:
ff_list	fs_fat.c	/^static void ff_list(const char *dir, void (*fn)(const char *, void *),$/;"	f	file:
ff_mkdir	fs_fat.c	/^static bool ff_mkdir(const char *path) {$/;"	f	file:
ff_open	fs_fat.c	/^static void *ff_open(const char *path, int flags) {$/;"	f	file:
ff_read	fs_fat.c	/^static size_t ff_read(void *fp, void *buf, size_t len) {$/;"	f	file:
ff_remove	fs_fat.c	/^static bool ff_remove(const char *path) {$/;"	f	file:
ff_rename	fs_fat.c	/^static bool ff_rename(const char *from, const char *to) {$/;"	f	file:
ff_seek	fs_fat.c	/^static size_t ff_seek(void *fp, size_t offset) {$/;"	f	file:
ff_stat	fs_fat.c	/^static int ff_stat(const char *path, size_t *size, time_t *mtime) {$/;"	f	file:
ff_time_to_epoch	fs_fat.c	/^static time_t ff_time_to_epoch(uint16_t fdate, uint16_t ftime) {$/;"	f	file:
ff_write	fs_fat.c	/^static size_t ff_write(void *fp, const void *buf, size_t len) {$/;"	f	file:
filename	http.h	/^  struct mg_str filename;  \/\/ Filename for file uploads$/;"	m	struct:mg_http_part	typeref:struct:mg_http_part::mg_str
finish_SHA256	tls_builtin.c	/^static void finish_SHA256(const uECC_HashContext *base, uint8_t *hash_result) {$/;"	f	file:
finish_hash	tls_uecc.h	/^  void (*finish_hash)(const struct uECC_HashContext *context,$/;"	m	struct:uECC_HashContext
flags	dns.h	/^  uint16_t flags;$/;"	m	struct:mg_dns_header
flags	net_builtin.c	/^  uint16_t secs, flags;$/;"	m	struct:dhcp	file:
flags	net_builtin.c	/^  uint8_t flags;   \/\/ TCP flags$/;"	m	struct:tcp	file:
flags	timer.h	/^  unsigned flags;           \/\/ Possible flags values below$/;"	m	struct:mg_timer
flags	ws.c	/^  uint8_t flags;$/;"	m	struct:ws_msg	file:
flags	ws.h	/^  uint8_t flags;       \/\/ Websocket message flags$/;"	m	struct:mg_ws_message
flash_bank	device_stm32h7.c	/^MG_IRAM static uint32_t flash_bank(void *addr) {$/;"	f	file:
flash_bank_is_swapped	device_stm32h5.c	/^static bool flash_bank_is_swapped(void) {$/;"	f	file:
flash_bank_is_swapped	device_stm32h7.c	/^MG_IRAM static bool flash_bank_is_swapped(uint32_t bank) {$/;"	f	file:
flash_clear_err	device_stm32h5.c	/^static void flash_clear_err(void) {$/;"	f	file:
flash_clear_err	device_stm32h7.c	/^MG_IRAM static void flash_clear_err(uint32_t bank) {$/;"	f	file:
flash_is_err	device_stm32h5.c	/^static bool flash_is_err(void) {$/;"	f	file:
flash_is_err	device_stm32h7.c	/^MG_IRAM static bool flash_is_err(uint32_t bank) {$/;"	f	file:
flash_last_sector	device_flash.c	/^static char *flash_last_sector(void) {$/;"	f	file:
flash_page_start	device_stm32h5.c	/^static int flash_page_start(volatile uint32_t *dst) {$/;"	f	file:
flash_page_start	device_stm32h7.c	/^MG_IRAM static bool flash_page_start(volatile uint32_t *dst) {$/;"	f	file:
flash_unlock	device_ch32v307.c	/^static void flash_unlock(void) {$/;"	f	file:
flash_unlock	device_stm32h5.c	/^static void flash_unlock(void) {$/;"	f	file:
flash_unlock	device_stm32h7.c	/^MG_IRAM static void flash_unlock(void) {$/;"	f	file:
flash_wait	device_ch32v307.c	/^static void flash_wait(void) {$/;"	f	file:
flash_wait	device_stm32h5.c	/^static void flash_wait(void) {$/;"	f	file:
flash_wait	device_stm32h7.c	/^MG_IRAM static void flash_wait(uint32_t bank) {$/;"	f	file:
fmt	net_builtin.c	/^  uint16_t fmt;    \/\/ Format of hardware address$/;"	m	struct:arp	file:
fn	net.h	/^  mg_event_handler_t fn;       \/\/ User-specified event handler function$/;"	m	struct:mg_connection
fn	rpc.h	/^  void (*fn)(struct mg_rpc_req *);  \/\/ Handler function$/;"	m	struct:mg_rpc
fn	timer.h	/^  void (*fn)(void *);       \/\/ Function to call$/;"	m	struct:mg_timer
fn_data	net.h	/^  void *fn_data;               \/\/ User-specified function parameter$/;"	m	struct:mg_connection
fn_data	rpc.h	/^  void *fn_data;                    \/\/ Handler function argument$/;"	m	struct:mg_rpc
frag	net_builtin.c	/^  uint16_t frag;  \/\/ Fragmentation$/;"	m	struct:ip	file:
frame	rpc.h	/^  struct mg_str frame;   \/\/ Request, e.g. {"id":1,"method":"add","params":[1,2]}$/;"	m	struct:mg_rpc_req	typeref:struct:mg_rpc_req::mg_str
free	arch_freertos.h	31;"	d
fs	fs.h	/^  struct mg_fs *fs;$/;"	m	struct:mg_fd	typeref:struct:mg_fd::mg_fs
fs	http.h	/^  struct mg_fs *fs;           \/\/ Filesystem implementation. Use NULL for POSIX$/;"	m	struct:mg_http_serve_opts	typeref:struct:mg_http_serve_opts::mg_fs
g_rng_function	tls_uecc.c	/^static uECC_RNG_Function g_rng_function = &default_RNG;$/;"	v	file:
g_rng_function	tls_uecc.c	/^static uECC_RNG_Function g_rng_function = 0;$/;"	v	file:
gcm_auth_decrypt	tls_aes128.c	/^int gcm_auth_decrypt($/;"	f
gcm_context	tls_aes128.h	/^} gcm_context;$/;"	t	typeref:struct:__anon13
gcm_crypt_and_tag	tls_aes128.c	/^int gcm_crypt_and_tag($/;"	f
gcm_finish	tls_aes128.c	/^int gcm_finish(gcm_context *ctx,  \/\/ pointer to user-provided GCM context$/;"	f
gcm_initialize	tls_aes128.c	/^int gcm_initialize(void) {$/;"	f
gcm_mult	tls_aes128.c	/^static void gcm_mult(gcm_context *ctx,   \/\/ pointer to established context$/;"	f	file:
gcm_setkey	tls_aes128.c	/^int gcm_setkey(gcm_context *ctx,    \/\/ pointer to caller-provided gcm context$/;"	f
gcm_start	tls_aes128.c	/^int gcm_start(gcm_context *ctx,  \/\/ pointer to user-provided GCM context$/;"	f
gcm_update	tls_aes128.c	/^int gcm_update(gcm_context *ctx,    \/\/ pointer to user-provided GCM context$/;"	f
gcm_zero_ctx	tls_aes128.c	/^void gcm_zero_ctx(gcm_context *ctx) {$/;"	f
get_clock_rate	drivers/same54.c	/^int get_clock_rate(struct mg_tcpip_driver_same54_data *d) {$/;"	f
get_hclk	drivers/stm32f.c	/^static uint32_t get_hclk(void) {$/;"	f	file:
get_hclk	drivers/stm32h.c	/^static uint32_t get_hclk(void) {$/;"	f	file:
get_sysclk	drivers/tm4c.c	/^static uint32_t get_sysclk(void) {$/;"	f	file:
gethostbyname	net_ft.h	54;"	d
getpeer	net_builtin.c	/^static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,$/;"	f	file:
getpeername	net_ft.h	56;"	d
getrange	http.c	/^static int getrange(struct mg_str *s, size_t *a, size_t *b) {$/;"	f	file:
getsockname	net_ft.h	55;"	d
gettimestamp	sntp.c	/^static int64_t gettimestamp(const uint32_t *data) {$/;"	f	file:
giaddr	net_builtin.c	/^  uint32_t ciaddr, yiaddr, siaddr, giaddr;$/;"	m	struct:dhcp	file:
guess_content_type	http.c	/^static struct mg_str guess_content_type(struct mg_str path, const char *extra) {$/;"	f	file:
guess_mdc_cr	drivers/stm32f.c	/^static int guess_mdc_cr(void) {$/;"	f	file:
guess_mdc_cr	drivers/stm32h.c	/^static int guess_mdc_cr(void) {$/;"	f	file:
guess_mdc_cr	drivers/tm4c.c	/^static int guess_mdc_cr(void) {$/;"	f	file:
gw	net_builtin.h	/^  uint32_t ip, mask, gw;           \/\/ IP address, mask, default gateway$/;"	m	struct:mg_tcpip_if
gwmac	net_builtin.h	/^  uint8_t gwmac[6];             \/\/ Router's MAC$/;"	m	struct:mg_tcpip_if
handle	fs_posix.c	/^  HANDLE handle;$/;"	m	struct:win32_dir	file:
handshake_secret	tls_builtin.c	/^  uint8_t handshake_secret[32];$/;"	m	struct:tls_data	file:
head	http.h	/^  struct mg_str head;                                  \/\/ Request + headers$/;"	m	struct:mg_http_message	typeref:struct:mg_http_message::mg_str
head	queue.h	/^  volatile size_t head;$/;"	m	struct:mg_queue
head	rpc.h	/^  struct mg_rpc **head;  \/\/ RPC handlers list head$/;"	m	struct:mg_rpc_req	typeref:struct:mg_rpc_req::mg_rpc
header_len	ws.c	/^  size_t header_len;$/;"	m	struct:ws_msg	file:
headers	http.h	/^  struct mg_http_header headers[MG_MAX_HTTP_HEADERS];  \/\/ Headers$/;"	m	struct:mg_http_message	typeref:struct:mg_http_message::mg_http_header
hlen	net_builtin.c	/^  uint8_t hlen;    \/\/ Length of hardware address$/;"	m	struct:arp	file:
hlen	net_builtin.c	/^  uint8_t op, htype, hlen, hops;$/;"	m	struct:dhcp	file:
hm	http.c	/^  struct mg_http_message *hm;$/;"	m	struct:printdirentrydata	typeref:struct:printdirentrydata::mg_http_message	file:
hops	net_builtin.c	/^  uint8_t op, htype, hlen, hops;$/;"	m	struct:dhcp	file:
host	url.c	/^  size_t key, user, pass, host, port, uri, end;$/;"	m	struct:url	file:
http_cb	http.c	/^static void http_cb(struct mg_connection *c, int ev, void *ev_data) {$/;"	f	file:
htype	net_builtin.c	/^  uint8_t op, htype, hlen, hops;$/;"	m	struct:dhcp	file:
hwaddr	net_builtin.c	/^  uint8_t hwaddr[208];$/;"	m	struct:dhcp	file:
icmp	net_builtin.c	/^  struct icmp *icmp;$/;"	m	struct:pkt	typeref:struct:pkt::icmp	file:
icmp	net_builtin.c	/^struct icmp {$/;"	s	file:
id	net.h	/^  unsigned long id;            \/\/ Auto-incrementing unique connection ID$/;"	m	struct:mg_connection
id	net_builtin.c	/^  uint16_t id;    \/\/ Unused$/;"	m	struct:ip	file:
id	net_builtin.c	/^  uint8_t addr, ctrl, proto[2], code, id, len[2];$/;"	m	struct:lcp	file:
id	timer.h	/^  unsigned long id;         \/\/ Timer ID$/;"	m	struct:mg_timer
imxrt_enet	drivers/imxrt.c	/^struct imxrt_enet {$/;"	s	file:
in	md5.h	/^  unsigned char in[64];$/;"	m	struct:__anon1
info	fs_posix.c	/^  WIN32_FIND_DATAW info;$/;"	m	struct:win32_dir	file:
init	net_builtin.h	/^  bool (*init)(struct mg_tcpip_if *);                         \/\/ Init driver$/;"	m	struct:mg_tcpip_driver
init_SHA256	tls_builtin.c	/^static void init_SHA256(const uECC_HashContext *base) {$/;"	f	file:
init_closure	net_builtin.c	/^static void init_closure(struct mg_connection *c) {$/;"	f	file:
init_hash	tls_uecc.h	/^  void (*init_hash)(const struct uECC_HashContext *context);$/;"	m	struct:uECC_HashContext
int16_t	arch_win32.h	/^typedef short int16_t;$/;"	t
int32_t	arch_win32.h	/^typedef int int32_t;$/;"	t
int64_t	arch_win32.h	/^typedef __int64 int64_t;$/;"	t
int8_t	arch_win32.h	/^typedef char int8_t;$/;"	t
ioalloc	sock.c	/^static bool ioalloc(struct mg_connection *c, struct mg_iobuf *io) {$/;"	f	file:
iolog	sock.c	/^static void iolog(struct mg_connection *c, char *buf, long n, bool r) {$/;"	f	file:
ip	net.h	/^  uint8_t ip[16];    \/\/ Holds IPv4 or IPv6 address, in network byte order$/;"	m	struct:mg_addr
ip	net_builtin.c	/^  struct ip *ip;$/;"	m	struct:pkt	typeref:struct:pkt::ip	file:
ip	net_builtin.c	/^struct ip {$/;"	s	file:
ip	net_builtin.h	/^  uint32_t ip, mask, gw;           \/\/ IP address, mask, default gateway$/;"	m	struct:mg_tcpip_if
ip6	net_builtin.c	/^  struct ip6 *ip6;$/;"	m	struct:pkt	typeref:struct:pkt::ip6	file:
ip6	net_builtin.c	/^struct ip6 {$/;"	s	file:
ipcsum	net_builtin.c	/^static uint16_t ipcsum(const void *buf, size_t len) {$/;"	f	file:
is_accepted	net.h	/^  unsigned is_accepted : 1;    \/\/ Accepted (server) connection$/;"	m	struct:mg_connection
is_arplooking	net.h	/^  unsigned is_arplooking : 1;  \/\/ Non-blocking ARP resolution is in progress$/;"	m	struct:mg_connection
is_client	net.h	/^  unsigned is_client : 1;      \/\/ Outbound (client) connection$/;"	m	struct:mg_connection
is_closing	net.h	/^  unsigned is_closing : 1;     \/\/ Close and free the connection immediately$/;"	m	struct:mg_connection
is_connecting	net.h	/^  unsigned is_connecting : 1;  \/\/ Non-blocking connect is in progress$/;"	m	struct:mg_connection
is_digit	fmt.c	/^static bool is_digit(int c) {$/;"	f	file:
is_dir_prefix	fs_packed.c	/^static int is_dir_prefix(const char *prefix, size_t n, const char *path) {$/;"	f	file:
is_draining	net.h	/^  unsigned is_draining : 1;    \/\/ Send remaining data, then close and free$/;"	m	struct:mg_connection
is_full	net.h	/^  unsigned is_full : 1;        \/\/ Stop reads, until cleared$/;"	m	struct:mg_connection
is_hex_digit	http.c	/^static bool is_hex_digit(int c) {$/;"	f	file:
is_hexdumping	net.h	/^  unsigned is_hexdumping : 1;  \/\/ Hexdump in\/out traffic$/;"	m	struct:mg_connection
is_ip6	net.h	/^  bool is_ip6;       \/\/ True when address is IPv6 address$/;"	m	struct:mg_addr
is_listening	net.h	/^  unsigned is_listening : 1;   \/\/ Listening connection$/;"	m	struct:mg_connection
is_mqtt5	net.h	/^  unsigned is_mqtt5 : 1;       \/\/ For MQTT connection, v5 indicator$/;"	m	struct:mg_connection
is_page_boundary	device_ch32v307.c	/^static bool is_page_boundary(const void *addr) {$/;"	f	file:
is_readable	net.h	/^  unsigned is_readable : 1;    \/\/ Connection is ready to read$/;"	m	struct:mg_connection
is_resolving	net.h	/^  unsigned is_resolving : 1;   \/\/ Non-blocking DNS resolution is in progress$/;"	m	struct:mg_connection
is_resp	net.h	/^  unsigned is_resp : 1;        \/\/ Response is still being generated$/;"	m	struct:mg_connection
is_space	str.c	/^static bool is_space(int c) {$/;"	f	file:
is_tls	net.h	/^  unsigned is_tls : 1;         \/\/ TLS-enabled connection$/;"	m	struct:mg_connection
is_tls_hs	net.h	/^  unsigned is_tls_hs : 1;      \/\/ TLS handshake is in progress$/;"	m	struct:mg_connection
is_udp	net.h	/^  unsigned is_udp : 1;         \/\/ UDP connection$/;"	m	struct:mg_connection
is_websocket	net.h	/^  unsigned is_websocket : 1;   \/\/ WebSocket connection$/;"	m	struct:mg_connection
is_writable	net.h	/^  unsigned is_writable : 1;    \/\/ Connection is ready to write$/;"	m	struct:mg_connection
isbyte	util.c	/^static int isbyte(int n) {$/;"	f	file:
isok	http.c	/^static bool isok(uint8_t c) {$/;"	f	file:
isx	http.c	/^static bool isx(int c) {$/;"	f	file:
json_esc	json.c	/^static char json_esc(int c, int esc) {$/;"	f	file:
key	tls.h	/^  struct mg_str key;   \/\/ PEM or DER$/;"	m	struct:mg_tls_opts	typeref:struct:mg_tls_opts::mg_str
key	url.c	/^  size_t key, user, pass, host, port, uri, end;$/;"	m	struct:url	file:
l	sha1.c	/^  uint32_t l[16];$/;"	m	union:char64long16	file:
ladder_part1	tls_builtin.c	/^static void ladder_part1(fe xs[5]) {$/;"	f	file:
ladder_part2	tls_builtin.c	/^static void ladder_part2(fe xs[5], const fe x1) {$/;"	f	file:
last4	tls_aes128.c	/^static const uint64_t last4[16] = {$/;"	v	file:
lcp	net_builtin.c	/^struct lcp {$/;"	s	file:
lease_expire	net_builtin.h	/^  uint64_t lease_expire;        \/\/ Lease expiration time, in ms$/;"	m	struct:mg_tcpip_if
len	iobuf.h	/^  size_t len;          \/\/ Current number of bytes$/;"	m	struct:mg_iobuf
len	net_builtin.c	/^  uint16_t len;     \/\/ Length$/;"	m	struct:ip6	file:
len	net_builtin.c	/^  uint16_t len;    \/\/ UDP length$/;"	m	struct:udp	file:
len	net_builtin.c	/^  uint16_t len;   \/\/ Length$/;"	m	struct:ip	file:
len	net_builtin.c	/^  uint8_t addr, ctrl, proto[2], code, id, len[2];$/;"	m	struct:lcp	file:
len	sha256.h	/^  uint32_t len;$/;"	m	struct:__anon5
len	str.h	/^  size_t len;       \/\/ String len$/;"	m	struct:mg_str
len	tls_aes128.h	/^  uint64_t len;         \/\/ cipher data length processed so far$/;"	m	struct:__anon13
length	drivers/imxrt.c	/^  uint16_t length;   \/\/ Data length$/;"	m	struct:enet_desc	file:
limb_t	tls_builtin.c	/^typedef uint32_t limb_t;$/;"	t	file:
listdir	http.c	/^static void listdir(struct mg_connection *c, struct mg_http_message *hm,$/;"	f	file:
listen	net_ft.h	45;"	d
llc	net_builtin.c	/^  struct llc *llc;$/;"	m	struct:pkt	typeref:struct:pkt::llc	file:
load_cert	tls_openssl.c	/^static X509 *load_cert(struct mg_str s) {$/;"	f	file:
load_key	tls_openssl.c	/^static EVP_PKEY *load_key(struct mg_str s) {$/;"	f	file:
loc	net.h	/^  struct mg_addr loc;          \/\/ Local address$/;"	m	struct:mg_connection	typeref:struct:mg_connection::mg_addr
logc	log.c	/^static void logc(unsigned char c) {$/;"	f	file:
logs	log.c	/^static void logs(const char *buf, size_t len) {$/;"	f	file:
ls	fs.h	/^  void (*ls)(const char *path, void (*fn)(const char *, void *),$/;"	m	struct:mg_fs
mac	net_builtin.c	/^  uint8_t mac[6];              \/\/ Peer MAC address$/;"	m	struct:connstate	file:
mac	net_builtin.h	/^  uint8_t mac[6];                  \/\/ MAC address. Must be set to a valid MAC$/;"	m	struct:mg_tcpip_if
mac_cb	drivers/cmsis.c	/^static void mac_cb(uint32_t ev) {$/;"	f	file:
magic	net_builtin.c	/^  uint32_t magic;$/;"	m	struct:dhcp	file:
maj	sha256.c	5;"	d	file:
malloc	arch_freertos.h	32;"	d
mask	net_builtin.h	/^  uint32_t ip, mask, gw;           \/\/ IP address, mask, default gateway$/;"	m	struct:mg_tcpip_if
mdc_cr	drivers/imxrt.h	/^  int mdc_cr;  \/\/ Valid values: -1 to 63$/;"	m	struct:mg_tcpip_driver_imxrt_data
mdc_cr	drivers/same54.h	/^    int mdc_cr;$/;"	m	struct:mg_tcpip_driver_same54_data
mdc_cr	drivers/stm32f.h	/^  int mdc_cr;  \/\/ Valid values: -1, 0, 1, 2, 3, 4, 5$/;"	m	struct:mg_tcpip_driver_stm32f_data
mdc_cr	drivers/stm32h.h	/^  int mdc_cr;  \/\/ Valid values: -1, 0, 1, 2, 3, 4, 5$/;"	m	struct:mg_tcpip_driver_stm32h_data
mdc_cr	drivers/tm4c.h	/^  int mdc_cr;  \/\/ Valid values: -1, 0, 1, 2, 3$/;"	m	struct:mg_tcpip_driver_tm4c_data
message	http.h	/^  struct mg_str message;  \/\/ Request + headers + body$/;"	m	struct:mg_http_message	typeref:struct:mg_http_message::mg_str
method	http.h	/^  struct mg_str method, uri, query, proto;             \/\/ Request\/response line$/;"	m	struct:mg_http_message	typeref:struct:mg_http_message::mg_str
method	rpc.h	/^  struct mg_str method;             \/\/ Method pattern$/;"	m	struct:mg_rpc	typeref:struct:mg_rpc::mg_str
mg_addr	net.h	/^struct mg_addr {$/;"	s
mg_alloc_conn	net.c	/^struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {$/;"	f
mg_atod	json.c	/^static double mg_atod(const char *p, int len, int *numlen) {$/;"	f	file:
mg_aton	net.c	/^bool mg_aton(struct mg_str str, struct mg_addr *addr) {$/;"	f
mg_aton4	net.c	/^static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {$/;"	f	file:
mg_aton6	net.c	/^static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {$/;"	f	file:
mg_atone	net.c	/^static bool mg_atone(struct mg_str str, struct mg_addr *addr) {$/;"	f	file:
mg_atonl	net.c	/^static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {$/;"	f	file:
mg_base64_decode	base64.c	/^size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {$/;"	f
mg_base64_decode_single	base64.c	/^static int mg_base64_decode_single(int c) {$/;"	f	file:
mg_base64_encode	base64.c	/^size_t mg_base64_encode(const unsigned char *p, size_t n, char *to, size_t dl) {$/;"	f
mg_base64_encode_single	base64.c	/^static int mg_base64_encode_single(int c) {$/;"	f	file:
mg_base64_final	base64.c	/^size_t mg_base64_final(char *to, size_t n) {$/;"	f
mg_base64_update	base64.c	/^size_t mg_base64_update(unsigned char ch, char *to, size_t n) {$/;"	f
mg_bio_ctrl	tls_openssl.c	/^static long mg_bio_ctrl(BIO *b, int cmd, long larg, void *pargs) {$/;"	f	file:
mg_bio_read	tls_openssl.c	/^static int mg_bio_read(BIO *bio, char *buf, int len) {$/;"	f	file:
mg_bio_write	tls_openssl.c	/^static int mg_bio_write(BIO *bio, const char *buf, int len) {$/;"	f	file:
mg_byte_reverse	md5.c	/^static void mg_byte_reverse(unsigned char *buf, unsigned longs) {$/;"	f	file:
mg_bzero	util.c	/^void mg_bzero(volatile unsigned char *buf, size_t len) {$/;"	f
mg_call	event.c	/^void mg_call(struct mg_connection *c, int ev, void *ev_data) {$/;"	f
mg_calloc	arch_freertos.h	/^static inline void *mg_calloc(size_t cnt, size_t size) {$/;"	f
mg_casecmp	str.c	/^int mg_casecmp(const char *s1, const char *s2) {$/;"	f
mg_check_ip_acl	util.c	/^int mg_check_ip_acl(struct mg_str acl, struct mg_addr *remote_ip) {$/;"	f
mg_close_conn	net.c	/^void mg_close_conn(struct mg_connection *c) {$/;"	f
mg_commalist	str.c	/^bool mg_commalist(struct mg_str *s, struct mg_str *k, struct mg_str *v) {$/;"	f
mg_connect	net.c	/^struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *url,$/;"	f
mg_connect_resolved	net_builtin.c	/^void mg_connect_resolved(struct mg_connection *c) {$/;"	f
mg_connect_resolved	sock.c	/^void mg_connect_resolved(struct mg_connection *c) {$/;"	f
mg_connection	net.h	/^struct mg_connection {$/;"	s
mg_crc32	util.c	/^uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {$/;"	f
mg_days_from_epoch	fs_fat.c	/^static int mg_days_from_epoch(int y, int m, int d) {$/;"	f	file:
mg_device_reset	device_ch32v307.c	/^void mg_device_reset(void) {$/;"	f
mg_device_reset	device_dummy.c	/^void mg_device_reset(void) {$/;"	f
mg_device_reset	device_stm32h5.c	/^void mg_device_reset(void) {$/;"	f
mg_device_reset	device_stm32h7.c	/^MG_IRAM void mg_device_reset(void) {$/;"	f
mg_dns	net.h	/^struct mg_dns {$/;"	s
mg_dns_free	dns.c	/^static void mg_dns_free(struct dns_data **head, struct dns_data *d) {$/;"	f	file:
mg_dns_header	dns.h	/^struct mg_dns_header {$/;"	s
mg_dns_message	dns.h	/^struct mg_dns_message {$/;"	s
mg_dns_parse	dns.c	/^bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {$/;"	f
mg_dns_parse_name	dns.c	/^static size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs,$/;"	f	file:
mg_dns_parse_name_depth	dns.c	/^static size_t mg_dns_parse_name_depth(const uint8_t *s, size_t len, size_t ofs,$/;"	f	file:
mg_dns_parse_rr	dns.c	/^size_t mg_dns_parse_rr(const uint8_t *buf, size_t len, size_t ofs,$/;"	f
mg_dns_rr	dns.h	/^struct mg_dns_rr {$/;"	s
mg_dns_send	dns.c	/^static bool mg_dns_send(struct mg_connection *c, const struct mg_str *name,$/;"	f	file:
mg_dtoa	fmt.c	/^static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {$/;"	f	file:
mg_error	event.c	/^void mg_error(struct mg_connection *c, const char *fmt, ...) {$/;"	f
mg_esc	printf.c	/^static char mg_esc(int c, bool esc) {$/;"	f	file:
mg_escape	printf.c	/^static char mg_escape(int c) {$/;"	f	file:
mg_event_handler_t	event.h	/^typedef void (*mg_event_handler_t)(struct mg_connection *, int ev,$/;"	t
mg_fd	fs.h	/^struct mg_fd {$/;"	s
mg_file_printf	fs.c	/^bool mg_file_printf(struct mg_fs *fs, const char *path, const char *fmt, ...) {$/;"	f
mg_file_read	fs.c	/^char *mg_file_read(struct mg_fs *fs, const char *path, size_t *sizep) {$/;"	f
mg_file_write	fs.c	/^bool mg_file_write(struct mg_fs *fs, const char *path, const void *buf,$/;"	f
mg_flash_bank	device_ch32v307.c	/^int mg_flash_bank(void) {$/;"	f
mg_flash_bank	device_dummy.c	/^int mg_flash_bank(void) {$/;"	f
mg_flash_bank	device_stm32h5.c	/^int mg_flash_bank(void) {$/;"	f
mg_flash_bank	device_stm32h7.c	/^MG_IRAM int mg_flash_bank(void) {$/;"	f
mg_flash_erase	device_ch32v307.c	/^bool mg_flash_erase(void *addr) {$/;"	f
mg_flash_erase	device_dummy.c	/^bool mg_flash_erase(void *location) {$/;"	f
mg_flash_erase	device_stm32h5.c	/^bool mg_flash_erase(void *location) {$/;"	f
mg_flash_erase	device_stm32h7.c	/^MG_IRAM bool mg_flash_erase(void *addr) {$/;"	f
mg_flash_load	device_flash.c	/^bool mg_flash_load(void *sector, uint32_t key, void *buf, size_t len) {$/;"	f
mg_flash_next	device_flash.c	/^size_t mg_flash_next(char *p, char *end, uint32_t *key, size_t *size) {$/;"	f
mg_flash_save	device_flash.c	/^bool mg_flash_save(void *sector, uint32_t key, const void *buf, size_t len) {$/;"	f
mg_flash_sector_cleanup	device_flash.c	/^static void mg_flash_sector_cleanup(char *sector) {$/;"	f	file:
mg_flash_sector_size	device_ch32v307.c	/^size_t mg_flash_sector_size(void) {$/;"	f
mg_flash_sector_size	device_dummy.c	/^size_t mg_flash_sector_size(void) {$/;"	f
mg_flash_sector_size	device_stm32h5.c	/^size_t mg_flash_sector_size(void) {$/;"	f
mg_flash_sector_size	device_stm32h7.c	/^MG_IRAM size_t mg_flash_sector_size(void) {$/;"	f
mg_flash_size	device_ch32v307.c	/^size_t mg_flash_size(void) {$/;"	f
mg_flash_size	device_dummy.c	/^size_t mg_flash_size(void) {$/;"	f
mg_flash_size	device_stm32h5.c	/^size_t mg_flash_size(void) {$/;"	f
mg_flash_size	device_stm32h7.c	/^MG_IRAM size_t mg_flash_size(void) {$/;"	f
mg_flash_start	device_ch32v307.c	/^void *mg_flash_start(void) {$/;"	f
mg_flash_start	device_dummy.c	/^void *mg_flash_start(void) {$/;"	f
mg_flash_start	device_stm32h5.c	/^void *mg_flash_start(void) {$/;"	f
mg_flash_start	device_stm32h7.c	/^MG_IRAM void *mg_flash_start(void) {$/;"	f
mg_flash_swap_bank	device_dummy.c	/^bool mg_flash_swap_bank(void) {$/;"	f
mg_flash_swap_bank	device_stm32h5.c	/^bool mg_flash_swap_bank(void) {$/;"	f
mg_flash_swap_bank	device_stm32h7.c	/^MG_IRAM bool mg_flash_swap_bank() {$/;"	f
mg_flash_write	device_ch32v307.c	/^bool mg_flash_write(void *addr, const void *buf, size_t len) {$/;"	f
mg_flash_write	device_dummy.c	/^bool mg_flash_write(void *addr, const void *buf, size_t len) {$/;"	f
mg_flash_write	device_stm32h5.c	/^bool mg_flash_write(void *addr, const void *buf, size_t len) {$/;"	f
mg_flash_write	device_stm32h7.c	/^MG_IRAM bool mg_flash_write(void *addr, const void *buf, size_t len) {$/;"	f
mg_flash_write_align	device_ch32v307.c	/^size_t mg_flash_write_align(void) {$/;"	f
mg_flash_write_align	device_dummy.c	/^size_t mg_flash_write_align(void) {$/;"	f
mg_flash_write_align	device_stm32h5.c	/^size_t mg_flash_write_align(void) {$/;"	f
mg_flash_write_align	device_stm32h7.c	/^MG_IRAM size_t mg_flash_write_align(void) {$/;"	f
mg_fs	fs.h	/^struct mg_fs {$/;"	s
mg_fs_close	fs.c	/^void mg_fs_close(struct mg_fd *fd) {$/;"	f
mg_fs_fat	fs_fat.c	/^struct mg_fs mg_fs_fat = {ff_stat,  ff_list, ff_open,   ff_close,  ff_read,$/;"	v	typeref:struct:mg_fs
mg_fs_open	fs.c	/^struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {$/;"	f
mg_fs_packed	fs_packed.c	/^struct mg_fs mg_fs_packed = {$/;"	v	typeref:struct:mg_fs
mg_fs_posix	fs_posix.c	/^struct mg_fs mg_fs_posix = {p_stat,  p_list, p_open,   p_close,  p_read,$/;"	v	typeref:struct:mg_fs
mg_fwkey	ota_flash.c	/^MG_IRAM static uint32_t mg_fwkey(int fw) {$/;"	f	file:
mg_getpeername	net_ft.h	/^static inline int mg_getpeername(MG_SOCKET_TYPE fd, void *buf, socklen_t *len) {$/;"	f
mg_getsockname	net_ft.h	/^static inline int mg_getsockname(MG_SOCKET_TYPE fd, void *buf, socklen_t *len) {$/;"	f
mg_globmatch	str.c	/^bool mg_globmatch(const char *s1, size_t n1, const char *s2, size_t n2) {$/;"	f
mg_hello	http.c	/^void mg_hello(const char *url) {$/;"	f
mg_hex	str.c	/^char *mg_hex(const void *buf, size_t len, char *to) {$/;"	f
mg_hexdump	log.c	/^void mg_hexdump(const void *buf, size_t len) {$/;"	f
mg_hfn	http.c	/^static void mg_hfn(struct mg_connection *c, int ev, void *ev_data) {$/;"	f	file:
mg_hmac_sha256	sha256.c	/^void mg_hmac_sha256(uint8_t dst[32], uint8_t *key, size_t keysz, uint8_t *data,$/;"	f
mg_htonl	util.h	24;"	d
mg_htons	util.h	23;"	d
mg_http_bauth	http.c	/^void mg_http_bauth(struct mg_connection *c, const char *user,$/;"	f
mg_http_connect	http.c	/^struct mg_connection *mg_http_connect(struct mg_mgr *mgr, const char *url,$/;"	f
mg_http_creds	http.c	/^void mg_http_creds(struct mg_http_message *hm, char *user, size_t userlen,$/;"	f
mg_http_etag	http.c	/^char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {$/;"	f
mg_http_get_header	http.c	/^struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {$/;"	f
mg_http_get_header_var	http.c	/^struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {$/;"	f
mg_http_get_request_len	http.c	/^int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {$/;"	f
mg_http_get_var	http.c	/^int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,$/;"	f
mg_http_header	http.h	/^struct mg_http_header {$/;"	s
mg_http_listen	http.c	/^struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,$/;"	f
mg_http_match_uri	http.c	/^bool mg_http_match_uri(const struct mg_http_message *hm, const char *glob) {$/;"	f
mg_http_message	http.h	/^struct mg_http_message {$/;"	s
mg_http_next_multipart	http.c	/^size_t mg_http_next_multipart(struct mg_str body, size_t ofs,$/;"	f
mg_http_parse	http.c	/^int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {$/;"	f
mg_http_parse_headers	http.c	/^static bool mg_http_parse_headers(const char *s, const char *end,$/;"	f	file:
mg_http_part	http.h	/^struct mg_http_part {$/;"	s
mg_http_printf_chunk	http.c	/^void mg_http_printf_chunk(struct mg_connection *c, const char *fmt, ...) {$/;"	f
mg_http_reply	http.c	/^void mg_http_reply(struct mg_connection *c, int code, const char *headers,$/;"	f
mg_http_serve_dir	http.c	/^void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,$/;"	f
mg_http_serve_file	http.c	/^void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,$/;"	f
mg_http_serve_opts	http.h	/^struct mg_http_serve_opts {$/;"	s
mg_http_serve_ssi	ssi.c	/^void mg_http_serve_ssi(struct mg_connection *c, const char *root,$/;"	f
mg_http_status	http.c	/^int mg_http_status(const struct mg_http_message *hm) {$/;"	f
mg_http_status_code_str	http.c	/^static const char *mg_http_status_code_str(int status_code) {$/;"	f	file:
mg_http_upload	http.c	/^long mg_http_upload(struct mg_connection *c, struct mg_http_message *hm,$/;"	f
mg_http_var	http.c	/^struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {$/;"	f
mg_http_vprintf_chunk	http.c	/^static void mg_http_vprintf_chunk(struct mg_connection *c, const char *fmt,$/;"	f	file:
mg_http_write_chunk	http.c	/^void mg_http_write_chunk(struct mg_connection *c, const char *buf, size_t len) {$/;"	f
mg_io_recv	net.c	/^long mg_io_recv(struct mg_connection *c, void *buf, size_t len) {$/;"	f
mg_io_send	net_builtin.c	/^long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {$/;"	f
mg_io_send	sock.c	/^long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {$/;"	f
mg_iobuf	iobuf.h	/^struct mg_iobuf {$/;"	s
mg_iobuf_add	iobuf.c	/^size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,$/;"	f
mg_iobuf_del	iobuf.c	/^size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {$/;"	f
mg_iobuf_free	iobuf.c	/^void mg_iobuf_free(struct mg_iobuf *io) {$/;"	f
mg_iobuf_init	iobuf.c	/^int mg_iobuf_init(struct mg_iobuf *io, size_t size, size_t align) {$/;"	f
mg_iobuf_resize	iobuf.c	/^int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {$/;"	f
mg_iotest	sock.c	/^static void mg_iotest(struct mg_mgr *mgr, int ms) {$/;"	f	file:
mg_is_url_safe	http.c	/^static bool mg_is_url_safe(int c) {$/;"	f	file:
mg_json_get	json.c	/^int mg_json_get(struct mg_str json, const char *path, int *toklen) {$/;"	f
mg_json_get_b64	json.c	/^char *mg_json_get_b64(struct mg_str json, const char *path, int *slen) {$/;"	f
mg_json_get_bool	json.c	/^bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {$/;"	f
mg_json_get_hex	json.c	/^char *mg_json_get_hex(struct mg_str json, const char *path, int *slen) {$/;"	f
mg_json_get_long	json.c	/^long mg_json_get_long(struct mg_str json, const char *path, long dflt) {$/;"	f
mg_json_get_num	json.c	/^bool mg_json_get_num(struct mg_str json, const char *path, double *v) {$/;"	f
mg_json_get_str	json.c	/^char *mg_json_get_str(struct mg_str json, const char *path) {$/;"	f
mg_json_next	json.c	/^size_t mg_json_next(struct mg_str obj, size_t ofs, struct mg_str *key,$/;"	f
mg_json_unescape	json.c	/^bool mg_json_unescape(struct mg_str s, char *to, size_t n) {$/;"	f
mg_listen	net.c	/^struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,$/;"	f
mg_lld	fmt.c	/^static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {$/;"	f	file:
mg_load_cert	tls_mbed.c	/^static bool mg_load_cert(struct mg_str str, mbedtls_x509_crt *p) {$/;"	f	file:
mg_load_key	tls_mbed.c	/^static bool mg_load_key(struct mg_str str, mbedtls_pk_context *p) {$/;"	f	file:
mg_log	log.c	/^void mg_log(const char *fmt, ...) {$/;"	f
mg_log_level	log.c	/^int mg_log_level = MG_LL_INFO;$/;"	v
mg_log_prefix	log.c	/^void mg_log_prefix(int level, const char *file, int line, const char *fname) {$/;"	f
mg_log_set	log.h	16;"	d
mg_log_set_fn	log.c	/^void mg_log_set_fn(mg_pfn_t fn, void *param) {$/;"	f
mg_lower	str.c	/^int mg_lower(const char *s) {$/;"	f
mg_match	str.c	/^bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {$/;"	f
mg_mbed_rng	tls_mbed.c	/^static int mg_mbed_rng(void *ctx, unsigned char *buf, size_t len) {$/;"	f	file:
mg_md5_ctx	md5.h	/^} mg_md5_ctx;$/;"	t	typeref:struct:__anon1
mg_md5_final	md5.c	/^void mg_md5_final(mg_md5_ctx *ctx, unsigned char digest[16]) {$/;"	f
mg_md5_init	md5.c	/^void mg_md5_init(mg_md5_ctx *ctx) {$/;"	f
mg_md5_transform	md5.c	/^static void mg_md5_transform(uint32_t buf[4], uint32_t const in[16]) {$/;"	f	file:
mg_md5_update	md5.c	/^void mg_md5_update(mg_md5_ctx *ctx, const unsigned char *buf, size_t len) {$/;"	f
mg_mgr	net.h	/^struct mg_mgr {$/;"	s
mg_mgr_free	net.c	/^void mg_mgr_free(struct mg_mgr *mgr) {$/;"	f
mg_mgr_init	net.c	/^void mg_mgr_init(struct mg_mgr *mgr) {$/;"	f
mg_mgr_poll	net_builtin.c	/^void mg_mgr_poll(struct mg_mgr *mgr, int ms) {$/;"	f
mg_mgr_poll	sock.c	/^void mg_mgr_poll(struct mg_mgr *mgr, int ms) {$/;"	f
mg_millis	util.c	/^uint64_t mg_millis(void) {$/;"	f
mg_mkdir	arch_freertos.h	/^static inline int mg_mkdir(const char *path, mode_t mode) {$/;"	f
mg_mkdir	arch_rtx.h	/^static inline int mg_mkdir(const char *path, mode_t mode) {$/;"	f
mg_mprintf	printf.c	/^char *mg_mprintf(const char *fmt, ...) {$/;"	f
mg_ncasecmp	str.c	/^int mg_ncasecmp(const char *s1, const char *s2, size_t len) {$/;"	f
mg_nce	str.c	/^static size_t mg_nce(const char *s, size_t n, size_t ofs, size_t *koff,$/;"	f	file:
mg_net_recv	tls_mbed.c	/^static int mg_net_recv(void *ctx, unsigned char *buf, size_t len) {$/;"	f	file:
mg_net_send	tls_mbed.c	/^static int mg_net_send(void *ctx, const unsigned char *buf, size_t len) {$/;"	f	file:
mg_ntohl	util.c	/^uint32_t mg_ntohl(uint32_t net) {$/;"	f
mg_ntohs	util.c	/^uint16_t mg_ntohs(uint16_t net) {$/;"	f
mg_open_listener	net_builtin.c	/^bool mg_open_listener(struct mg_connection *c, const char *url) {$/;"	f
mg_open_listener	sock.c	/^bool mg_open_listener(struct mg_connection *c, const char *url) {$/;"	f
mg_ota_begin	ota_dummy.c	/^bool mg_ota_begin(size_t new_firmware_size) {$/;"	f
mg_ota_begin	ota_flash.c	/^bool mg_ota_begin(size_t new_firmware_size) {$/;"	f
mg_ota_boot	ota_dummy.c	/^MG_IRAM void mg_ota_boot(void) {$/;"	f
mg_ota_boot	ota_flash.c	/^MG_IRAM void mg_ota_boot(void) {$/;"	f
mg_ota_commit	ota_dummy.c	/^bool mg_ota_commit(void) {$/;"	f
mg_ota_commit	ota_flash.c	/^MG_IRAM bool mg_ota_commit(void) {$/;"	f
mg_ota_crc32	ota_dummy.c	/^uint32_t mg_ota_crc32(int fw) {$/;"	f
mg_ota_crc32	ota_flash.c	/^uint32_t mg_ota_crc32(int fw) {$/;"	f
mg_ota_end	ota_dummy.c	/^bool mg_ota_end(void) {$/;"	f
mg_ota_end	ota_flash.c	/^bool mg_ota_end(void) {$/;"	f
mg_ota_rollback	ota_dummy.c	/^bool mg_ota_rollback(void) {$/;"	f
mg_ota_rollback	ota_flash.c	/^bool mg_ota_rollback(void) {$/;"	f
mg_ota_size	ota_dummy.c	/^size_t mg_ota_size(int fw) {$/;"	f
mg_ota_size	ota_flash.c	/^size_t mg_ota_size(int fw) {$/;"	f
mg_ota_status	ota_dummy.c	/^int mg_ota_status(int fw) {$/;"	f
mg_ota_status	ota_flash.c	/^int mg_ota_status(int fw) {$/;"	f
mg_ota_timestamp	ota_dummy.c	/^uint32_t mg_ota_timestamp(int fw) {$/;"	f
mg_ota_timestamp	ota_flash.c	/^uint32_t mg_ota_timestamp(int fw) {$/;"	f
mg_ota_write	ota_dummy.c	/^bool mg_ota_write(const void *buf, size_t len) {$/;"	f
mg_ota_write	ota_flash.c	/^bool mg_ota_write(const void *buf, size_t len) {$/;"	f
mg_otadata	ota_flash.c	/^MG_IRAM static struct mg_otadata mg_otadata(int fw) {$/;"	f	file:
mg_otadata	ota_flash.c	/^struct mg_otadata {$/;"	s	file:
mg_parse_pem	tls_builtin.c	/^static int mg_parse_pem(const struct mg_str pem, const struct mg_str label,$/;"	f	file:
mg_pass_string	json.c	/^static int mg_pass_string(const char *s, int len) {$/;"	f	file:
mg_path_is_sane	str.c	/^bool mg_path_is_sane(const char *path) {$/;"	f
mg_pfn_iobuf	printf.c	/^void mg_pfn_iobuf(char ch, void *param) {$/;"	f
mg_pfn_iobuf_private	printf.c	/^static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {$/;"	f	file:
mg_pfn_stdout	printf.c	/^void mg_pfn_stdout(char c, void *param) {$/;"	f
mg_pfn_t	fmt.h	/^typedef void (*mg_pfn_t)(char, void *);                  \/\/ Output function$/;"	t
mg_pm_t	fmt.h	/^typedef size_t (*mg_pm_t)(mg_pfn_t, void *, va_list *);  \/\/ %M printer$/;"	t
mg_print_base64	printf.c	/^size_t mg_print_base64(void (*out)(char, void *), void *arg, va_list *ap) {$/;"	f
mg_print_esc	printf.c	/^size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {$/;"	f
mg_print_hex	printf.c	/^size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {$/;"	f
mg_print_ip	printf.c	/^size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {$/;"	f
mg_print_ip4	printf.c	/^size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {$/;"	f
mg_print_ip6	printf.c	/^size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {$/;"	f
mg_print_ip_port	printf.c	/^size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {$/;"	f
mg_print_mac	printf.c	/^size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {$/;"	f
mg_printf	net.c	/^size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {$/;"	f
mg_profitem	profile.h	/^struct mg_profitem {$/;"	s
mg_putchar_iobuf_static	printf.c	/^static void mg_putchar_iobuf_static(char ch, void *param) {$/;"	f	file:
mg_queue	queue.h	/^struct mg_queue {$/;"	s
mg_queue_add	queue.c	/^void mg_queue_add(struct mg_queue *q, size_t len) {$/;"	f
mg_queue_book	queue.c	/^size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {$/;"	f
mg_queue_del	queue.c	/^void mg_queue_del(struct mg_queue *q, size_t len) {$/;"	f
mg_queue_init	queue.c	/^void mg_queue_init(struct mg_queue *q, char *buf, size_t size) {$/;"	f
mg_queue_next	queue.c	/^size_t mg_queue_next(struct mg_queue *q, char **buf) {$/;"	f
mg_queue_printf	printf.c	/^size_t mg_queue_printf(struct mg_queue *q, const char *fmt, ...) {$/;"	f
mg_queue_read_len	queue.c	/^static size_t mg_queue_read_len(struct mg_queue *q) {$/;"	f	file:
mg_queue_vprintf	printf.c	/^size_t mg_queue_vprintf(struct mg_queue *q, const char *fmt, va_list *ap) {$/;"	f
mg_queue_write_len	queue.c	/^static void mg_queue_write_len(struct mg_queue *q, size_t len) {$/;"	f	file:
mg_random	util.c	/^void mg_random(void *buf, size_t len) {$/;"	f
mg_random_str	util.c	/^char *mg_random_str(char *buf, size_t len) {$/;"	f
mg_resolve	dns.c	/^void mg_resolve(struct mg_connection *c, const char *url) {$/;"	f
mg_resolve_cancel	dns.c	/^void mg_resolve_cancel(struct mg_connection *c) {$/;"	f
mg_rpc	rpc.h	/^struct mg_rpc {$/;"	s
mg_rpc_add	rpc.c	/^void mg_rpc_add(struct mg_rpc **head, struct mg_str method,$/;"	f
mg_rpc_call	rpc.c	/^static void mg_rpc_call(struct mg_rpc_req *r, struct mg_str method) {$/;"	f	file:
mg_rpc_del	rpc.c	/^void mg_rpc_del(struct mg_rpc **head, void (*fn)(struct mg_rpc_req *)) {$/;"	f
mg_rpc_err	rpc.c	/^void mg_rpc_err(struct mg_rpc_req *r, int code, const char *fmt, ...) {$/;"	f
mg_rpc_list	rpc.c	/^void mg_rpc_list(struct mg_rpc_req *r) {$/;"	f
mg_rpc_ok	rpc.c	/^void mg_rpc_ok(struct mg_rpc_req *r, const char *fmt, ...) {$/;"	f
mg_rpc_process	rpc.c	/^void mg_rpc_process(struct mg_rpc_req *r) {$/;"	f
mg_rpc_req	rpc.h	/^struct mg_rpc_req {$/;"	s
mg_rpc_verr	rpc.c	/^void mg_rpc_verr(struct mg_rpc_req *r, int code, const char *fmt, va_list *ap) {$/;"	f
mg_rpc_vok	rpc.c	/^void mg_rpc_vok(struct mg_rpc_req *r, const char *fmt, va_list *ap) {$/;"	f
mg_send	net_builtin.c	/^bool mg_send(struct mg_connection *c, const void *buf, size_t len) {$/;"	f
mg_send	sock.c	/^bool mg_send(struct mg_connection *c, const void *buf, size_t len) {$/;"	f
mg_sendnsreq	dns.c	/^static void mg_sendnsreq(struct mg_connection *c, struct mg_str *name, int ms,$/;"	f	file:
mg_set_non_blocking_mode	sock.c	/^static void mg_set_non_blocking_mode(MG_SOCKET_TYPE fd) {$/;"	f	file:
mg_sha1_ctx	sha1.h	/^} mg_sha1_ctx;$/;"	t	typeref:struct:__anon10
mg_sha1_final	sha1.c	/^void mg_sha1_final(unsigned char digest[20], mg_sha1_ctx *context) {$/;"	f
mg_sha1_init	sha1.c	/^void mg_sha1_init(mg_sha1_ctx *context) {$/;"	f
mg_sha1_transform	sha1.c	/^static void mg_sha1_transform(uint32_t state[5],$/;"	f	file:
mg_sha1_update	sha1.c	/^void mg_sha1_update(mg_sha1_ctx *context, const unsigned char *data,$/;"	f
mg_sha256_chunk	sha256.c	/^static void mg_sha256_chunk(mg_sha256_ctx *ctx) {$/;"	f	file:
mg_sha256_ctx	sha256.h	/^} mg_sha256_ctx;$/;"	t	typeref:struct:__anon5
mg_sha256_final	sha256.c	/^void mg_sha256_final(unsigned char digest[32], mg_sha256_ctx *ctx) {$/;"	f
mg_sha256_init	sha256.c	/^void mg_sha256_init(mg_sha256_ctx *ctx) {$/;"	f
mg_sha256_k	sha256.c	/^static const uint32_t mg_sha256_k[64] = {$/;"	v	file:
mg_sha256_update	sha256.c	/^void mg_sha256_update(mg_sha256_ctx *ctx, const unsigned char *data,$/;"	f
mg_snprintf	printf.c	/^size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {$/;"	f
mg_sntp_connect	sntp.c	/^struct mg_connection *mg_sntp_connect(struct mg_mgr *mgr, const char *url,$/;"	f
mg_sntp_parse	sntp.c	/^int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {$/;"	f
mg_sntp_request	sntp.c	/^void mg_sntp_request(struct mg_connection *c) {$/;"	f
mg_socketpair	sock.c	/^static bool mg_socketpair(MG_SOCKET_TYPE sp[2], union usa usa[2]) {$/;"	f	file:
mg_split	str.c	/^bool mg_split(struct mg_str *s, struct mg_str *k, struct mg_str *v, char sep) {$/;"	f
mg_ssi	ssi.c	/^static char *mg_ssi(const char *path, const char *root, int depth) {$/;"	f	file:
mg_str	str.h	/^struct mg_str {$/;"	s
mg_str	str.h	17;"	d
mg_str_n	str.c	/^struct mg_str mg_str_n(const char *s, size_t n) {$/;"	f
mg_str_s	str.c	/^struct mg_str mg_str_s(const char *s) {$/;"	f
mg_strcmp	str.c	/^int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {$/;"	f
mg_strdup	str.c	/^struct mg_str mg_strdup(const struct mg_str s) {$/;"	f
mg_strstr	str.c	/^const char *mg_strstr(const struct mg_str haystack,$/;"	f
mg_strstrip	str.c	/^struct mg_str mg_strstrip(struct mg_str s) {$/;"	f
mg_tcpip_driver	net_builtin.h	/^struct mg_tcpip_driver {$/;"	s
mg_tcpip_driver_cmsis	drivers/cmsis.c	/^struct mg_tcpip_driver mg_tcpip_driver_cmsis = {cmsis_init, cmsis_tx, NULL,$/;"	v	typeref:struct:mg_tcpip_driver
mg_tcpip_driver_imxrt	drivers/imxrt.c	/^struct mg_tcpip_driver mg_tcpip_driver_imxrt = {mg_tcpip_driver_imxrt_init,$/;"	v	typeref:struct:mg_tcpip_driver
mg_tcpip_driver_imxrt_data	drivers/imxrt.h	/^struct mg_tcpip_driver_imxrt_data {$/;"	s
mg_tcpip_driver_imxrt_init	drivers/imxrt.c	/^static bool mg_tcpip_driver_imxrt_init(struct mg_tcpip_if *ifp) {$/;"	f	file:
mg_tcpip_driver_imxrt_tx	drivers/imxrt.c	/^static size_t mg_tcpip_driver_imxrt_tx(const void *buf, size_t len,$/;"	f	file:
mg_tcpip_driver_imxrt_up	drivers/imxrt.c	/^static bool mg_tcpip_driver_imxrt_up(struct mg_tcpip_if *ifp) {$/;"	f	file:
mg_tcpip_driver_same54	drivers/same54.c	/^struct mg_tcpip_driver mg_tcpip_driver_same54 = {$/;"	v	typeref:struct:mg_tcpip_driver
mg_tcpip_driver_same54_data	drivers/same54.h	/^struct mg_tcpip_driver_same54_data {$/;"	s
mg_tcpip_driver_same54_init	drivers/same54.c	/^static bool mg_tcpip_driver_same54_init(struct mg_tcpip_if *ifp) {$/;"	f	file:
mg_tcpip_driver_same54_tx	drivers/same54.c	/^static size_t mg_tcpip_driver_same54_tx(const void *buf, size_t len,$/;"	f	file:
mg_tcpip_driver_same54_up	drivers/same54.c	/^static bool mg_tcpip_driver_same54_up(struct mg_tcpip_if *ifp) {$/;"	f	file:
mg_tcpip_driver_stm32f	drivers/stm32f.c	/^struct mg_tcpip_driver mg_tcpip_driver_stm32f = {$/;"	v	typeref:struct:mg_tcpip_driver
mg_tcpip_driver_stm32f_data	drivers/stm32f.h	/^struct mg_tcpip_driver_stm32f_data {$/;"	s
mg_tcpip_driver_stm32f_init	drivers/stm32f.c	/^static bool mg_tcpip_driver_stm32f_init(struct mg_tcpip_if *ifp) {$/;"	f	file:
mg_tcpip_driver_stm32f_tx	drivers/stm32f.c	/^static size_t mg_tcpip_driver_stm32f_tx(const void *buf, size_t len,$/;"	f	file:
mg_tcpip_driver_stm32f_up	drivers/stm32f.c	/^static bool mg_tcpip_driver_stm32f_up(struct mg_tcpip_if *ifp) {$/;"	f	file:
mg_tcpip_driver_stm32h	drivers/stm32h.c	/^struct mg_tcpip_driver mg_tcpip_driver_stm32h = {$/;"	v	typeref:struct:mg_tcpip_driver
mg_tcpip_driver_stm32h_data	drivers/stm32h.h	/^struct mg_tcpip_driver_stm32h_data {$/;"	s
mg_tcpip_driver_stm32h_init	drivers/stm32h.c	/^static bool mg_tcpip_driver_stm32h_init(struct mg_tcpip_if *ifp) {$/;"	f	file:
mg_tcpip_driver_stm32h_tx	drivers/stm32h.c	/^static size_t mg_tcpip_driver_stm32h_tx(const void *buf, size_t len,$/;"	f	file:
mg_tcpip_driver_stm32h_up	drivers/stm32h.c	/^static bool mg_tcpip_driver_stm32h_up(struct mg_tcpip_if *ifp) {$/;"	f	file:
mg_tcpip_driver_tm4c	drivers/tm4c.c	/^struct mg_tcpip_driver mg_tcpip_driver_tm4c = {mg_tcpip_driver_tm4c_init,$/;"	v	typeref:struct:mg_tcpip_driver
mg_tcpip_driver_tm4c_data	drivers/tm4c.h	/^struct mg_tcpip_driver_tm4c_data {$/;"	s
mg_tcpip_driver_tm4c_init	drivers/tm4c.c	/^static bool mg_tcpip_driver_tm4c_init(struct mg_tcpip_if *ifp) {$/;"	f	file:
mg_tcpip_driver_tm4c_tx	drivers/tm4c.c	/^static size_t mg_tcpip_driver_tm4c_tx(const void *buf, size_t len,$/;"	f	file:
mg_tcpip_driver_tm4c_up	drivers/tm4c.c	/^static bool mg_tcpip_driver_tm4c_up(struct mg_tcpip_if *ifp) {$/;"	f	file:
mg_tcpip_driver_w5500	drivers/w5500.c	/^struct mg_tcpip_driver mg_tcpip_driver_w5500 = {w5500_init, w5500_tx, w5500_rx, w5500_up};$/;"	v	typeref:struct:mg_tcpip_driver
mg_tcpip_free	net_builtin.c	/^void mg_tcpip_free(struct mg_tcpip_if *ifp) {$/;"	f
mg_tcpip_if	net_builtin.h	/^struct mg_tcpip_if {$/;"	s
mg_tcpip_init	net_builtin.c	/^void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {$/;"	f
mg_tcpip_poll	net_builtin.c	/^static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t uptime_ms) {$/;"	f	file:
mg_tcpip_qwrite	net_builtin.c	/^void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {$/;"	f
mg_tcpip_rx	net_builtin.c	/^static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {$/;"	f	file:
mg_tcpip_spi	net_builtin.h	/^struct mg_tcpip_spi {$/;"	s
mg_timegm	fs_fat.c	/^static time_t mg_timegm(const struct tm *t) {$/;"	f	file:
mg_timer	timer.h	/^struct mg_timer {$/;"	s
mg_timer_add	net.c	/^struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,$/;"	f
mg_timer_expired	timer.c	/^bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {$/;"	f
mg_timer_free	timer.c	/^void mg_timer_free(struct mg_timer **head, struct mg_timer *t) {$/;"	f
mg_timer_init	timer.c	/^void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,$/;"	f
mg_timer_poll	timer.c	/^void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {$/;"	f
mg_tls	tls_mbed.h	/^struct mg_tls {$/;"	s
mg_tls	tls_openssl.h	/^struct mg_tls {$/;"	s
mg_tls_client_change_cipher	tls_builtin.c	/^static int mg_tls_client_change_cipher(struct mg_connection *c) {$/;"	f	file:
mg_tls_client_finish	tls_builtin.c	/^static int mg_tls_client_finish(struct mg_connection *c) {$/;"	f	file:
mg_tls_client_hello	tls_builtin.c	/^static int mg_tls_client_hello(struct mg_connection *c) {$/;"	f	file:
mg_tls_ctx	tls_mbed.h	/^struct mg_tls_ctx {$/;"	s
mg_tls_ctx_free	tls_builtin.c	/^void mg_tls_ctx_free(struct mg_mgr *mgr) {$/;"	f
mg_tls_ctx_free	tls_dummy.c	/^void mg_tls_ctx_free(struct mg_mgr *mgr) {$/;"	f
mg_tls_ctx_free	tls_mbed.c	/^void mg_tls_ctx_free(struct mg_mgr *mgr) {$/;"	f
mg_tls_ctx_free	tls_openssl.c	/^void mg_tls_ctx_free(struct mg_mgr *mgr) {$/;"	f
mg_tls_ctx_init	tls_builtin.c	/^void mg_tls_ctx_init(struct mg_mgr *mgr) {$/;"	f
mg_tls_ctx_init	tls_dummy.c	/^void mg_tls_ctx_init(struct mg_mgr *mgr) {$/;"	f
mg_tls_ctx_init	tls_mbed.c	/^void mg_tls_ctx_init(struct mg_mgr *mgr) {$/;"	f
mg_tls_ctx_init	tls_openssl.c	/^void mg_tls_ctx_init(struct mg_mgr *mgr) {$/;"	f
mg_tls_derive_secret	tls_builtin.c	/^static void mg_tls_derive_secret(const char *label, uint8_t *key, size_t keysz,$/;"	f	file:
mg_tls_drop_packet	tls_builtin.c	/^static void mg_tls_drop_packet(struct mg_iobuf *rio) {$/;"	f	file:
mg_tls_encrypt	tls_builtin.c	/^static void mg_tls_encrypt(struct mg_connection *c, const uint8_t *msg,$/;"	f	file:
mg_tls_err	tls_openssl.c	/^static int mg_tls_err(struct mg_connection *c, struct mg_tls *tls, int res) {$/;"	f	file:
mg_tls_free	tls_builtin.c	/^void mg_tls_free(struct mg_connection *c) {$/;"	f
mg_tls_free	tls_dummy.c	/^void mg_tls_free(struct mg_connection *c) {$/;"	f
mg_tls_free	tls_mbed.c	/^void mg_tls_free(struct mg_connection *c) {$/;"	f
mg_tls_free	tls_openssl.c	/^void mg_tls_free(struct mg_connection *c) {$/;"	f
mg_tls_generate_application_keys	tls_builtin.c	/^static void mg_tls_generate_application_keys(struct mg_connection *c) {$/;"	f	file:
mg_tls_generate_handshake_keys	tls_builtin.c	/^static void mg_tls_generate_handshake_keys(struct mg_connection *c) {$/;"	f	file:
mg_tls_got_msg	tls_builtin.c	/^static bool mg_tls_got_msg(struct mg_connection *c) {$/;"	f	file:
mg_tls_handshake	tls_builtin.c	/^void mg_tls_handshake(struct mg_connection *c) {$/;"	f
mg_tls_handshake	tls_dummy.c	/^void mg_tls_handshake(struct mg_connection *c) {$/;"	f
mg_tls_handshake	tls_mbed.c	/^void mg_tls_handshake(struct mg_connection *c) {$/;"	f
mg_tls_handshake	tls_openssl.c	/^void mg_tls_handshake(struct mg_connection *c) {$/;"	f
mg_tls_hexdump	tls_builtin.c	/^static void mg_tls_hexdump(const char *msg, uint8_t *buf, size_t bufsz) {$/;"	f	file:
mg_tls_hs_state	tls_builtin.c	/^enum mg_tls_hs_state {$/;"	g	file:
mg_tls_init	tls_builtin.c	/^void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {$/;"	f
mg_tls_init	tls_dummy.c	/^void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {$/;"	f
mg_tls_init	tls_mbed.c	/^void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {$/;"	f
mg_tls_init	tls_openssl.c	/^void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {$/;"	f
mg_tls_opts	tls.h	/^struct mg_tls_opts {$/;"	s
mg_tls_pending	tls_builtin.c	/^size_t mg_tls_pending(struct mg_connection *c) {$/;"	f
mg_tls_pending	tls_dummy.c	/^size_t mg_tls_pending(struct mg_connection *c) {$/;"	f
mg_tls_pending	tls_mbed.c	/^size_t mg_tls_pending(struct mg_connection *c) {$/;"	f
mg_tls_pending	tls_openssl.c	/^size_t mg_tls_pending(struct mg_connection *c) {$/;"	f
mg_tls_recv	tls_builtin.c	/^long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {$/;"	f
mg_tls_recv	tls_dummy.c	/^long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {$/;"	f
mg_tls_recv	tls_mbed.c	/^long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {$/;"	f
mg_tls_recv	tls_openssl.c	/^long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {$/;"	f
mg_tls_recv_decrypt	tls_builtin.c	/^static int mg_tls_recv_decrypt(struct mg_connection *c, void *buf,$/;"	f	file:
mg_tls_send	tls_builtin.c	/^long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {$/;"	f
mg_tls_send	tls_dummy.c	/^long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {$/;"	f
mg_tls_send	tls_mbed.c	/^long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {$/;"	f
mg_tls_send	tls_openssl.c	/^long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {$/;"	f
mg_tls_server_cert	tls_builtin.c	/^static void mg_tls_server_cert(struct mg_connection *c) {$/;"	f	file:
mg_tls_server_extensions	tls_builtin.c	/^static void mg_tls_server_extensions(struct mg_connection *c) {$/;"	f	file:
mg_tls_server_finish	tls_builtin.c	/^static void mg_tls_server_finish(struct mg_connection *c) {$/;"	f	file:
mg_tls_server_hello	tls_builtin.c	/^static void mg_tls_server_hello(struct mg_connection *c) {$/;"	f	file:
mg_tls_server_verify_ecdsa	tls_builtin.c	/^static void mg_tls_server_verify_ecdsa(struct mg_connection *c) {$/;"	f	file:
mg_to_size_t	http.c	/^bool mg_to_size_t(struct mg_str str, size_t *val) {$/;"	f
mg_unhex	str.c	/^void mg_unhex(const char *buf, size_t len, unsigned char *to) {$/;"	f
mg_unhex_nimble	str.c	/^static unsigned char mg_unhex_nimble(unsigned char c) {$/;"	f	file:
mg_unhexn	str.c	/^unsigned long mg_unhexn(const char *s, size_t len) {$/;"	f
mg_unlist	fs_packed.c	/^const char *mg_unlist(size_t no) {$/;"	f
mg_unpack	fs_packed.c	/^const char *mg_unpack(const char *path, size_t *size, time_t *mtime) {$/;"	f
mg_unpacked	fs_packed.c	/^struct mg_str mg_unpacked(const char *path) {$/;"	f
mg_url_decode	http.c	/^int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,$/;"	f
mg_url_encode	http.c	/^size_t mg_url_encode(const char *s, size_t sl, char *buf, size_t len) {$/;"	f
mg_url_host	url.c	/^struct mg_str mg_url_host(const char *url) {$/;"	f
mg_url_is_ssl	url.c	/^int mg_url_is_ssl(const char *url) {$/;"	f
mg_url_pass	url.c	/^struct mg_str mg_url_pass(const char *url) {$/;"	f
mg_url_port	url.c	/^unsigned short mg_url_port(const char *url) {$/;"	f
mg_url_uri	url.c	/^const char *mg_url_uri(const char *url) {$/;"	f
mg_url_user	url.c	/^struct mg_str mg_url_user(const char *url) {$/;"	f
mg_v4mapped	net.c	/^static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {$/;"	f	file:
mg_vcasecmp	str.c	/^int mg_vcasecmp(const struct mg_str *str1, const char *str2) {$/;"	f
mg_vcmp	str.c	/^int mg_vcmp(const struct mg_str *s1, const char *s2) {$/;"	f
mg_vmprintf	printf.c	/^char *mg_vmprintf(const char *fmt, va_list *ap) {$/;"	f
mg_vprintf	net.c	/^size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {$/;"	f
mg_vsnprintf	printf.c	/^size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {$/;"	f
mg_vxprintf	fmt.c	/^size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,$/;"	f
mg_wakeup	sock.c	/^bool mg_wakeup(struct mg_mgr *mgr, unsigned long conn_id, const void *buf,$/;"	f
mg_wakeup_init	sock.c	/^bool mg_wakeup_init(struct mg_mgr *mgr) {$/;"	f
mg_wrapfd	net.c	/^struct mg_connection *mg_wrapfd(struct mg_mgr *mgr, int fd,$/;"	f
mg_ws_cb	ws.c	/^static void mg_ws_cb(struct mg_connection *c, int ev, void *ev_data) {$/;"	f	file:
mg_ws_client_handshake	ws.c	/^static bool mg_ws_client_handshake(struct mg_connection *c) {$/;"	f	file:
mg_ws_connect	ws.c	/^struct mg_connection *mg_ws_connect(struct mg_mgr *mgr, const char *url,$/;"	f
mg_ws_mask	ws.c	/^static void mg_ws_mask(struct mg_connection *c, size_t len) {$/;"	f	file:
mg_ws_message	ws.h	/^struct mg_ws_message {$/;"	s
mg_ws_printf	ws.c	/^size_t mg_ws_printf(struct mg_connection *c, int op, const char *fmt, ...) {$/;"	f
mg_ws_send	ws.c	/^size_t mg_ws_send(struct mg_connection *c, const void *buf, size_t len,$/;"	f
mg_ws_upgrade	ws.c	/^void mg_ws_upgrade(struct mg_connection *c, struct mg_http_message *hm,$/;"	f
mg_ws_vprintf	ws.c	/^size_t mg_ws_vprintf(struct mg_connection *c, int op, const char *fmt,$/;"	f
mg_ws_wrap	ws.c	/^size_t mg_ws_wrap(struct mg_connection *c, size_t len, int op) {$/;"	f
mg_xprintf	fmt.c	/^size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {$/;"	f
mgr	net.h	/^  struct mg_mgr *mgr;          \/\/ Our container$/;"	m	struct:mg_connection	typeref:struct:mg_connection::mg_mgr
mgr	net_builtin.h	/^  struct mg_mgr *mgr;              \/\/ Mongoose event manager$/;"	m	struct:mg_tcpip_if	typeref:struct:mg_tcpip_if::mg_mgr
mime_types	http.h	/^  const char *mime_types;     \/\/ Extra mime types, ext1=type1,ext2=type2,..$/;"	m	struct:mg_http_serve_opts
mkd	fs.h	/^  bool (*mkd)(const char *path);                        \/\/ Create directory$/;"	m	struct:mg_fs
mkdir	arch_freertos.h	42;"	d
mkdir	arch_rtx.h	28;"	d
mkdir	arch_win32.h	98;"	d
mkhdr	ws.c	/^static size_t mkhdr(size_t len, int op, bool is_client, uint8_t *buf) {$/;"	f	file:
mko_aes_gcm_h	tls_aes128.h	249;"	d
mkpay	net_builtin.c	/^static void mkpay(struct pkt *pkt, void *p) {$/;"	f	file:
mmod_fast	tls_uecc.c	/^  void (*mmod_fast)(uECC_word_t *result, uECC_word_t *product);$/;"	m	struct:uECC_Curve_t	file:
mod_sqrt	tls_uecc.c	/^  void (*mod_sqrt)(uECC_word_t *a, uECC_Curve curve);$/;"	m	struct:uECC_Curve_t	file:
mod_sqrt_default	tls_uecc.c	/^static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {$/;"	f	file:
mod_sqrt_secp224r1	tls_uecc.c	/^static void mod_sqrt_secp224r1(uECC_word_t *a, uECC_Curve curve) {$/;"	f	file:
mod_sqrt_secp224r1_rm	tls_uecc.c	/^static void mod_sqrt_secp224r1_rm(uECC_word_t *d2, uECC_word_t *e2,$/;"	f	file:
mod_sqrt_secp224r1_rp	tls_uecc.c	/^static void mod_sqrt_secp224r1_rp(uECC_word_t *d1, uECC_word_t *e1,$/;"	f	file:
mod_sqrt_secp224r1_rs	tls_uecc.c	/^static void mod_sqrt_secp224r1_rs(uECC_word_t *d1, uECC_word_t *e1,$/;"	f	file:
mod_sqrt_secp224r1_rss	tls_uecc.c	/^static void mod_sqrt_secp224r1_rss(uECC_word_t *d1, uECC_word_t *e1,$/;"	f	file:
mode	tls_aes128.h	/^  int mode;             \/\/ cipher direction: encrypt\/decrypt$/;"	m	struct:__anon13
mode	tls_aes128.h	/^  int mode;          \/\/ 1 for Encryption, 0 for Decryption$/;"	m	struct:__anon12
mode_t	arch_freertos.h	17;"	d
mode_t	arch_rtx.h	27;"	d
mqtt_id	net.h	/^  uint16_t mqtt_id;             \/\/ MQTT IDs for pub\/sub$/;"	m	struct:mg_mgr
mtu	net_builtin.h	/^  uint16_t mtu;                    \/\/ Interface MTU$/;"	m	struct:mg_tcpip_if
mul	tls_builtin.c	/^static void mul(fe out, const fe a, const fe b, unsigned nb) {$/;"	f	file:
mul1	tls_builtin.c	/^static void mul1(fe out, const fe a) {$/;"	f	file:
mul2add	tls_uecc.c	/^static void mul2add(uECC_word_t a, uECC_word_t b, uECC_word_t *r0,$/;"	f	file:
muladd	tls_uecc.c	/^static void muladd(uECC_word_t a, uECC_word_t b, uECC_word_t *r0,$/;"	f	file:
mv	fs.h	/^  bool (*mv)(const char *from, const char *to);         \/\/ Rename file$/;"	m	struct:mg_fs
n	tls_uecc.c	/^  uECC_word_t n[uECC_MAX_WORDS];$/;"	m	struct:uECC_Curve_t	file:
name	dns.h	/^  char name[256];       \/\/ Host name$/;"	m	struct:mg_dns_message
name	http.h	/^  struct mg_str name;      \/\/ Form field name$/;"	m	struct:mg_http_part	typeref:struct:mg_http_part::mg_str
name	http.h	/^  struct mg_str name;   \/\/ Header name$/;"	m	struct:mg_http_header	typeref:struct:mg_http_header::mg_str
name	profile.h	/^  const char *name;    \/\/ Event name$/;"	m	struct:mg_profitem
name	tls.h	/^  struct mg_str name;  \/\/ If not empty, enable host name verification$/;"	m	struct:mg_tls_opts	typeref:struct:mg_tls_opts::mg_str
ndrop	net_builtin.h	/^  volatile uint32_t ndrop;      \/\/ Number of received, but dropped frames$/;"	m	struct:mg_tcpip_if
nerr	net_builtin.h	/^  volatile uint32_t nerr;       \/\/ Number of driver errors$/;"	m	struct:mg_tcpip_if
next	dns.c	/^  struct dns_data *next;$/;"	m	struct:dns_data	typeref:struct:dns_data::dns_data	file:
next	net.h	/^  struct mg_connection *next;  \/\/ Linkage in struct mg_mgr :: connections$/;"	m	struct:mg_connection	typeref:struct:mg_connection::mg_connection
next	rpc.h	/^  struct mg_rpc *next;              \/\/ Next in list$/;"	m	struct:mg_rpc	typeref:struct:mg_rpc::mg_rpc
next	timer.h	/^  struct mg_timer *next;    \/\/ Linkage$/;"	m	struct:mg_timer	typeref:struct:mg_timer::mg_timer
nextid	net.h	/^  unsigned long nextid;         \/\/ Next connection ID$/;"	m	struct:mg_mgr
nfds_t	arch_win32.h	/^typedef unsigned long nfds_t;$/;"	t
nibble	log.c	/^static unsigned char nibble(unsigned c) {$/;"	f	file:
nlen	dns.h	/^  uint16_t nlen;    \/\/ Name or pointer length$/;"	m	struct:mg_dns_rr
now	net_builtin.h	/^  uint64_t now;                 \/\/ Current time$/;"	m	struct:mg_tcpip_if
nrecv	net_builtin.h	/^  volatile uint32_t nrecv;      \/\/ Number of received frames$/;"	m	struct:mg_tcpip_if
nsent	net_builtin.h	/^  volatile uint32_t nsent;      \/\/ Number of transmitted frames$/;"	m	struct:mg_tcpip_if
num_answers	dns.h	/^  uint16_t num_answers;$/;"	m	struct:mg_dns_header
num_authority_prs	dns.h	/^  uint16_t num_authority_prs;$/;"	m	struct:mg_dns_header
num_bytes	tls_uecc.c	/^  wordcount_t num_bytes;$/;"	m	struct:uECC_Curve_t	file:
num_bytes_secp160r1	tls_uecc.c	766;"	d	file:
num_bytes_secp192r1	tls_uecc.c	767;"	d	file:
num_bytes_secp224r1	tls_uecc.c	768;"	d	file:
num_bytes_secp256k1	tls_uecc.c	770;"	d	file:
num_bytes_secp256r1	tls_uecc.c	769;"	d	file:
num_n_bits	tls_uecc.c	/^  bitcount_t num_n_bits;$/;"	m	struct:uECC_Curve_t	file:
num_other_prs	dns.h	/^  uint16_t num_other_prs;$/;"	m	struct:mg_dns_header
num_questions	dns.h	/^  uint16_t num_questions;$/;"	m	struct:mg_dns_header
num_words	tls_uecc.c	/^  wordcount_t num_words;$/;"	m	struct:uECC_Curve_t	file:
num_words_secp160r1	tls_uecc.c	774;"	d	file:
num_words_secp160r1	tls_uecc.c	786;"	d	file:
num_words_secp160r1	tls_uecc.c	797;"	d	file:
num_words_secp192r1	tls_uecc.c	775;"	d	file:
num_words_secp192r1	tls_uecc.c	787;"	d	file:
num_words_secp192r1	tls_uecc.c	798;"	d	file:
num_words_secp224r1	tls_uecc.c	776;"	d	file:
num_words_secp224r1	tls_uecc.c	788;"	d	file:
num_words_secp224r1	tls_uecc.c	799;"	d	file:
num_words_secp256k1	tls_uecc.c	778;"	d	file:
num_words_secp256k1	tls_uecc.c	790;"	d	file:
num_words_secp256k1	tls_uecc.c	801;"	d	file:
num_words_secp256r1	tls_uecc.c	777;"	d	file:
num_words_secp256r1	tls_uecc.c	789;"	d	file:
num_words_secp256r1	tls_uecc.c	800;"	d	file:
off	net_builtin.c	/^  uint8_t off;     \/\/ Data offset$/;"	m	struct:tcp	file:
omega_mult_secp160r1	tls_uecc.c	/^static void omega_mult_secp160r1(uint32_t *result, const uint32_t *right) {$/;"	f	file:
omega_mult_secp160r1	tls_uecc.c	/^static void omega_mult_secp160r1(uint64_t *result, const uint64_t *right) {$/;"	f	file:
omega_mult_secp160r1	tls_uecc.c	/^static void omega_mult_secp160r1(uint8_t *result, const uint8_t *right) {$/;"	f	file:
omega_mult_secp256k1	tls_uecc.c	/^static void omega_mult_secp256k1(uint32_t *result, const uint32_t *right) {$/;"	f	file:
omega_mult_secp256k1	tls_uecc.c	/^static void omega_mult_secp256k1(uint64_t *result, const uint64_t *right) {$/;"	f	file:
omega_mult_secp256k1	tls_uecc.c	/^static void omega_mult_secp256k1(uint8_t *result, const uint8_t *right) {$/;"	f	file:
onstatechange	net_builtin.c	/^static void onstatechange(struct mg_tcpip_if *ifp) {$/;"	f	file:
op	fs.h	/^  void *(*op)(const char *path, int flags);             \/\/ Open file$/;"	m	struct:mg_fs
op	net_builtin.c	/^  uint16_t op;     \/\/ Operation$/;"	m	struct:arp	file:
op	net_builtin.c	/^  uint8_t op, htype, hlen, hops;$/;"	m	struct:dhcp	file:
opendir	fs_posix.c	/^DIR *opendir(const char *name) {$/;"	f
options	net_builtin.c	/^  uint8_t options[32];$/;"	m	struct:dhcp	file:
opts	http.c	/^  const struct mg_http_serve_opts *opts;$/;"	m	struct:printdirentrydata	typeref:struct:printdirentrydata::mg_http_serve_opts	file:
opts	net_builtin.c	/^  uint8_t opts[3];  \/\/ Options$/;"	m	struct:ip6	file:
p	tls_uecc.c	/^  uECC_word_t p[uECC_MAX_WORDS];$/;"	m	struct:uECC_Curve_t	file:
p_close	fs_posix.c	/^static void p_close(void *fp) {$/;"	f	file:
p_list	fs_posix.c	/^static void p_list(const char *dir, void (*fn)(const char *, void *),$/;"	f	file:
p_list	fs_posix.c	/^static void p_list(const char *path, void (*fn)(const char *, void *),$/;"	f	file:
p_mkdir	fs_posix.c	/^static bool p_mkdir(const char *path) {$/;"	f	file:
p_open	fs_posix.c	/^static void *p_open(const char *path, int flags) {$/;"	f	file:
p_read	fs_posix.c	/^static size_t p_read(void *fd, void *buf, size_t len) {$/;"	f	file:
p_read	fs_posix.c	/^static size_t p_read(void *fp, void *buf, size_t len) {$/;"	f	file:
p_remove	fs_posix.c	/^static bool p_remove(const char *path) {$/;"	f	file:
p_rename	fs_posix.c	/^static bool p_rename(const char *from, const char *to) {$/;"	f	file:
p_seek	fs_posix.c	/^static size_t p_seek(void *fd, size_t offset) {$/;"	f	file:
p_seek	fs_posix.c	/^static size_t p_seek(void *fp, size_t offset) {$/;"	f	file:
p_stat	fs_posix.c	/^static int p_stat(const char *path, size_t *size, time_t *mtime) {$/;"	f	file:
p_write	fs_posix.c	/^static size_t p_write(void *fd, const void *buf, size_t len) {$/;"	f	file:
p_write	fs_posix.c	/^static size_t p_write(void *fp, const void *buf, size_t len) {$/;"	f	file:
packed_close	fs_packed.c	/^static void packed_close(void *fp) {$/;"	f	file:
packed_file	fs_packed.c	/^struct packed_file {$/;"	s	file:
packed_list	fs_packed.c	/^static void packed_list(const char *dir, void (*fn)(const char *, void *),$/;"	f	file:
packed_mkdir	fs_packed.c	/^static bool packed_mkdir(const char *path) {$/;"	f	file:
packed_open	fs_packed.c	/^static void *packed_open(const char *path, int flags) {$/;"	f	file:
packed_read	fs_packed.c	/^static size_t packed_read(void *fd, void *buf, size_t len) {$/;"	f	file:
packed_remove	fs_packed.c	/^static bool packed_remove(const char *path) {$/;"	f	file:
packed_rename	fs_packed.c	/^static bool packed_rename(const char *from, const char *to) {$/;"	f	file:
packed_seek	fs_packed.c	/^static size_t packed_seek(void *fd, size_t offset) {$/;"	f	file:
packed_stat	fs_packed.c	/^static int packed_stat(const char *path, size_t *size, time_t *mtime) {$/;"	f	file:
packed_write	fs_packed.c	/^static size_t packed_write(void *fd, const void *buf, size_t len) {$/;"	f	file:
page404	http.h	/^  const char *page404;        \/\/ Path to the 404 page, or NULL by default$/;"	m	struct:mg_http_serve_opts
parse_net	util.c	/^static int parse_net(const char *spec, uint32_t *net, uint32_t *mask) {$/;"	f	file:
pass	url.c	/^  size_t key, user, pass, host, port, uri, end;$/;"	m	struct:url	file:
pay	net_builtin.c	/^  struct mg_str pay;  \/\/ Payload data$/;"	m	struct:pkt	typeref:struct:pkt::mg_str	file:
period_ms	timer.h	/^  uint64_t period_ms;       \/\/ Timer period in milliseconds$/;"	m	struct:mg_timer
pfn	net.h	/^  mg_event_handler_t pfn;      \/\/ Protocol-specific handler function$/;"	m	struct:mg_connection
pfn	rpc.h	/^  mg_pfn_t pfn;          \/\/ Response printing function$/;"	m	struct:mg_rpc_req
pfn_data	net.h	/^  void *pfn_data;              \/\/ Protocol-specific function parameter$/;"	m	struct:mg_connection
pfn_data	rpc.h	/^  void *pfn_data;        \/\/ Response printing function data$/;"	m	struct:mg_rpc_req
phy_addr	drivers/imxrt.h	/^  uint8_t phy_addr;  \/\/ PHY address$/;"	m	struct:mg_tcpip_driver_imxrt_data
phy_addr	drivers/stm32f.h	/^  uint8_t phy_addr;  \/\/ PHY address$/;"	m	struct:mg_tcpip_driver_stm32f_data
pipe	net.h	/^  MG_SOCKET_TYPE pipe;          \/\/ Socketpair end for mg_wakeup()$/;"	m	struct:mg_mgr
pk	tls_mbed.h	/^  mbedtls_pk_context pk;    \/\/ Private key context$/;"	m	struct:mg_tls
pkt	net_builtin.c	/^struct pkt {$/;"	s	file:
plen	net_builtin.c	/^  uint8_t plen;    \/\/ Length of protocol address$/;"	m	struct:arp	file:
poll	arch_win32.h	72;"	d
port	net.h	/^  uint16_t port;     \/\/ TCP or UDP port in network byte order$/;"	m	struct:mg_addr
port	url.c	/^  size_t key, user, pass, host, port, uri, end;$/;"	m	struct:url	file:
pos	fs_packed.c	/^  size_t pos;$/;"	m	struct:packed_file	file:
print_ip4	printf.c	/^static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {$/;"	f	file:
print_ip6	printf.c	/^static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {$/;"	f	file:
print_methods	rpc.c	/^static size_t print_methods(mg_pfn_t pfn, void *pfn_data, va_list *ap) {$/;"	f	file:
printdirentry	http.c	/^static void printdirentry(const char *name, void *userdata) {$/;"	f	file:
printdirentrydata	http.c	/^struct printdirentrydata {$/;"	s	file:
priv	net.h	/^  void *priv;                   \/\/ Used by the MIP stack$/;"	m	struct:mg_mgr
pro	net_builtin.c	/^  uint16_t pro;    \/\/ Format of protocol address$/;"	m	struct:arp	file:
prof	net.h	/^  struct mg_iobuf prof;        \/\/ Profile data enabled by MG_ENABLE_PROFILE$/;"	m	struct:mg_connection	typeref:struct:mg_connection::mg_iobuf
propagate	tls_builtin.c	/^static void propagate(fe x, limb_t over) {$/;"	f	file:
proto	http.h	/^  struct mg_str method, uri, query, proto;             \/\/ Request\/response line$/;"	m	struct:mg_http_message	typeref:struct:mg_http_message::
proto	net_builtin.c	/^  uint8_t addr, ctrl, proto[2], code, id, len[2];$/;"	m	struct:lcp	file:
proto	net_builtin.c	/^  uint8_t proto;    \/\/ Upper level protocol$/;"	m	struct:ip6	file:
proto	net_builtin.c	/^  uint8_t proto;  \/\/ Upper level protocol$/;"	m	struct:ip	file:
ptr	str.h	/^  const char *ptr;  \/\/ Pointer to string data$/;"	m	struct:mg_str
qcpy	printf.c	/^static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,$/;"	f	file:
query	http.h	/^  struct mg_str method, uri, query, proto;             \/\/ Request\/response line$/;"	m	struct:mg_http_message	typeref:struct:mg_http_message::
raccept	sock.c	/^static MG_SOCKET_TYPE raccept(MG_SOCKET_TYPE sock, union usa *usa,$/;"	f	file:
raw	net_builtin.c	/^  struct mg_iobuf raw;   \/\/ For TLS only. Incoming raw data$/;"	m	struct:connstate	typeref:struct:connstate::mg_iobuf	file:
raw	net_builtin.c	/^  struct mg_str raw;  \/\/ Raw packet data$/;"	m	struct:pkt	typeref:struct:pkt::mg_str	file:
rd	fs.h	/^  size_t (*rd)(void *fd, void *buf, size_t len);        \/\/ Read file$/;"	m	struct:mg_fs
read_conn	net_builtin.c	/^static void read_conn(struct mg_connection *c, struct pkt *pkt) {$/;"	f	file:
read_conn	sock.c	/^static void read_conn(struct mg_connection *c) {$/;"	f	file:
readdir	fs_posix.c	/^struct dirent *readdir(DIR *d) {$/;"	f
realpath	arch_win32.h	96;"	d
recv	net.h	/^  struct mg_iobuf recv;        \/\/ Incoming data$/;"	m	struct:mg_connection	typeref:struct:mg_connection::mg_iobuf
recv	net_ft.h	48;"	d
recv_queue	net_builtin.h	/^  struct mg_queue recv_queue;      \/\/ Receive queue$/;"	m	struct:mg_tcpip_if	typeref:struct:mg_tcpip_if::mg_queue
recv_raw	sock.c	/^static long recv_raw(struct mg_connection *c, void *buf, size_t len) {$/;"	f	file:
recvfrom	net_ft.h	51;"	d
regularize_k	tls_uecc.c	/^static uECC_word_t regularize_k(const uECC_word_t *const k, uECC_word_t *k0,$/;"	f	file:
rem	net.h	/^  struct mg_addr rem;          \/\/ Remote address$/;"	m	struct:mg_connection	typeref:struct:mg_connection::mg_addr
req_data	rpc.h	/^  void *req_data;        \/\/ Arbitrary request data$/;"	m	struct:mg_rpc_req
resolved	dns.h	/^  bool resolved;        \/\/ Resolve successful, addr is set$/;"	m	struct:mg_dns_message
restore_http_cb	http.c	/^static void restore_http_cb(struct mg_connection *c) {$/;"	f	file:
result	fs_posix.c	/^  struct dirent result;$/;"	m	struct:win32_dir	typeref:struct:win32_dir::dirent	file:
result_size	tls_uecc.h	/^      result_size; \/* Hash function result size in bytes, eg 32 for SHA-256. *\/$/;"	m	struct:uECC_HashContext
rk	tls_aes128.h	/^  uint32_t *rk;      \/\/ pointer to current round key$/;"	m	struct:__anon12
rm	fs.h	/^  bool (*rm)(const char *path);                         \/\/ Delete file$/;"	m	struct:mg_fs
rol	sha1.c	11;"	d	file:
root_dir	http.h	/^  const char *root_dir;       \/\/ Web root directory, must be non-NULL$/;"	m	struct:mg_http_serve_opts
ror	sha256.c	3;"	d	file:
rounds	tls_aes128.h	/^  int rounds;        \/\/ keysize-based rounds count$/;"	m	struct:__anon12
roundup	iobuf.c	/^static size_t roundup(size_t size, size_t align) {$/;"	f	file:
rpc	rpc.h	/^  struct mg_rpc *rpc;    \/\/ RPC handler being called$/;"	m	struct:mg_rpc_req	typeref:struct:mg_rpc_req::mg_rpc
rtls	net.h	/^  struct mg_iobuf rtls;        \/\/ TLS only. Incoming encrypted data$/;"	m	struct:mg_connection	typeref:struct:mg_connection::mg_iobuf
rx	net_builtin.h	/^  size_t (*rx)(void *buf, size_t len, struct mg_tcpip_if *);  \/\/ Receive frame$/;"	m	struct:mg_tcpip_driver
rx_arp	net_builtin.c	/^static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {$/;"	f	file:
rx_dhcp_client	net_builtin.c	/^static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {$/;"	f	file:
rx_dhcp_server	net_builtin.c	/^static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {$/;"	f	file:
rx_icmp	net_builtin.c	/^static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {$/;"	f	file:
rx_ip	net_builtin.c	/^static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {$/;"	f	file:
rx_ip6	net_builtin.c	/^static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {$/;"	f	file:
rx_tcp	net_builtin.c	/^static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {$/;"	f	file:
rx_udp	net_builtin.c	/^static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {$/;"	f	file:
s_addr	ota_flash.c	/^static char *s_addr;      \/\/ Current address to write to$/;"	v	file:
s_crc32	ota_flash.c	/^static uint32_t s_crc32;  \/\/ Firmware checksum$/;"	v	file:
s_ifp	drivers/cmsis.c	/^static struct mg_tcpip_if *s_ifp;$/;"	v	typeref:struct:mg_tcpip_if	file:
s_ifp	drivers/imxrt.c	/^static struct mg_tcpip_if *s_ifp;  \/\/ MIP interface$/;"	v	typeref:struct:mg_tcpip_if	file:
s_ifp	drivers/same54.c	/^static struct mg_tcpip_if *s_ifp;  \/\/ MIP interface$/;"	v	typeref:struct:mg_tcpip_if	file:
s_ifp	drivers/stm32f.c	/^static struct mg_tcpip_if *s_ifp;  \/\/ MIP interface$/;"	v	typeref:struct:mg_tcpip_if	file:
s_ifp	drivers/stm32h.c	/^static struct mg_tcpip_if *s_ifp;                         \/\/ MIP interface$/;"	v	typeref:struct:mg_tcpip_if	file:
s_ifp	drivers/tm4c.c	/^static struct mg_tcpip_if *s_ifp;                    \/\/ MIP interface$/;"	v	typeref:struct:mg_tcpip_if	file:
s_known_types	http.c	/^static struct mg_str s_known_types[] = {$/;"	v	typeref:struct:mg_str	file:
s_log_func	log.c	/^static mg_pfn_t s_log_func = mg_pfn_stdout;$/;"	v	file:
s_log_func_param	log.c	/^static void *s_log_func_param = NULL;$/;"	v	file:
s_rxbuf	drivers/same54.c	/^static uint8_t s_rxbuf[ETH_DESC_CNT][ETH_PKT_SIZE];$/;"	v	file:
s_rxbuf	drivers/stm32f.c	/^static uint8_t s_rxbuf[ETH_DESC_CNT][ETH_PKT_SIZE];  \/\/ RX ethernet buffers$/;"	v	file:
s_rxbuf	drivers/stm32h.c	/^static uint8_t s_rxbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       \/\/ RX ethernet buffers$/;"	v	file:
s_rxbuf	drivers/tm4c.c	/^static uint8_t s_rxbuf[ETH_DESC_CNT][ETH_PKT_SIZE];  \/\/ RX ethernet buffers$/;"	v	file:
s_rxdesc	drivers/same54.c	/^static uint32_t s_rxdesc[ETH_DESC_CNT][ETH_DS];  \/\/ RX descriptors$/;"	v	file:
s_rxdesc	drivers/stm32f.c	/^static uint32_t s_rxdesc[ETH_DESC_CNT][ETH_DS];      \/\/ RX descriptors$/;"	v	file:
s_rxdesc	drivers/stm32h.c	/^static volatile uint32_t s_rxdesc[ETH_DESC_CNT][ETH_DS];  \/\/ RX descriptors$/;"	v	file:
s_rxdesc	drivers/tm4c.c	/^static uint32_t s_rxdesc[ETH_DESC_CNT][ETH_DS];      \/\/ RX descriptors$/;"	v	file:
s_rxno	drivers/imxrt.c	/^static uint32_t s_rxno;$/;"	v	file:
s_rxno	drivers/same54.c	/^static uint8_t s_rxno;                           \/\/ Current RX descriptor$/;"	v	file:
s_rxno	drivers/stm32f.c	/^static uint8_t s_rxno;                               \/\/ Current RX descriptor$/;"	v	file:
s_rxno	drivers/stm32h.c	/^static uint32_t s_rxno;$/;"	v	file:
s_rxno	drivers/tm4c.c	/^static uint32_t s_rxno;$/;"	v	file:
s_size	ota_flash.c	/^static size_t s_size;     \/\/ Firmware size to flash. In-progress indicator$/;"	v	file:
s_txbuf	drivers/same54.c	/^static uint8_t s_txbuf[ETH_DESC_CNT][ETH_PKT_SIZE];$/;"	v	file:
s_txbuf	drivers/stm32f.c	/^static uint8_t s_txbuf[ETH_DESC_CNT][ETH_PKT_SIZE];  \/\/ TX ethernet buffers$/;"	v	file:
s_txbuf	drivers/stm32h.c	/^static uint8_t s_txbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       \/\/ TX ethernet buffers$/;"	v	file:
s_txbuf	drivers/tm4c.c	/^static uint8_t s_txbuf[ETH_DESC_CNT][ETH_PKT_SIZE];  \/\/ TX ethernet buffers$/;"	v	file:
s_txdesc	drivers/same54.c	/^static uint32_t s_txdesc[ETH_DESC_CNT][ETH_DS];  \/\/ TX descriptors$/;"	v	file:
s_txdesc	drivers/stm32f.c	/^static uint32_t s_txdesc[ETH_DESC_CNT][ETH_DS];      \/\/ TX descriptors$/;"	v	file:
s_txdesc	drivers/stm32h.c	/^static volatile uint32_t s_txdesc[ETH_DESC_CNT][ETH_DS];  \/\/ TX descriptors$/;"	v	file:
s_txdesc	drivers/tm4c.c	/^static uint32_t s_txdesc[ETH_DESC_CNT][ETH_DS];      \/\/ TX descriptors$/;"	v	file:
s_txno	drivers/same54.c	/^static uint8_t s_txno;                           \/\/ Current TX descriptor$/;"	v	file:
s_txno	drivers/stm32f.c	/^static uint8_t s_txno;                               \/\/ Current TX descriptor$/;"	v	file:
s_txno	drivers/stm32h.c	/^static uint32_t s_txno;$/;"	v	file:
s_txno	drivers/tm4c.c	/^static uint32_t s_txno;$/;"	v	file:
sa	sock.c	/^  struct sockaddr sa;$/;"	m	union:usa	typeref:struct:usa::sockaddr	file:
scope_id	net.h	/^  uint8_t scope_id;  \/\/ IPv6 scope ID$/;"	m	struct:mg_addr
scpy	fmt.c	/^static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,$/;"	f	file:
sdlimb_t	tls_builtin.c	/^typedef int64_t sdlimb_t;$/;"	t	file:
secs	net_builtin.c	/^  uint16_t secs, flags;$/;"	m	struct:dhcp	file:
send	net.h	/^  struct mg_iobuf send;        \/\/ Outgoing data$/;"	m	struct:mg_connection	typeref:struct:mg_connection::mg_iobuf
send	net_ft.h	47;"	d
send	tls_builtin.c	/^  struct mg_iobuf send; \/\/ For the receive path, we're reusing c->rtls$/;"	m	struct:tls_data	typeref:struct:tls_data::mg_iobuf	file:
send_syn	net_builtin.c	/^static void send_syn(struct mg_connection *c) {$/;"	f	file:
sendto	net_ft.h	50;"	d
seq	net_builtin.c	/^  uint32_t seq, ack;           \/\/ TCP seq\/ack counters$/;"	m	struct:connstate	file:
seq	net_builtin.c	/^  uint32_t seq;    \/\/ Sequence number$/;"	m	struct:tcp	file:
server_cert_der	tls_builtin.c	/^  struct mg_str server_cert_der;  \/\/ server certificate in DER format$/;"	m	struct:tls_data	typeref:struct:tls_data::mg_str	file:
server_finished_key	tls_builtin.c	/^  uint8_t server_finished_key[32];$/;"	m	struct:tls_data	file:
server_key	tls_builtin.c	/^  uint8_t server_key[32];         \/\/ server EC private key$/;"	m	struct:tls_data	file:
server_write_iv	tls_builtin.c	/^  uint8_t server_write_iv[12];$/;"	m	struct:tls_data	file:
server_write_key	tls_builtin.c	/^  uint8_t server_write_key[16];$/;"	m	struct:tls_data	file:
session_id	tls_builtin.c	/^  uint8_t session_id[32];  \/\/ client session ID between the handshake states$/;"	m	struct:tls_data	file:
setlocaddr	sock.c	/^static void setlocaddr(MG_SOCKET_TYPE fd, struct mg_addr *addr) {$/;"	f	file:
setsockopt	net_ft.h	49;"	d
setsockopts	sock.c	/^static void setsockopts(struct mg_connection *c) {$/;"	f	file:
settmout	net_builtin.c	/^static void settmout(struct mg_connection *c, uint8_t type) {$/;"	f	file:
sha	net_builtin.c	/^  uint8_t sha[6];  \/\/ Sender hardware address$/;"	m	struct:arp	file:
sha256	tls_builtin.c	/^  mg_sha256_ctx sha256;  \/\/ incremental SHA-256 hash for TLS handshake$/;"	m	struct:tls_data	file:
siaddr	net_builtin.c	/^  uint32_t ciaddr, yiaddr, siaddr, giaddr;$/;"	m	struct:dhcp	file:
sig0	sha256.c	8;"	d	file:
sig1	sha256.c	9;"	d	file:
sin	sock.c	/^  struct sockaddr_in sin;$/;"	m	union:usa	typeref:struct:usa::sockaddr_in	file:
sin6	sock.c	/^  struct sockaddr_in6 sin6;$/;"	m	union:usa	typeref:struct:usa::sockaddr_in6	file:
size	fs_packed.c	/^  size_t size;$/;"	m	struct:packed_file	file:
size	iobuf.h	/^  size_t size;         \/\/ Total size available$/;"	m	struct:mg_iobuf
size	ota_flash.c	/^  uint32_t crc32, size, timestamp, status;$/;"	m	struct:mg_otadata	file:
size	queue.h	/^  size_t size;$/;"	m	struct:mg_queue
sk	fs.h	/^  size_t (*sk)(void *fd, size_t offset);                \/\/ Set file position$/;"	m	struct:mg_fs
skip_chunk	http.c	/^static int skip_chunk(const char *buf, int len, int *pl, int *dl) {$/;"	f	file:
skip_iotest	sock.c	/^static bool skip_iotest(const struct mg_connection *c) {$/;"	f	file:
skiptorn	http.c	/^static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {$/;"	f	file:
sleep	arch_win32.h	97;"	d
smax	tls_uecc.c	/^static bitcount_t smax(bitcount_t a, bitcount_t b) {$/;"	f	file:
snprintf	arch_win32.h	56;"	d
sntp_cb	sntp.c	/^static void sntp_cb(struct mg_connection *c, int ev, void *ev_data) {$/;"	f	file:
sockaddr	net_ft.h	41;"	d
sockaddr_in	net_ft.h	40;"	d
socket	net_ft.h	46;"	d
socklen_t	arch_azurertos.h	22;"	d
socklen_t	arch_win32.h	/^typedef int socklen_t;$/;"	t
socklen_t	net_rl.h	24;"	d
spa	net_builtin.c	/^  uint32_t spa;    \/\/ Sender protocol address$/;"	m	struct:arp	file:
spi	net_builtin.h	/^  void *spi;                        \/\/ Opaque SPI bus descriptor$/;"	m	struct:mg_tcpip_spi
sport	net_builtin.c	/^  uint16_t sport;  \/\/ Source port$/;"	m	struct:tcp	file:
sport	net_builtin.c	/^  uint16_t sport;  \/\/ Source port$/;"	m	struct:udp	file:
sqr	tls_builtin.c	/^static void sqr(fe out, const fe a) {$/;"	f	file:
sqr1	tls_builtin.c	/^static void sqr1(fe a) {$/;"	f	file:
src	net_builtin.c	/^  uint32_t src;   \/\/ Source IP$/;"	m	struct:ip	file:
src	net_builtin.c	/^  uint8_t src[16];  \/\/ Source IP$/;"	m	struct:ip6	file:
src	net_builtin.c	/^  uint8_t src[6];  \/\/ Source MAC address$/;"	m	struct:eth	file:
ss	net.h	/^  SocketSet_t ss;  \/\/ NOTE(lsm): referenced from socket struct$/;"	m	struct:mg_mgr
sseq	tls_builtin.c	/^  uint32_t sseq;  \/\/ server sequence number, used in encryption$/;"	m	struct:tls_data	file:
ssi_pattern	http.h	/^  const char *ssi_pattern;    \/\/ SSI file name pattern, e.g. #.shtml$/;"	m	struct:mg_http_serve_opts
ssl	tls_mbed.h	/^  mbedtls_ssl_context ssl;  \/\/ SSL\/TLS context$/;"	m	struct:mg_tls
ssl	tls_openssl.h	/^  SSL *ssl;$/;"	m	struct:mg_tls
st	fs.h	/^  int (*st)(const char *path, size_t *size, time_t *mtime);  \/\/ stat file$/;"	m	struct:mg_fs
state	net_builtin.h	/^  uint8_t state;                \/\/ Current state$/;"	m	struct:mg_tcpip_if
state	sha1.h	/^  uint32_t state[5];$/;"	m	struct:__anon10
state	sha256.h	/^  uint32_t state[8];$/;"	m	struct:__anon5
state	tls_builtin.c	/^  enum mg_tls_hs_state state;  \/\/ keep track of connection handshake progress$/;"	m	struct:tls_data	typeref:enum:tls_data::mg_tls_hs_state	file:
static_cb	http.c	/^static void static_cb(struct mg_connection *c, int ev, void *ev_data) {$/;"	f	file:
status	ota_flash.c	/^  uint32_t crc32, size, timestamp, status;$/;"	m	struct:mg_otadata	file:
stm32f_eth	drivers/stm32f.c	/^struct stm32f_eth {$/;"	s	file:
stm32h_eth	drivers/stm32h.c	/^struct stm32h_eth {$/;"	s	file:
strdup	arch_freertos.h	33;"	d
strdup	arch_rtx.h	24;"	d
strdup	arch_win32.h	59;"	d
strdup	arch_zephyr.h	22;"	d
strerror	arch_zephyr.h	24;"	d
stripquotes	http.c	/^static struct mg_str stripquotes(struct mg_str s) {$/;"	f	file:
sub	tls_builtin.c	/^static void sub(fe out, const fe a, const fe b) {$/;"	f	file:
tail	queue.h	/^  volatile size_t tail;$/;"	m	struct:mg_queue
tcp	net_builtin.c	/^  struct tcp *tcp;$/;"	m	struct:pkt	typeref:struct:pkt::tcp	file:
tcp	net_builtin.c	/^struct tcp {$/;"	s	file:
tha	net_builtin.c	/^  uint8_t tha[6];  \/\/ Target hardware address$/;"	m	struct:arp	file:
ticket	tls_mbed.h	/^  mbedtls_ssl_ticket_context ticket;  \/\/ Session tickets context$/;"	m	struct:mg_tls
tickets	tls_mbed.h	/^  mbedtls_ssl_ticket_context tickets;$/;"	m	struct:mg_tls_ctx
timegm	arch_win32.h	99;"	d
timer	net_builtin.c	/^  uint64_t timer;              \/\/ TCP keep-alive \/ ACK timer$/;"	m	struct:connstate	file:
timer_1000ms	net_builtin.h	/^  uint64_t timer_1000ms;        \/\/ 1000 ms timer: for DHCP and link state$/;"	m	struct:mg_tcpip_if
timerid	net.h	/^  unsigned long timerid;        \/\/ Next timer ID$/;"	m	struct:mg_mgr
timers	net.h	/^  struct mg_timer *timers;      \/\/ Active timers$/;"	m	struct:mg_mgr	typeref:struct:mg_mgr::mg_timer
timestamp	ota_flash.c	/^  uint32_t crc32, size, timestamp, status;$/;"	m	struct:mg_otadata	file:
timestamp	profile.h	/^  uint32_t timestamp;  \/\/ Milliseconds since connection creation (MG_EV_OPEN)$/;"	m	struct:mg_profitem
timeval	net_lwip.h	/^struct timeval {$/;"	s
tls	net.h	/^  void *tls;                   \/\/ TLS specific data$/;"	m	struct:mg_connection
tls_ctx	net.h	/^  void *tls_ctx;                \/\/ TLS context shared by all TLS sessions$/;"	m	struct:mg_mgr
tls_data	tls_builtin.c	/^struct tls_data {$/;"	s	file:
tls_err_cb	tls_openssl.c	/^static int tls_err_cb(const char *s, size_t len, void *c) {$/;"	f	file:
tm4c_emac	drivers/tm4c.c	/^struct tm4c_emac {$/;"	s	file:
tm4cspin	drivers/tm4c.c	/^static inline void tm4cspin(volatile uint32_t count) {$/;"	f	file:
tmiss	net_builtin.c	/^  uint8_t tmiss;         \/\/ Number of keep-alive misses$/;"	m	struct:connstate	file:
tmp	tls_uecc.h	/^  uint8_t *tmp;    \/* Must point to a buffer of at least (2 * result_size +$/;"	m	struct:uECC_HashContext
to_wchar	fs_posix.c	/^static int to_wchar(const char *path, wchar_t *wbuf, size_t wbuf_len) {$/;"	f	file:
tomgaddr	sock.c	/^static void tomgaddr(union usa *usa, struct mg_addr *a, bool is_ip6) {$/;"	f	file:
tos	net_builtin.c	/^  uint8_t tos;    \/\/ Unused$/;"	m	struct:ip	file:
tousa	sock.c	/^static socklen_t tousa(struct mg_addr *a, union usa *usa) {$/;"	f	file:
tpa	net_builtin.c	/^  uint32_t tpa;    \/\/ Target protocol address$/;"	m	struct:arp	file:
trim_len	net_builtin.c	/^static size_t trim_len(struct mg_connection *c, size_t len) {$/;"	f	file:
true	arch_win32.h	/^typedef enum { false = 0, true = 1 } bool;$/;"	e	enum:__anon2
ttl	net_builtin.c	/^  uint8_t ttl;      \/\/ Time to live$/;"	m	struct:ip6	file:
ttl	net_builtin.c	/^  uint8_t ttl;    \/\/ Time to live$/;"	m	struct:ip	file:
ttype	net_builtin.c	/^  uint8_t ttype;               \/\/ Timer type. 0: ack, 1: keep-alive$/;"	m	struct:connstate	file:
tv_sec	net_lwip.h	/^  time_t tv_sec;$/;"	m	struct:timeval
tv_usec	net_lwip.h	/^  long tv_usec;$/;"	m	struct:timeval
tx	net_builtin.h	/^  size_t (*tx)(const void *, size_t, struct mg_tcpip_if *);   \/\/ Transmit frame$/;"	m	struct:mg_tcpip_driver
tx	net_builtin.h	/^  struct mg_str tx;                \/\/ Output (TX) buffer$/;"	m	struct:mg_tcpip_if	typeref:struct:mg_tcpip_if::mg_str
tx_dhcp	net_builtin.c	/^static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,$/;"	f	file:
tx_dhcp_discover	net_builtin.c	/^static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {$/;"	f	file:
tx_dhcp_request_re	net_builtin.c	/^static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,$/;"	f	file:
tx_dhcp_request_sel	net_builtin.c	/^static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,$/;"	f	file:
tx_ip	net_builtin.c	/^static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,$/;"	f	file:
tx_tcp	net_builtin.c	/^static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,$/;"	f	file:
tx_tcp_pkt	net_builtin.c	/^static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,$/;"	f	file:
tx_udp	net_builtin.c	/^static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,$/;"	f	file:
txn	net_builtin.h	/^  uint8_t (*txn)(void *, uint8_t);  \/\/ SPI transaction: write 1 byte, read reply$/;"	m	struct:mg_tcpip_spi
txnid	dns.c	/^  uint16_t txnid;$/;"	m	struct:dns_data	file:
txnid	dns.h	/^  uint16_t txnid;       \/\/ Transaction ID$/;"	m	struct:mg_dns_message
txnid	dns.h	/^  uint16_t txnid;  \/\/ Transaction ID$/;"	m	struct:mg_dns_header
type	net_builtin.c	/^  uint16_t type;   \/\/ Ethernet type$/;"	m	struct:eth	file:
type	net_builtin.c	/^  uint8_t type;$/;"	m	struct:icmp	file:
uECC	tls_builtin.c	/^  uECC_HashContext uECC;$/;"	m	struct:SHA256_HashContext	file:
uECC_ARM_USE_UMAAL	tls_uecc.h	566;"	d
uECC_ARM_USE_UMAAL	tls_uecc.h	569;"	d
uECC_ARM_USE_UMAAL	tls_uecc.h	571;"	d
uECC_Curve	tls_uecc.h	/^typedef const struct uECC_Curve_t *uECC_Curve;$/;"	t	typeref:struct:uECC_Curve_t
uECC_Curve_t	tls_uecc.c	/^struct uECC_Curve_t {$/;"	s	file:
uECC_ENABLE_VLI_API	tls_uecc.h	389;"	d
uECC_HashContext	tls_uecc.h	/^typedef struct uECC_HashContext {$/;"	s
uECC_HashContext	tls_uecc.h	/^} uECC_HashContext;$/;"	t	typeref:struct:uECC_HashContext
uECC_MAX_WORDS	tls_uecc.c	101;"	d	file:
uECC_MAX_WORDS	tls_uecc.c	102;"	d	file:
uECC_MAX_WORDS	tls_uecc.c	105;"	d	file:
uECC_MAX_WORDS	tls_uecc.c	106;"	d	file:
uECC_MAX_WORDS	tls_uecc.c	110;"	d	file:
uECC_MAX_WORDS	tls_uecc.c	113;"	d	file:
uECC_MAX_WORDS	tls_uecc.c	114;"	d	file:
uECC_MAX_WORDS	tls_uecc.c	117;"	d	file:
uECC_MAX_WORDS	tls_uecc.c	118;"	d	file:
uECC_MAX_WORDS	tls_uecc.c	121;"	d	file:
uECC_MAX_WORDS	tls_uecc.c	122;"	d	file:
uECC_MAX_WORDS	tls_uecc.c	126;"	d	file:
uECC_MAX_WORDS	tls_uecc.c	129;"	d	file:
uECC_MAX_WORDS	tls_uecc.c	130;"	d	file:
uECC_MAX_WORDS	tls_uecc.c	133;"	d	file:
uECC_MAX_WORDS	tls_uecc.c	134;"	d	file:
uECC_MAX_WORDS	tls_uecc.c	137;"	d	file:
uECC_MAX_WORDS	tls_uecc.c	138;"	d	file:
uECC_MAX_WORDS	tls_uecc.c	94;"	d	file:
uECC_MAX_WORDS	tls_uecc.c	97;"	d	file:
uECC_MAX_WORDS	tls_uecc.c	98;"	d	file:
uECC_OPTIMIZATION_LEVEL	tls_uecc.h	32;"	d
uECC_PLATFORM	tls_uecc.h	544;"	d
uECC_PLATFORM	tls_uecc.h	547;"	d
uECC_PLATFORM	tls_uecc.h	549;"	d
uECC_PLATFORM	tls_uecc.h	551;"	d
uECC_PLATFORM	tls_uecc.h	553;"	d
uECC_PLATFORM	tls_uecc.h	556;"	d
uECC_PLATFORM	tls_uecc.h	558;"	d
uECC_PLATFORM	tls_uecc.h	560;"	d
uECC_RNG_Function	tls_uecc.h	/^typedef int (*uECC_RNG_Function)(uint8_t *dest, unsigned size);$/;"	t
uECC_RNG_MAX_TRIES	tls_uecc.c	9;"	d	file:
uECC_SQUARE_FUNC	tls_uecc.h	40;"	d
uECC_SUPPORTS_secp160r1	tls_uecc.h	61;"	d
uECC_SUPPORTS_secp192r1	tls_uecc.h	64;"	d
uECC_SUPPORTS_secp224r1	tls_uecc.h	67;"	d
uECC_SUPPORTS_secp256k1	tls_uecc.h	73;"	d
uECC_SUPPORTS_secp256r1	tls_uecc.h	4;"	d
uECC_SUPPORTS_secp256r1	tls_uecc.h	70;"	d
uECC_SUPPORT_COMPRESSED_POINT	tls_uecc.h	79;"	d
uECC_VLI_API	tls_uecc.c	13;"	d	file:
uECC_VLI_API	tls_uecc.c	15;"	d	file:
uECC_VLI_NATIVE_LITTLE_ENDIAN	tls_uecc.h	56;"	d
uECC_WORD_BITS	tls_uecc.h	613;"	d
uECC_WORD_BITS	tls_uecc.h	623;"	d
uECC_WORD_BITS	tls_uecc.h	632;"	d
uECC_WORD_BITS_MASK	tls_uecc.h	615;"	d
uECC_WORD_BITS_MASK	tls_uecc.h	625;"	d
uECC_WORD_BITS_MASK	tls_uecc.h	634;"	d
uECC_WORD_BITS_SHIFT	tls_uecc.h	614;"	d
uECC_WORD_BITS_SHIFT	tls_uecc.h	624;"	d
uECC_WORD_BITS_SHIFT	tls_uecc.h	633;"	d
uECC_WORD_SIZE	tls_uecc.h	577;"	d
uECC_WORD_SIZE	tls_uecc.h	579;"	d
uECC_WORD_SIZE	tls_uecc.h	581;"	d
uECC_WORD_SIZE	tls_uecc.h	591;"	d
uECC_WORD_SIZE	tls_uecc.h	592;"	d
uECC_WORD_SIZE	tls_uecc.h	599;"	d
uECC_WORD_SIZE	tls_uecc.h	600;"	d
uECC_arch_other	tls_uecc.h	13;"	d
uECC_arm	tls_uecc.h	16;"	d
uECC_arm64	tls_uecc.h	19;"	d
uECC_arm_thumb	tls_uecc.h	17;"	d
uECC_arm_thumb2	tls_uecc.h	18;"	d
uECC_avr	tls_uecc.h	20;"	d
uECC_compress	tls_uecc.c	/^void uECC_compress(const uint8_t *public_key, uint8_t *compressed,$/;"	f
uECC_compute_public_key	tls_uecc.c	/^int uECC_compute_public_key(const uint8_t *private_key, uint8_t *public_key,$/;"	f
uECC_curve_G	tls_uecc.c	/^const uECC_word_t *uECC_curve_G(uECC_Curve curve) {$/;"	f
uECC_curve_b	tls_uecc.c	/^const uECC_word_t *uECC_curve_b(uECC_Curve curve) {$/;"	f
uECC_curve_n	tls_uecc.c	/^const uECC_word_t *uECC_curve_n(uECC_Curve curve) {$/;"	f
uECC_curve_num_bits	tls_uecc.c	/^unsigned uECC_curve_num_bits(uECC_Curve curve) {$/;"	f
uECC_curve_num_bytes	tls_uecc.c	/^unsigned uECC_curve_num_bytes(uECC_Curve curve) {$/;"	f
uECC_curve_num_n_bits	tls_uecc.c	/^unsigned uECC_curve_num_n_bits(uECC_Curve curve) {$/;"	f
uECC_curve_num_n_bytes	tls_uecc.c	/^unsigned uECC_curve_num_n_bytes(uECC_Curve curve) {$/;"	f
uECC_curve_num_n_words	tls_uecc.c	/^unsigned uECC_curve_num_n_words(uECC_Curve curve) {$/;"	f
uECC_curve_num_words	tls_uecc.c	/^unsigned uECC_curve_num_words(uECC_Curve curve) {$/;"	f
uECC_curve_p	tls_uecc.c	/^const uECC_word_t *uECC_curve_p(uECC_Curve curve) {$/;"	f
uECC_curve_private_key_size	tls_uecc.c	/^int uECC_curve_private_key_size(uECC_Curve curve) {$/;"	f
uECC_curve_public_key_size	tls_uecc.c	/^int uECC_curve_public_key_size(uECC_Curve curve) {$/;"	f
uECC_decompress	tls_uecc.c	/^void uECC_decompress(const uint8_t *compressed, uint8_t *public_key,$/;"	f
uECC_dword_t	tls_uecc.h	/^typedef uint16_t uECC_dword_t;$/;"	t
uECC_dword_t	tls_uecc.h	/^typedef uint64_t uECC_dword_t;$/;"	t
uECC_generate_random_int	tls_uecc.c	/^uECC_VLI_API int uECC_generate_random_int(uECC_word_t *random,$/;"	f
uECC_get_rng	tls_uecc.c	/^uECC_RNG_Function uECC_get_rng(void) {$/;"	f
uECC_make_key	tls_uecc.c	/^int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve) {$/;"	f
uECC_point_mult	tls_uecc.c	/^void uECC_point_mult(uECC_word_t *result, const uECC_word_t *point,$/;"	f
uECC_secp160r1	tls_uecc.c	/^uECC_Curve uECC_secp160r1(void) {$/;"	f
uECC_secp192r1	tls_uecc.c	/^uECC_Curve uECC_secp192r1(void) {$/;"	f
uECC_secp224r1	tls_uecc.c	/^uECC_Curve uECC_secp224r1(void) {$/;"	f
uECC_secp256k1	tls_uecc.c	/^uECC_Curve uECC_secp256k1(void) {$/;"	f
uECC_secp256r1	tls_uecc.c	/^uECC_Curve uECC_secp256r1(void) {$/;"	f
uECC_set_rng	tls_uecc.c	/^void uECC_set_rng(uECC_RNG_Function rng_function) {$/;"	f
uECC_shared_secret	tls_uecc.c	/^int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,$/;"	f
uECC_sign	tls_uecc.c	/^int uECC_sign(const uint8_t *private_key, const uint8_t *message_hash,$/;"	f
uECC_sign_deterministic	tls_uecc.c	/^int uECC_sign_deterministic(const uint8_t *private_key,$/;"	f
uECC_sign_with_k_internal	tls_uecc.c	/^static int uECC_sign_with_k_internal(const uint8_t *private_key,$/;"	f	file:
uECC_valid_point	tls_uecc.c	/^uECC_VLI_API int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve) {$/;"	f
uECC_valid_public_key	tls_uecc.c	/^int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve) {$/;"	f
uECC_verify	tls_uecc.c	/^int uECC_verify(const uint8_t *public_key, const uint8_t *message_hash,$/;"	f
uECC_vli_add	tls_uecc.c	/^uECC_VLI_API uECC_word_t uECC_vli_add(uECC_word_t *result,$/;"	f
uECC_vli_bytesToNative	tls_uecc.c	/^uECC_VLI_API void uECC_vli_bytesToNative(uECC_word_t *native,$/;"	f
uECC_vli_bytesToNative	tls_uecc.c	/^uECC_VLI_API void uECC_vli_bytesToNative(uint8_t *native, const uint8_t *bytes,$/;"	f
uECC_vli_clear	tls_uecc.c	/^uECC_VLI_API void uECC_vli_clear(uECC_word_t *vli, wordcount_t num_words) {$/;"	f
uECC_vli_cmp	tls_uecc.c	/^uECC_VLI_API cmpresult_t uECC_vli_cmp(const uECC_word_t *left,$/;"	f
uECC_vli_cmp_unsafe	tls_uecc.c	/^static cmpresult_t uECC_vli_cmp_unsafe(const uECC_word_t *left,$/;"	f	file:
uECC_vli_equal	tls_uecc.c	/^uECC_VLI_API uECC_word_t uECC_vli_equal(const uECC_word_t *left,$/;"	f
uECC_vli_isZero	tls_uecc.c	/^uECC_VLI_API uECC_word_t uECC_vli_isZero(const uECC_word_t *vli,$/;"	f
uECC_vli_mmod	tls_uecc.c	/^uECC_VLI_API void uECC_vli_mmod(uECC_word_t *result, uECC_word_t *product,$/;"	f
uECC_vli_mmod_fast	tls_uecc.c	/^void uECC_vli_mmod_fast(uECC_word_t *result, uECC_word_t *product,$/;"	f
uECC_vli_modAdd	tls_uecc.c	/^uECC_VLI_API void uECC_vli_modAdd(uECC_word_t *result, const uECC_word_t *left,$/;"	f
uECC_vli_modInv	tls_uecc.c	/^uECC_VLI_API void uECC_vli_modInv(uECC_word_t *result, const uECC_word_t *input,$/;"	f
uECC_vli_modMult	tls_uecc.c	/^uECC_VLI_API void uECC_vli_modMult(uECC_word_t *result, const uECC_word_t *left,$/;"	f
uECC_vli_modMult_fast	tls_uecc.c	/^uECC_VLI_API void uECC_vli_modMult_fast(uECC_word_t *result,$/;"	f
uECC_vli_modSquare	tls_uecc.c	/^uECC_VLI_API void uECC_vli_modSquare(uECC_word_t *result,$/;"	f
uECC_vli_modSquare_fast	tls_uecc.c	/^uECC_VLI_API void uECC_vli_modSquare_fast(uECC_word_t *result,$/;"	f
uECC_vli_modSub	tls_uecc.c	/^uECC_VLI_API void uECC_vli_modSub(uECC_word_t *result, const uECC_word_t *left,$/;"	f
uECC_vli_mod_sqrt	tls_uecc.c	/^void uECC_vli_mod_sqrt(uECC_word_t *a, uECC_Curve curve) {$/;"	f
uECC_vli_mult	tls_uecc.c	/^uECC_VLI_API void uECC_vli_mult(uECC_word_t *result, const uECC_word_t *left,$/;"	f
uECC_vli_nativeToBytes	tls_uecc.c	/^uECC_VLI_API void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,$/;"	f
uECC_vli_numBits	tls_uecc.c	/^uECC_VLI_API bitcount_t uECC_vli_numBits(const uECC_word_t *vli,$/;"	f
uECC_vli_rshift1	tls_uecc.c	/^uECC_VLI_API void uECC_vli_rshift1(uECC_word_t *vli, wordcount_t num_words) {$/;"	f
uECC_vli_set	tls_uecc.c	/^uECC_VLI_API void uECC_vli_set(uECC_word_t *dest, const uECC_word_t *src,$/;"	f
uECC_vli_square	tls_uecc.c	/^uECC_VLI_API void uECC_vli_square(uECC_word_t *result, const uECC_word_t *left,$/;"	f
uECC_vli_sub	tls_uecc.c	/^uECC_VLI_API uECC_word_t uECC_vli_sub(uECC_word_t *result,$/;"	f
uECC_vli_testBit	tls_uecc.c	/^uECC_VLI_API uECC_word_t uECC_vli_testBit(const uECC_word_t *vli,$/;"	f
uECC_word_t	tls_uecc.h	/^typedef uint32_t uECC_word_t;$/;"	t
uECC_word_t	tls_uecc.h	/^typedef uint64_t uECC_word_t;$/;"	t
uECC_word_t	tls_uecc.h	/^typedef uint8_t uECC_word_t;$/;"	t
uECC_x86	tls_uecc.h	14;"	d
uECC_x86_64	tls_uecc.h	15;"	d
uchar	tls_aes128.h	/^typedef unsigned char uchar;  \/\/ add some convienent shorter types$/;"	t
udp	net_builtin.c	/^  struct udp *udp;$/;"	m	struct:pkt	typeref:struct:pkt::udp	file:
udp	net_builtin.c	/^struct udp {$/;"	s	file:
uint	tls_aes128.h	/^typedef unsigned int uint;$/;"	t
uint16_t	arch_win32.h	/^typedef unsigned short uint16_t;$/;"	t
uint32_t	arch_win32.h	/^typedef unsigned int uint32_t;$/;"	t
uint64_t	arch_win32.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint8_t	arch_win32.h	/^typedef unsigned char uint8_t;$/;"	t
umaal	tls_builtin.c	/^static limb_t umaal(limb_t *carry, limb_t acc, limb_t mand, limb_t mier) {$/;"	f	file:
up	net_builtin.h	/^  bool (*up)(struct mg_tcpip_if *);                           \/\/ Up\/down status$/;"	m	struct:mg_tcpip_driver
update_SHA256	tls_builtin.c	/^static void update_SHA256(const uECC_HashContext *base, const uint8_t *message,$/;"	f	file:
update_V	tls_uecc.c	/^static void update_V(const uECC_HashContext *hash_context, uint8_t *K,$/;"	f	file:
update_hash	tls_uecc.h	/^  void (*update_hash)(const struct uECC_HashContext *context,$/;"	m	struct:uECC_HashContext
uri	http.h	/^  struct mg_str method, uri, query, proto;             \/\/ Request\/response line$/;"	m	struct:mg_http_message	typeref:struct:mg_http_message::
uri	url.c	/^  size_t key, user, pass, host, port, uri, end;$/;"	m	struct:url	file:
uri_to_path	http.c	/^static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,$/;"	f	file:
uri_to_path2	http.c	/^static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,$/;"	f	file:
url	net.h	/^  const char *url;          \/\/ DNS server URL$/;"	m	struct:mg_dns
url	url.c	/^struct url {$/;"	s	file:
urlparse	url.c	/^static struct url urlparse(const char *url) {$/;"	f	file:
urp	net_builtin.c	/^  uint16_t urp;   \/\/ Urgent pointer$/;"	m	struct:tcp	file:
usa	sock.c	/^union usa {$/;"	u	file:
use_dns6	net.h	/^  bool use_dns6;                \/\/ Use DNS6 server by default, see #1532$/;"	m	struct:mg_mgr
user	url.c	/^  size_t key, user, pass, host, port, uri, end;$/;"	m	struct:url	file:
userdata	net.h	/^  void *userdata;               \/\/ Arbitrary user data pointer$/;"	m	struct:mg_mgr
value	http.h	/^  struct mg_str value;  \/\/ Header value$/;"	m	struct:mg_http_header	typeref:struct:mg_http_header::mg_str
vcb	http.c	/^static bool vcb(uint8_t c) {$/;"	f	file:
ver	net_builtin.c	/^  uint8_t ver;      \/\/ Version$/;"	m	struct:ip6	file:
ver	net_builtin.c	/^  uint8_t ver;    \/\/ Version$/;"	m	struct:ip	file:
vli_mmod_fast_secp160r1	tls_uecc.c	/^static void vli_mmod_fast_secp160r1(uECC_word_t *result, uECC_word_t *product) {$/;"	f	file:
vli_mmod_fast_secp192r1	tls_uecc.c	/^static void vli_mmod_fast_secp192r1(uint32_t *result, uint32_t *product) {$/;"	f	file:
vli_mmod_fast_secp192r1	tls_uecc.c	/^static void vli_mmod_fast_secp192r1(uint64_t *result, uint64_t *product) {$/;"	f	file:
vli_mmod_fast_secp192r1	tls_uecc.c	/^static void vli_mmod_fast_secp192r1(uint8_t *result, uint8_t *product) {$/;"	f	file:
vli_mmod_fast_secp224r1	tls_uecc.c	/^static void vli_mmod_fast_secp224r1(uint32_t *result, uint32_t *product) {$/;"	f	file:
vli_mmod_fast_secp224r1	tls_uecc.c	/^static void vli_mmod_fast_secp224r1(uint64_t *result, uint64_t *product) {$/;"	f	file:
vli_mmod_fast_secp224r1	tls_uecc.c	/^static void vli_mmod_fast_secp224r1(uint8_t *result, uint8_t *product) {$/;"	f	file:
vli_mmod_fast_secp256k1	tls_uecc.c	/^static void vli_mmod_fast_secp256k1(uECC_word_t *result, uECC_word_t *product) {$/;"	f	file:
vli_mmod_fast_secp256r1	tls_uecc.c	/^static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {$/;"	f	file:
vli_mmod_fast_secp256r1	tls_uecc.c	/^static void vli_mmod_fast_secp256r1(uint64_t *result, uint64_t *product) {$/;"	f	file:
vli_mmod_fast_secp256r1	tls_uecc.c	/^static void vli_mmod_fast_secp256r1(uint8_t *result, uint8_t *product) {$/;"	f	file:
vli_modInv_update	tls_uecc.c	/^static void vli_modInv_update(uECC_word_t *uv, const uECC_word_t *mod,$/;"	f	file:
vli_numDigits	tls_uecc.c	/^static wordcount_t vli_numDigits(const uECC_word_t *vli,$/;"	f	file:
vsnprintf	arch_win32.h	57;"	d
w5500_init	drivers/w5500.c	/^static bool w5500_init(struct mg_tcpip_if *ifp) {$/;"	f	file:
w5500_r1	drivers/w5500.c	/^static  uint8_t w5500_r1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t r = 0; w5500_rn(s, block, addr, &r, 1); return r; }$/;"	f	file:
w5500_r2	drivers/w5500.c	/^static  uint16_t w5500_r2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t buf[2] = {0, 0}; w5500_rn(s, block, addr, buf, sizeof(buf)); return (uint16_t) ((buf[0] << 8) | buf[1]); }$/;"	f	file:
w5500_rn	drivers/w5500.c	/^static  void w5500_rn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, false, buf, len); }$/;"	f	file:
w5500_rx	drivers/w5500.c	/^static size_t w5500_rx(void *buf, size_t buflen, struct mg_tcpip_if *ifp) {$/;"	f	file:
w5500_tx	drivers/w5500.c	/^static size_t w5500_tx(const void *buf, size_t buflen, struct mg_tcpip_if *ifp) {$/;"	f	file:
w5500_txn	drivers/w5500.c	/^static void w5500_txn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, bool wr,$/;"	f	file:
w5500_up	drivers/w5500.c	/^static bool w5500_up(struct mg_tcpip_if *ifp) {$/;"	f	file:
w5500_w1	drivers/w5500.c	/^static  void w5500_w1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint8_t val) { w5500_wn(s, block, addr, &val, 1); }$/;"	f	file:
w5500_w2	drivers/w5500.c	/^static  void w5500_w2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint16_t val) { uint8_t buf[2] = {(uint8_t) (val >> 8), (uint8_t) (val & 255)}; w5500_wn(s, block, addr, buf, sizeof(buf)); }$/;"	f	file:
w5500_wn	drivers/w5500.c	/^static  void w5500_wn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, true, buf, len); }$/;"	f	file:
win	net_builtin.c	/^  uint16_t win;   \/\/ Window$/;"	m	struct:tcp	file:
win32_dir	fs_posix.c	/^typedef struct win32_dir {$/;"	s	file:
wordcount_t	tls_uecc.h	/^typedef int8_t wordcount_t;$/;"	t
wr	fs.h	/^  size_t (*wr)(void *fd, const void *buf, size_t len);  \/\/ Write file$/;"	m	struct:mg_fs
write_conn	net_builtin.c	/^static void write_conn(struct mg_connection *c) {$/;"	f	file:
write_conn	sock.c	/^static void write_conn(struct mg_connection *c) {$/;"	f	file:
ws_handshake	ws.c	/^static void ws_handshake(struct mg_connection *c, const struct mg_str *wskey,$/;"	f	file:
ws_msg	ws.c	/^struct ws_msg {$/;"	s	file:
ws_process	ws.c	/^static size_t ws_process(uint8_t *buf, size_t len, struct ws_msg *msg) {$/;"	f	file:
wufn	sock.c	/^static void wufn(struct mg_connection *c, int ev, void *ev_data) {$/;"	f	file:
x25519	tls_builtin.c	/^static int x25519(uint8_t out[X25519_BYTES], const uint8_t scalar[X25519_BYTES],$/;"	f	file:
x25519_cli	tls_builtin.c	/^  uint8_t x25519_cli[32];  \/\/ client X25519 key between the handshake states$/;"	m	struct:tls_data	file:
x25519_core	tls_builtin.c	/^static void x25519_core(fe xs[5], const uint8_t scalar[X25519_BYTES],$/;"	f	file:
x25519_sec	tls_builtin.c	/^  uint8_t x25519_sec[32];  \/\/ x25519 secret between the handshake states$/;"	m	struct:tls_data	file:
x_side	tls_uecc.c	/^  void (*x_side)(uECC_word_t *result, const uECC_word_t *x, uECC_Curve curve);$/;"	m	struct:uECC_Curve_t	file:
x_side_default	tls_uecc.c	/^static void x_side_default(uECC_word_t *result, const uECC_word_t *x,$/;"	f	file:
x_side_secp256k1	tls_uecc.c	/^static void x_side_secp256k1(uECC_word_t *result, const uECC_word_t *x,$/;"	f	file:
xid	net_builtin.c	/^  uint32_t xid;$/;"	m	struct:dhcp	file:
xisinf	fmt.c	/^static int xisinf(double x) {$/;"	f	file:
xisnan	fmt.c	/^static int xisnan(double x) {$/;"	f	file:
y	tls_aes128.h	/^  uchar y[16];          \/\/ the current cipher-input IV|Counter value$/;"	m	struct:__anon13
yiaddr	net_builtin.c	/^  uint32_t ciaddr, yiaddr, siaddr, giaddr;$/;"	m	struct:dhcp	file:
zeros	tls_builtin.c	/^static uint8_t zeros[32] = {0};$/;"	v	file:
zeros_sha256_digest	tls_builtin.c	/^static uint8_t zeros_sha256_digest[32] =$/;"	v	file:
