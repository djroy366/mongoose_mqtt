!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AES_DECRYPTION	mongoose.h	1221;"	d
AES_FROUND	mongoose.c	7820;"	d	file:
AES_HEADER	mongoose.h	1218;"	d
AES_RROUND	mongoose.c	7835;"	d	file:
AF_INET	mongoose.h	575;"	d
AF_INET6	mongoose.c	6697;"	d	file:
ATCOR	mongoose.c	/^      IEEE_R_OCTETS_OK, RESERVED16[71], ATCR, ATVR, ATOFF, ATPER, ATCOR, ATINC,$/;"	m	struct:imxrt_enet	file:
ATCR	mongoose.c	/^      IEEE_R_OCTETS_OK, RESERVED16[71], ATCR, ATVR, ATOFF, ATPER, ATCOR, ATINC,$/;"	m	struct:imxrt_enet	file:
ATINC	mongoose.c	/^      IEEE_R_OCTETS_OK, RESERVED16[71], ATCR, ATVR, ATOFF, ATPER, ATCOR, ATINC,$/;"	m	struct:imxrt_enet	file:
ATOFF	mongoose.c	/^      IEEE_R_OCTETS_OK, RESERVED16[71], ATCR, ATVR, ATOFF, ATPER, ATCOR, ATINC,$/;"	m	struct:imxrt_enet	file:
ATPER	mongoose.c	/^      IEEE_R_OCTETS_OK, RESERVED16[71], ATCR, ATVR, ATOFF, ATPER, ATCOR, ATINC,$/;"	m	struct:imxrt_enet	file:
ATSTMP	mongoose.c	/^      ATSTMP, RESERVED17[122], TGSR, TCSR0, TCCR0, TCSR1, TCCR1, TCSR2, TCCR2,$/;"	m	struct:imxrt_enet	file:
ATVR	mongoose.c	/^      IEEE_R_OCTETS_OK, RESERVED16[71], ATCR, ATVR, ATOFF, ATPER, ATCOR, ATINC,$/;"	m	struct:imxrt_enet	file:
BITS_TO_BYTES	mongoose.c	10286;"	d	file:
BITS_TO_WORDS	mongoose.c	10283;"	d	file:
BYTES_TO_WORDS_4	mongoose.c	10923;"	d	file:
BYTES_TO_WORDS_4	mongoose.c	10934;"	d	file:
BYTES_TO_WORDS_4	mongoose.c	10945;"	d	file:
BYTES_TO_WORDS_8	mongoose.c	10921;"	d	file:
BYTES_TO_WORDS_8	mongoose.c	10933;"	d	file:
BYTES_TO_WORDS_8	mongoose.c	10944;"	d	file:
CC	Makefile	/^  CC = gcc                      # Use MinGW gcc compiler$/;"	m
CFLAGS	Makefile	/^CFLAGS = -W -Wall -Wextra -g -I.  # Build options$/;"	m
CONCAT	mongoose.c	10162;"	d	file:
CONCATX	mongoose.c	10161;"	d	file:
CPY128	mongoose.c	7863;"	d	file:
DEC	mongoose.c	10206;"	d	file:
DECRYPT	mongoose.h	1225;"	d
DEC_1	mongoose.c	10173;"	d	file:
DEC_10	mongoose.c	10182;"	d	file:
DEC_11	mongoose.c	10183;"	d	file:
DEC_12	mongoose.c	10184;"	d	file:
DEC_13	mongoose.c	10185;"	d	file:
DEC_14	mongoose.c	10186;"	d	file:
DEC_15	mongoose.c	10187;"	d	file:
DEC_16	mongoose.c	10188;"	d	file:
DEC_17	mongoose.c	10189;"	d	file:
DEC_18	mongoose.c	10190;"	d	file:
DEC_19	mongoose.c	10191;"	d	file:
DEC_2	mongoose.c	10174;"	d	file:
DEC_20	mongoose.c	10192;"	d	file:
DEC_21	mongoose.c	10193;"	d	file:
DEC_22	mongoose.c	10194;"	d	file:
DEC_23	mongoose.c	10195;"	d	file:
DEC_24	mongoose.c	10196;"	d	file:
DEC_25	mongoose.c	10197;"	d	file:
DEC_26	mongoose.c	10198;"	d	file:
DEC_27	mongoose.c	10199;"	d	file:
DEC_28	mongoose.c	10200;"	d	file:
DEC_29	mongoose.c	10201;"	d	file:
DEC_3	mongoose.c	10175;"	d	file:
DEC_30	mongoose.c	10202;"	d	file:
DEC_31	mongoose.c	10203;"	d	file:
DEC_32	mongoose.c	10204;"	d	file:
DEC_4	mongoose.c	10176;"	d	file:
DEC_5	mongoose.c	10177;"	d	file:
DEC_6	mongoose.c	10178;"	d	file:
DEC_7	mongoose.c	10179;"	d	file:
DEC_8	mongoose.c	10180;"	d	file:
DEC_9	mongoose.c	10181;"	d	file:
DEFER	mongoose.c	10214;"	d	file:
DELETE	Makefile	/^  DELETE = cmd \/C del \/Q \/F \/S  # Command prompt command to delete files$/;"	m
DELETE	Makefile	/^DELETE = rm -rf                   # Command to remove files$/;"	m
DIR	mongoose.c	/^} DIR;$/;"	t	typeref:struct:win32_dir	file:
DMABMR	mongoose.c	/^      DMABMR, DMATPDR, DMARPDR, DMARDLAR, DMATDLAR, DMASR, DMAOMR, DMAIER,$/;"	m	struct:stm32f_eth	file:
DMACCARBR	mongoose.c	/^      RESERVED43, DMACCATBR, RESERVED44, DMACCARBR, DMACSR, RESERVED45[2],$/;"	m	struct:stm32h_eth	file:
DMACCARDR	mongoose.c	/^      DMACRIWTR, DMACSFCSR, RESERVED41, DMACCATDR, RESERVED42, DMACCARDR,$/;"	m	struct:stm32h_eth	file:
DMACCATBR	mongoose.c	/^      RESERVED43, DMACCATBR, RESERVED44, DMACCARBR, DMACSR, RESERVED45[2],$/;"	m	struct:stm32h_eth	file:
DMACCATDR	mongoose.c	/^      DMACRIWTR, DMACSFCSR, RESERVED41, DMACCATDR, RESERVED42, DMACCARDR,$/;"	m	struct:stm32h_eth	file:
DMACCR	mongoose.c	/^      RESERVED36[177], DMAMR, DMASBMR, DMAISR, DMADSR, RESERVED37[60], DMACCR,$/;"	m	struct:stm32h_eth	file:
DMACHRBAR	mongoose.c	/^      DMACHRBAR;$/;"	m	struct:stm32f_eth	file:
DMACHRDR	mongoose.c	/^      DMAMFBOCR, DMARSWTR, RESERVED10[8], DMACHTDR, DMACHRDR, DMACHTBAR,$/;"	m	struct:stm32f_eth	file:
DMACHTBAR	mongoose.c	/^      DMAMFBOCR, DMARSWTR, RESERVED10[8], DMACHTDR, DMACHRDR, DMACHTBAR,$/;"	m	struct:stm32f_eth	file:
DMACHTDR	mongoose.c	/^      DMAMFBOCR, DMARSWTR, RESERVED10[8], DMACHTDR, DMACHRDR, DMACHTBAR,$/;"	m	struct:stm32f_eth	file:
DMACIER	mongoose.c	/^      DMACTDTPR, RESERVED40, DMACRDTPR, DMACTDRLR, DMACRDRLR, DMACIER,$/;"	m	struct:stm32h_eth	file:
DMACMFCR	mongoose.c	/^      DMACMFCR;$/;"	m	struct:stm32h_eth	file:
DMACRCR	mongoose.c	/^      DMACTCR, DMACRCR, RESERVED38[2], DMACTDLAR, RESERVED39, DMACRDLAR,$/;"	m	struct:stm32h_eth	file:
DMACRDLAR	mongoose.c	/^      DMACTCR, DMACRCR, RESERVED38[2], DMACTDLAR, RESERVED39, DMACRDLAR,$/;"	m	struct:stm32h_eth	file:
DMACRDRLR	mongoose.c	/^      DMACTDTPR, RESERVED40, DMACRDTPR, DMACTDRLR, DMACRDRLR, DMACIER,$/;"	m	struct:stm32h_eth	file:
DMACRDTPR	mongoose.c	/^      DMACTDTPR, RESERVED40, DMACRDTPR, DMACTDRLR, DMACRDRLR, DMACIER,$/;"	m	struct:stm32h_eth	file:
DMACRIWTR	mongoose.c	/^      DMACRIWTR, DMACSFCSR, RESERVED41, DMACCATDR, RESERVED42, DMACCARDR,$/;"	m	struct:stm32h_eth	file:
DMACSFCSR	mongoose.c	/^      DMACRIWTR, DMACSFCSR, RESERVED41, DMACCATDR, RESERVED42, DMACCARDR,$/;"	m	struct:stm32h_eth	file:
DMACSR	mongoose.c	/^      RESERVED43, DMACCATBR, RESERVED44, DMACCARBR, DMACSR, RESERVED45[2],$/;"	m	struct:stm32h_eth	file:
DMACTCR	mongoose.c	/^      DMACTCR, DMACRCR, RESERVED38[2], DMACTDLAR, RESERVED39, DMACRDLAR,$/;"	m	struct:stm32h_eth	file:
DMACTDLAR	mongoose.c	/^      DMACTCR, DMACRCR, RESERVED38[2], DMACTDLAR, RESERVED39, DMACRDLAR,$/;"	m	struct:stm32h_eth	file:
DMACTDRLR	mongoose.c	/^      DMACTDTPR, RESERVED40, DMACRDTPR, DMACTDRLR, DMACRDRLR, DMACIER,$/;"	m	struct:stm32h_eth	file:
DMACTDTPR	mongoose.c	/^      DMACTDTPR, RESERVED40, DMACRDTPR, DMACTDRLR, DMACRDRLR, DMACIER,$/;"	m	struct:stm32h_eth	file:
DMADSR	mongoose.c	/^      RESERVED36[177], DMAMR, DMASBMR, DMAISR, DMADSR, RESERVED37[60], DMACCR,$/;"	m	struct:stm32h_eth	file:
DMAIER	mongoose.c	/^      DMABMR, DMATPDR, DMARPDR, DMARDLAR, DMATDLAR, DMASR, DMAOMR, DMAIER,$/;"	m	struct:stm32f_eth	file:
DMAISR	mongoose.c	/^      RESERVED36[177], DMAMR, DMASBMR, DMAISR, DMADSR, RESERVED37[60], DMACCR,$/;"	m	struct:stm32h_eth	file:
DMAMFBOCR	mongoose.c	/^      DMAMFBOCR, DMARSWTR, RESERVED10[8], DMACHTDR, DMACHRDR, DMACHTBAR,$/;"	m	struct:stm32f_eth	file:
DMAMR	mongoose.c	/^      RESERVED36[177], DMAMR, DMASBMR, DMAISR, DMADSR, RESERVED37[60], DMACCR,$/;"	m	struct:stm32h_eth	file:
DMAOMR	mongoose.c	/^      DMABMR, DMATPDR, DMARPDR, DMARDLAR, DMATDLAR, DMASR, DMAOMR, DMAIER,$/;"	m	struct:stm32f_eth	file:
DMARDLAR	mongoose.c	/^      DMABMR, DMATPDR, DMARPDR, DMARDLAR, DMATDLAR, DMASR, DMAOMR, DMAIER,$/;"	m	struct:stm32f_eth	file:
DMARPDR	mongoose.c	/^      DMABMR, DMATPDR, DMARPDR, DMARDLAR, DMATDLAR, DMASR, DMAOMR, DMAIER,$/;"	m	struct:stm32f_eth	file:
DMARSWTR	mongoose.c	/^      DMAMFBOCR, DMARSWTR, RESERVED10[8], DMACHTDR, DMACHRDR, DMACHTBAR,$/;"	m	struct:stm32f_eth	file:
DMASBMR	mongoose.c	/^      RESERVED36[177], DMAMR, DMASBMR, DMAISR, DMADSR, RESERVED37[60], DMACCR,$/;"	m	struct:stm32h_eth	file:
DMASR	mongoose.c	/^      DMABMR, DMATPDR, DMARPDR, DMARDLAR, DMATDLAR, DMASR, DMAOMR, DMAIER,$/;"	m	struct:stm32f_eth	file:
DMATDLAR	mongoose.c	/^      DMABMR, DMATPDR, DMARPDR, DMARDLAR, DMATDLAR, DMASR, DMAOMR, DMAIER,$/;"	m	struct:stm32f_eth	file:
DMATPDR	mongoose.c	/^      DMABMR, DMATPDR, DMARPDR, DMARDLAR, DMATDLAR, DMASR, DMAOMR, DMAIER,$/;"	m	struct:stm32f_eth	file:
ECR	mongoose.c	/^      ECR, RESERVED3[6], MMFR, MSCR, RESERVED4[7], MIBC, RESERVED5[7], RCR,$/;"	m	struct:imxrt_enet	file:
EIMR	mongoose.c	/^  volatile uint32_t RESERVED0, EIR, EIMR, RESERVED1, RDAR, TDAR, RESERVED2[3],$/;"	m	struct:imxrt_enet	file:
EIR	mongoose.c	/^  volatile uint32_t RESERVED0, EIR, EIMR, RESERVED1, RDAR, TDAR, RESERVED2[3],$/;"	m	struct:imxrt_enet	file:
EMAC	mongoose.c	14976;"	d	file:
EMAC	mongoose.c	14977;"	d	file:
EMAC0_IRQHandler	mongoose.c	/^void EMAC0_IRQHandler(void) {$/;"	f
EMACADDR0H	mongoose.c	/^      EMACRWUFF, EMACPMTCTLSTAT, RESERVED1[2], EMACRIS, EMACIM, EMACADDR0H,$/;"	m	struct:tm4c_emac	file:
EMACADDR0L	mongoose.c	/^      EMACADDR0L, EMACADDR1H, EMACADDR1L, EMACADDR2H, EMACADDR2L, EMACADDR3H,$/;"	m	struct:tm4c_emac	file:
EMACADDR1H	mongoose.c	/^      EMACADDR0L, EMACADDR1H, EMACADDR1L, EMACADDR2H, EMACADDR2L, EMACADDR3H,$/;"	m	struct:tm4c_emac	file:
EMACADDR1L	mongoose.c	/^      EMACADDR0L, EMACADDR1H, EMACADDR1L, EMACADDR2H, EMACADDR2L, EMACADDR3H,$/;"	m	struct:tm4c_emac	file:
EMACADDR2H	mongoose.c	/^      EMACADDR0L, EMACADDR1H, EMACADDR1L, EMACADDR2H, EMACADDR2L, EMACADDR3H,$/;"	m	struct:tm4c_emac	file:
EMACADDR2L	mongoose.c	/^      EMACADDR0L, EMACADDR1H, EMACADDR1L, EMACADDR2H, EMACADDR2L, EMACADDR3H,$/;"	m	struct:tm4c_emac	file:
EMACADDR3H	mongoose.c	/^      EMACADDR0L, EMACADDR1H, EMACADDR1L, EMACADDR2H, EMACADDR2L, EMACADDR3H,$/;"	m	struct:tm4c_emac	file:
EMACADDR3L	mongoose.c	/^      EMACADDR3L, RESERVED2[31], EMACWDOGTO, RESERVED3[8], EMACMMCCTRL,$/;"	m	struct:tm4c_emac	file:
EMACCC	mongoose.c	/^      RESERVED15[218], EMACPP, EMACPC, EMACCC, RESERVED16, EMACEPHYRIS,$/;"	m	struct:tm4c_emac	file:
EMACCFG	mongoose.c	/^  volatile uint32_t EMACCFG, EMACFRAMEFLTR, EMACHASHTBLH, EMACHASHTBLL,$/;"	m	struct:tm4c_emac	file:
EMACDMABUSMOD	mongoose.c	/^      EMACDMABUSMOD, EMACTXPOLLD, EMACRXPOLLD, EMACRXDLADDR, EMACTXDLADDR,$/;"	m	struct:tm4c_emac	file:
EMACDMAIM	mongoose.c	/^      EMACDMARIS, EMACDMAOPMODE, EMACDMAIM, EMACMFBOC, EMACRXINTWDT,$/;"	m	struct:tm4c_emac	file:
EMACDMAOPMODE	mongoose.c	/^      EMACDMARIS, EMACDMAOPMODE, EMACDMAIM, EMACMFBOC, EMACRXINTWDT,$/;"	m	struct:tm4c_emac	file:
EMACDMARIS	mongoose.c	/^      EMACDMARIS, EMACDMAOPMODE, EMACDMAIM, EMACMFBOC, EMACRXINTWDT,$/;"	m	struct:tm4c_emac	file:
EMACEPHYIM	mongoose.c	/^      EMACEPHYIM, EMACEPHYIMSC;$/;"	m	struct:tm4c_emac	file:
EMACEPHYIMSC	mongoose.c	/^      EMACEPHYIM, EMACEPHYIMSC;$/;"	m	struct:tm4c_emac	file:
EMACEPHYRIS	mongoose.c	/^      RESERVED15[218], EMACPP, EMACPC, EMACCC, RESERVED16, EMACEPHYRIS,$/;"	m	struct:tm4c_emac	file:
EMACFLOWCTL	mongoose.c	/^      EMACMIIADDR, EMACMIIDATA, EMACFLOWCTL, EMACVLANTG, RESERVED0, EMACSTATUS,$/;"	m	struct:tm4c_emac	file:
EMACFRAMEFLTR	mongoose.c	/^  volatile uint32_t EMACCFG, EMACFRAMEFLTR, EMACHASHTBLH, EMACHASHTBLL,$/;"	m	struct:tm4c_emac	file:
EMACHASHTBLH	mongoose.c	/^  volatile uint32_t EMACCFG, EMACFRAMEFLTR, EMACHASHTBLH, EMACHASHTBLL,$/;"	m	struct:tm4c_emac	file:
EMACHASHTBLL	mongoose.c	/^  volatile uint32_t EMACCFG, EMACFRAMEFLTR, EMACHASHTBLH, EMACHASHTBLL,$/;"	m	struct:tm4c_emac	file:
EMACHOSRXBA	mongoose.c	/^      RESERVED14[8], EMACHOSTXDESC, EMACHOSRXDESC, EMACHOSTXBA, EMACHOSRXBA,$/;"	m	struct:tm4c_emac	file:
EMACHOSRXDESC	mongoose.c	/^      RESERVED14[8], EMACHOSTXDESC, EMACHOSRXDESC, EMACHOSTXBA, EMACHOSRXBA,$/;"	m	struct:tm4c_emac	file:
EMACHOSTXBA	mongoose.c	/^      RESERVED14[8], EMACHOSTXDESC, EMACHOSRXDESC, EMACHOSTXBA, EMACHOSRXBA,$/;"	m	struct:tm4c_emac	file:
EMACHOSTXDESC	mongoose.c	/^      RESERVED14[8], EMACHOSTXDESC, EMACHOSRXDESC, EMACHOSTXBA, EMACHOSRXBA,$/;"	m	struct:tm4c_emac	file:
EMACHWORDSEC	mongoose.c	/^      EMACTARGSEC, EMACTARGNANO, EMACHWORDSEC, EMACTIMSTAT, EMACPPSCTRL,$/;"	m	struct:tm4c_emac	file:
EMACIM	mongoose.c	/^      EMACRWUFF, EMACPMTCTLSTAT, RESERVED1[2], EMACRIS, EMACIM, EMACADDR0H,$/;"	m	struct:tm4c_emac	file:
EMACMFBOC	mongoose.c	/^      EMACDMARIS, EMACDMAOPMODE, EMACDMAIM, EMACMFBOC, EMACRXINTWDT,$/;"	m	struct:tm4c_emac	file:
EMACMIIADDR	mongoose.c	/^      EMACMIIADDR, EMACMIIDATA, EMACFLOWCTL, EMACVLANTG, RESERVED0, EMACSTATUS,$/;"	m	struct:tm4c_emac	file:
EMACMIIDATA	mongoose.c	/^      EMACMIIADDR, EMACMIIDATA, EMACFLOWCTL, EMACVLANTG, RESERVED0, EMACSTATUS,$/;"	m	struct:tm4c_emac	file:
EMACMMCCTRL	mongoose.c	/^      EMACADDR3L, RESERVED2[31], EMACWDOGTO, RESERVED3[8], EMACMMCCTRL,$/;"	m	struct:tm4c_emac	file:
EMACMMCRXIM	mongoose.c	/^      EMACMMCRXRIS, EMACMMCTXRIS, EMACMMCRXIM, EMACMMCTXIM, RESERVED4,$/;"	m	struct:tm4c_emac	file:
EMACMMCRXRIS	mongoose.c	/^      EMACMMCRXRIS, EMACMMCTXRIS, EMACMMCRXIM, EMACMMCTXIM, RESERVED4,$/;"	m	struct:tm4c_emac	file:
EMACMMCTXIM	mongoose.c	/^      EMACMMCRXRIS, EMACMMCTXRIS, EMACMMCRXIM, EMACMMCTXIM, RESERVED4,$/;"	m	struct:tm4c_emac	file:
EMACMMCTXRIS	mongoose.c	/^      EMACMMCRXRIS, EMACMMCTXRIS, EMACMMCRXIM, EMACMMCTXIM, RESERVED4,$/;"	m	struct:tm4c_emac	file:
EMACPC	mongoose.c	/^      RESERVED15[218], EMACPP, EMACPC, EMACCC, RESERVED16, EMACEPHYRIS,$/;"	m	struct:tm4c_emac	file:
EMACPMTCTLSTAT	mongoose.c	/^      EMACRWUFF, EMACPMTCTLSTAT, RESERVED1[2], EMACRIS, EMACIM, EMACADDR0H,$/;"	m	struct:tm4c_emac	file:
EMACPP	mongoose.c	/^      RESERVED15[218], EMACPP, EMACPC, EMACCC, RESERVED16, EMACEPHYRIS,$/;"	m	struct:tm4c_emac	file:
EMACPPS0INTVL	mongoose.c	/^      RESERVED12[12], EMACPPS0INTVL, EMACPPS0WIDTH, RESERVED13[294],$/;"	m	struct:tm4c_emac	file:
EMACPPS0WIDTH	mongoose.c	/^      RESERVED12[12], EMACPPS0INTVL, EMACPPS0WIDTH, RESERVED13[294],$/;"	m	struct:tm4c_emac	file:
EMACPPSCTRL	mongoose.c	/^      EMACTARGSEC, EMACTARGNANO, EMACHWORDSEC, EMACTIMSTAT, EMACPPSCTRL,$/;"	m	struct:tm4c_emac	file:
EMACRIS	mongoose.c	/^      EMACRWUFF, EMACPMTCTLSTAT, RESERVED1[2], EMACRIS, EMACIM, EMACADDR0H,$/;"	m	struct:tm4c_emac	file:
EMACRWUFF	mongoose.c	/^      EMACRWUFF, EMACPMTCTLSTAT, RESERVED1[2], EMACRIS, EMACIM, EMACADDR0H,$/;"	m	struct:tm4c_emac	file:
EMACRXCNTALGNERR	mongoose.c	/^      EMACRXCNTALGNERR, RESERVED9[10], EMACRXCNTGUNI, RESERVED10[239],$/;"	m	struct:tm4c_emac	file:
EMACRXCNTCRCERR	mongoose.c	/^      EMACTXOCTCNTG, RESERVED7[6], EMACRXCNTGB, RESERVED8[4], EMACRXCNTCRCERR,$/;"	m	struct:tm4c_emac	file:
EMACRXCNTGB	mongoose.c	/^      EMACTXOCTCNTG, RESERVED7[6], EMACRXCNTGB, RESERVED8[4], EMACRXCNTCRCERR,$/;"	m	struct:tm4c_emac	file:
EMACRXCNTGUNI	mongoose.c	/^      EMACRXCNTALGNERR, RESERVED9[10], EMACRXCNTGUNI, RESERVED10[239],$/;"	m	struct:tm4c_emac	file:
EMACRXDLADDR	mongoose.c	/^      EMACDMABUSMOD, EMACTXPOLLD, EMACRXPOLLD, EMACRXDLADDR, EMACTXDLADDR,$/;"	m	struct:tm4c_emac	file:
EMACRXINTWDT	mongoose.c	/^      EMACDMARIS, EMACDMAOPMODE, EMACDMAIM, EMACMFBOC, EMACRXINTWDT,$/;"	m	struct:tm4c_emac	file:
EMACRXPOLLD	mongoose.c	/^      EMACDMABUSMOD, EMACTXPOLLD, EMACRXPOLLD, EMACRXDLADDR, EMACTXDLADDR,$/;"	m	struct:tm4c_emac	file:
EMACSTATUS	mongoose.c	/^      EMACMIIADDR, EMACMIIDATA, EMACFLOWCTL, EMACVLANTG, RESERVED0, EMACSTATUS,$/;"	m	struct:tm4c_emac	file:
EMACSUBSECINC	mongoose.c	/^      EMACVLNINCREP, EMACVLANHASH, RESERVED11[93], EMACTIMSTCTRL, EMACSUBSECINC,$/;"	m	struct:tm4c_emac	file:
EMACTARGNANO	mongoose.c	/^      EMACTARGSEC, EMACTARGNANO, EMACHWORDSEC, EMACTIMSTAT, EMACPPSCTRL,$/;"	m	struct:tm4c_emac	file:
EMACTARGSEC	mongoose.c	/^      EMACTARGSEC, EMACTARGNANO, EMACHWORDSEC, EMACTIMSTAT, EMACPPSCTRL,$/;"	m	struct:tm4c_emac	file:
EMACTIMADD	mongoose.c	/^      EMACTIMSEC, EMACTIMNANO, EMACTIMSECU, EMACTIMNANOU, EMACTIMADD,$/;"	m	struct:tm4c_emac	file:
EMACTIMNANO	mongoose.c	/^      EMACTIMSEC, EMACTIMNANO, EMACTIMSECU, EMACTIMNANOU, EMACTIMADD,$/;"	m	struct:tm4c_emac	file:
EMACTIMNANOU	mongoose.c	/^      EMACTIMSEC, EMACTIMNANO, EMACTIMSECU, EMACTIMNANOU, EMACTIMADD,$/;"	m	struct:tm4c_emac	file:
EMACTIMSEC	mongoose.c	/^      EMACTIMSEC, EMACTIMNANO, EMACTIMSECU, EMACTIMNANOU, EMACTIMADD,$/;"	m	struct:tm4c_emac	file:
EMACTIMSECU	mongoose.c	/^      EMACTIMSEC, EMACTIMNANO, EMACTIMSECU, EMACTIMNANOU, EMACTIMADD,$/;"	m	struct:tm4c_emac	file:
EMACTIMSTAT	mongoose.c	/^      EMACTARGSEC, EMACTARGNANO, EMACHWORDSEC, EMACTIMSTAT, EMACPPSCTRL,$/;"	m	struct:tm4c_emac	file:
EMACTIMSTCTRL	mongoose.c	/^      EMACVLNINCREP, EMACVLANHASH, RESERVED11[93], EMACTIMSTCTRL, EMACSUBSECINC,$/;"	m	struct:tm4c_emac	file:
EMACTXCNTGB	mongoose.c	/^      EMACTXCNTGB, RESERVED5[12], EMACTXCNTSCOL, EMACTXCNTMCOL, RESERVED6[4],$/;"	m	struct:tm4c_emac	file:
EMACTXCNTMCOL	mongoose.c	/^      EMACTXCNTGB, RESERVED5[12], EMACTXCNTSCOL, EMACTXCNTMCOL, RESERVED6[4],$/;"	m	struct:tm4c_emac	file:
EMACTXCNTSCOL	mongoose.c	/^      EMACTXCNTGB, RESERVED5[12], EMACTXCNTSCOL, EMACTXCNTMCOL, RESERVED6[4],$/;"	m	struct:tm4c_emac	file:
EMACTXDLADDR	mongoose.c	/^      EMACDMABUSMOD, EMACTXPOLLD, EMACRXPOLLD, EMACRXDLADDR, EMACTXDLADDR,$/;"	m	struct:tm4c_emac	file:
EMACTXOCTCNTG	mongoose.c	/^      EMACTXOCTCNTG, RESERVED7[6], EMACRXCNTGB, RESERVED8[4], EMACRXCNTCRCERR,$/;"	m	struct:tm4c_emac	file:
EMACTXPOLLD	mongoose.c	/^      EMACDMABUSMOD, EMACTXPOLLD, EMACRXPOLLD, EMACRXDLADDR, EMACTXDLADDR,$/;"	m	struct:tm4c_emac	file:
EMACVLANHASH	mongoose.c	/^      EMACVLNINCREP, EMACVLANHASH, RESERVED11[93], EMACTIMSTCTRL, EMACSUBSECINC,$/;"	m	struct:tm4c_emac	file:
EMACVLANTG	mongoose.c	/^      EMACMIIADDR, EMACMIIDATA, EMACFLOWCTL, EMACVLANTG, RESERVED0, EMACSTATUS,$/;"	m	struct:tm4c_emac	file:
EMACVLNINCREP	mongoose.c	/^      EMACVLNINCREP, EMACVLANHASH, RESERVED11[93], EMACTIMSTCTRL, EMACSUBSECINC,$/;"	m	struct:tm4c_emac	file:
EMACWDOGTO	mongoose.c	/^      EMACADDR3L, RESERVED2[31], EMACWDOGTO, RESERVED3[8], EMACMMCCTRL,$/;"	m	struct:tm4c_emac	file:
EMPTY	mongoose.c	10213;"	d	file:
ENCRYPT	mongoose.h	1224;"	d
ENET	mongoose.c	14015;"	d	file:
ENET	mongoose.c	14016;"	d	file:
ENET_IRQHandler	mongoose.c	/^void ENET_IRQHandler(void) {$/;"	f
EPHYBMCR	mongoose.c	/^  EPHYBMCR = 0,$/;"	e	enum:__anon5	file:
EPHYBMSR	mongoose.c	/^  EPHYBMSR = 1,$/;"	e	enum:__anon5	file:
EPHYSTS	mongoose.c	/^  EPHYSTS = 16$/;"	e	enum:__anon5	file:
EPHY_ADDR	mongoose.c	/^  EPHY_ADDR = 0,$/;"	e	enum:__anon5	file:
ETH	mongoose.c	14447;"	d	file:
ETH	mongoose.c	14448;"	d	file:
ETH	mongoose.c	14704;"	d	file:
ETH	mongoose.c	14705;"	d	file:
ETH_DESC_CNT	mongoose.c	14019;"	d	file:
ETH_DESC_CNT	mongoose.c	14223;"	d	file:
ETH_DESC_CNT	mongoose.c	14451;"	d	file:
ETH_DESC_CNT	mongoose.c	14709;"	d	file:
ETH_DESC_CNT	mongoose.c	14980;"	d	file:
ETH_DS	mongoose.c	14224;"	d	file:
ETH_DS	mongoose.c	14452;"	d	file:
ETH_DS	mongoose.c	14710;"	d	file:
ETH_DS	mongoose.c	14981;"	d	file:
ETH_IRQHandler	mongoose.c	/^void ETH_IRQHandler(void) {$/;"	f
ETH_PKT_SIZE	mongoose.c	14018;"	d	file:
ETH_PKT_SIZE	mongoose.c	14222;"	d	file:
ETH_PKT_SIZE	mongoose.c	14450;"	d	file:
ETH_PKT_SIZE	mongoose.c	14708;"	d	file:
ETH_PKT_SIZE	mongoose.c	14979;"	d	file:
EVAL	mongoose.c	10167;"	d	file:
EVAL1	mongoose.c	10168;"	d	file:
EVAL2	mongoose.c	10169;"	d	file:
EVAL3	mongoose.c	10170;"	d	file:
EVAL4	mongoose.c	10171;"	d	file:
EVEN	mongoose.c	10840;"	d	file:
EccPoint_compute_public_key	mongoose.c	/^static uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,$/;"	f	file:
EccPoint_isZero	mongoose.c	12402;"	d	file:
EccPoint_mult	mongoose.c	/^static void EccPoint_mult(uECC_word_t *result, const uECC_word_t *point,$/;"	f	file:
F1	mongoose.c	3477;"	d	file:
F2	mongoose.c	3478;"	d	file:
F3	mongoose.c	3479;"	d	file:
F4	mongoose.c	3480;"	d	file:
FD	mongoose.c	6689;"	d	file:
FD_CLOEXEC	mongoose.h	544;"	d
FLASH_ACTLR	mongoose.c	129;"	d	file:
FLASH_ADDR	mongoose.c	134;"	d	file:
FLASH_BASE	mongoose.c	128;"	d	file:
FLASH_BASE	mongoose.c	420;"	d	file:
FLASH_BASE1	mongoose.c	565;"	d	file:
FLASH_BASE2	mongoose.c	566;"	d	file:
FLASH_CCR	mongoose.c	572;"	d	file:
FLASH_CR	mongoose.c	571;"	d	file:
FLASH_CTLR	mongoose.c	133;"	d	file:
FLASH_KEYR	mongoose.c	130;"	d	file:
FLASH_KEYR	mongoose.c	421;"	d	file:
FLASH_KEYR	mongoose.c	567;"	d	file:
FLASH_NSCCR	mongoose.c	426;"	d	file:
FLASH_NSCR	mongoose.c	425;"	d	file:
FLASH_NSSR	mongoose.c	424;"	d	file:
FLASH_OBKEYR	mongoose.c	131;"	d	file:
FLASH_OBR	mongoose.c	135;"	d	file:
FLASH_OPTCR	mongoose.c	423;"	d	file:
FLASH_OPTCR	mongoose.c	569;"	d	file:
FLASH_OPTKEYR	mongoose.c	422;"	d	file:
FLASH_OPTKEYR	mongoose.c	568;"	d	file:
FLASH_OPTSR_CUR	mongoose.c	427;"	d	file:
FLASH_OPTSR_CUR	mongoose.c	573;"	d	file:
FLASH_OPTSR_PRG	mongoose.c	428;"	d	file:
FLASH_OPTSR_PRG	mongoose.c	574;"	d	file:
FLASH_SIZE_REG	mongoose.c	575;"	d	file:
FLASH_SR	mongoose.c	570;"	d	file:
FLASH_STATR	mongoose.c	132;"	d	file:
FLASH_WPR	mongoose.c	136;"	d	file:
FOPEN_MAX	mongoose.h	120;"	d
FSb	mongoose.c	/^static uchar FSb[256];     \/\/ Forward substitution box (FSb)$/;"	v	file:
FT0	mongoose.c	/^static uint32_t FT0[256];  \/\/ Forward key schedule assembly tables$/;"	v	file:
FT1	mongoose.c	/^static uint32_t FT1[256];$/;"	v	file:
FT2	mongoose.c	/^static uint32_t FT2[256];$/;"	v	file:
FT3	mongoose.c	/^static uint32_t FT3[256];$/;"	v	file:
FTRL	mongoose.c	/^      RAEM, RAFL, TSEM, TAEM, TAFL, TIPG, FTRL, RESERVED12[3], TACC, RACC,$/;"	m	struct:imxrt_enet	file:
F_SETFD	mongoose.h	548;"	d
G	mongoose.c	/^  uECC_word_t G[uECC_MAX_WORDS * 2];$/;"	m	struct:uECC_Curve_t	file:
GALR	mongoose.c	/^      RESERVED8, RXIC0, RXIC1, RXIC2, RESERVED9[3], IAUR, IALR, GAUR, GALR,$/;"	m	struct:imxrt_enet	file:
GAUR	mongoose.c	/^      RESERVED8, RXIC0, RXIC1, RXIC2, RESERVED9[3], IAUR, IALR, GAUR, GALR,$/;"	m	struct:imxrt_enet	file:
GCM_AUTH_FAILURE	mongoose.h	1293;"	d
GCM_HEADER	mongoose.h	1290;"	d
GET_SECOND_ARG	mongoose.c	10210;"	d	file:
GET_UINT32_BE	mongoose.c	8282;"	d	file:
GET_UINT32_LE	mongoose.c	7803;"	d	file:
GMAC_Handler	mongoose.c	/^void GMAC_Handler(void) {$/;"	f
HH	mongoose.h	/^  uint64_t HH[16];      \/\/ precalculated hi-half HTable$/;"	m	struct:__anon14
HIGH_BIT_SET	mongoose.h	2070;"	d
HIGH_BIT_SET	mongoose.h	2080;"	d
HIGH_BIT_SET	mongoose.h	2089;"	d
HL	mongoose.h	/^  uint64_t HL[16];      \/\/ precalculated lo-half HTable$/;"	m	struct:__anon14
HMAC_finish	mongoose.c	/^static void HMAC_finish(const uECC_HashContext *hash_context, const uint8_t *K,$/;"	f	file:
HMAC_init	mongoose.c	/^static void HMAC_init(const uECC_HashContext *hash_context, const uint8_t *K) {$/;"	f	file:
HMAC_update	mongoose.c	/^static void HMAC_update(const uECC_HashContext *hash_context,$/;"	f	file:
IALR	mongoose.c	/^      RESERVED8, RXIC0, RXIC1, RXIC2, RESERVED9[3], IAUR, IALR, GAUR, GALR,$/;"	m	struct:imxrt_enet	file:
IAUR	mongoose.c	/^      RESERVED8, RXIC0, RXIC1, RXIC2, RESERVED9[3], IAUR, IALR, GAUR, GALR,$/;"	m	struct:imxrt_enet	file:
IEEE_R_ALIGN	mongoose.c	/^      IEEE_R_FRAME_OK, IEEE_R_CRC, IEEE_R_ALIGN, IEEE_R_MACERR, IEEE_R_FDXFC,$/;"	m	struct:imxrt_enet	file:
IEEE_R_CRC	mongoose.c	/^      IEEE_R_FRAME_OK, IEEE_R_CRC, IEEE_R_ALIGN, IEEE_R_MACERR, IEEE_R_FDXFC,$/;"	m	struct:imxrt_enet	file:
IEEE_R_DROP	mongoose.c	/^      RMON_R_P1024TO2047, RMON_R_GTE2048, RMON_R_OCTETS, IEEE_R_DROP,$/;"	m	struct:imxrt_enet	file:
IEEE_R_FDXFC	mongoose.c	/^      IEEE_R_FRAME_OK, IEEE_R_CRC, IEEE_R_ALIGN, IEEE_R_MACERR, IEEE_R_FDXFC,$/;"	m	struct:imxrt_enet	file:
IEEE_R_FRAME_OK	mongoose.c	/^      IEEE_R_FRAME_OK, IEEE_R_CRC, IEEE_R_ALIGN, IEEE_R_MACERR, IEEE_R_FDXFC,$/;"	m	struct:imxrt_enet	file:
IEEE_R_MACERR	mongoose.c	/^      IEEE_R_FRAME_OK, IEEE_R_CRC, IEEE_R_ALIGN, IEEE_R_MACERR, IEEE_R_FDXFC,$/;"	m	struct:imxrt_enet	file:
IEEE_R_OCTETS_OK	mongoose.c	/^      IEEE_R_OCTETS_OK, RESERVED16[71], ATCR, ATVR, ATOFF, ATPER, ATCOR, ATINC,$/;"	m	struct:imxrt_enet	file:
IEEE_T_1COL	mongoose.c	/^      RMON_T_OCTETS, IEEE_T_DROP, IEEE_T_FRAME_OK, IEEE_T_1COL, IEEE_T_MCOL,$/;"	m	struct:imxrt_enet	file:
IEEE_T_CSERR	mongoose.c	/^      IEEE_T_DEF, IEEE_T_LCOL, IEEE_T_EXCOL, IEEE_T_MACERR, IEEE_T_CSERR,$/;"	m	struct:imxrt_enet	file:
IEEE_T_DEF	mongoose.c	/^      IEEE_T_DEF, IEEE_T_LCOL, IEEE_T_EXCOL, IEEE_T_MACERR, IEEE_T_CSERR,$/;"	m	struct:imxrt_enet	file:
IEEE_T_DROP	mongoose.c	/^      RMON_T_OCTETS, IEEE_T_DROP, IEEE_T_FRAME_OK, IEEE_T_1COL, IEEE_T_MCOL,$/;"	m	struct:imxrt_enet	file:
IEEE_T_EXCOL	mongoose.c	/^      IEEE_T_DEF, IEEE_T_LCOL, IEEE_T_EXCOL, IEEE_T_MACERR, IEEE_T_CSERR,$/;"	m	struct:imxrt_enet	file:
IEEE_T_FDXFC	mongoose.c	/^      IEEE_T_SQE, IEEE_T_FDXFC, IEEE_T_OCTETS_OK, RESERVED14[3], RMON_R_PACKETS,$/;"	m	struct:imxrt_enet	file:
IEEE_T_FRAME_OK	mongoose.c	/^      RMON_T_OCTETS, IEEE_T_DROP, IEEE_T_FRAME_OK, IEEE_T_1COL, IEEE_T_MCOL,$/;"	m	struct:imxrt_enet	file:
IEEE_T_LCOL	mongoose.c	/^      IEEE_T_DEF, IEEE_T_LCOL, IEEE_T_EXCOL, IEEE_T_MACERR, IEEE_T_CSERR,$/;"	m	struct:imxrt_enet	file:
IEEE_T_MACERR	mongoose.c	/^      IEEE_T_DEF, IEEE_T_LCOL, IEEE_T_EXCOL, IEEE_T_MACERR, IEEE_T_CSERR,$/;"	m	struct:imxrt_enet	file:
IEEE_T_MCOL	mongoose.c	/^      RMON_T_OCTETS, IEEE_T_DROP, IEEE_T_FRAME_OK, IEEE_T_1COL, IEEE_T_MCOL,$/;"	m	struct:imxrt_enet	file:
IEEE_T_OCTETS_OK	mongoose.c	/^      IEEE_T_SQE, IEEE_T_FDXFC, IEEE_T_OCTETS_OK, RESERVED14[3], RMON_R_PACKETS,$/;"	m	struct:imxrt_enet	file:
IEEE_T_SQE	mongoose.c	/^      IEEE_T_SQE, IEEE_T_FDXFC, IEEE_T_OCTETS_OK, RESERVED14[3], RMON_R_PACKETS,$/;"	m	struct:imxrt_enet	file:
IPPROTO_TCP	mongoose.h	573;"	d
IPPROTO_UDP	mongoose.h	574;"	d
IP_FRAG_OFFSET_MSK	mongoose.c	4523;"	d	file:
IP_MORE_FRAGS_MSK	mongoose.c	4524;"	d	file:
ISPRINT	mongoose.c	3420;"	d	file:
LIMB	mongoose.c	8806;"	d	file:
LIST_ADD_HEAD	mongoose.h	1103;"	d
LIST_ADD_TAIL	mongoose.h	1109;"	d
LIST_DELETE	mongoose.h	1116;"	d
MAC1USTCR	mongoose.c	/^      MACLTCR, MACLETR, MAC1USTCR, RESERVED9[12], MACVR, MACDR, RESERVED10,$/;"	m	struct:stm32h_eth	file:
MACA0HR	mongoose.c	/^      MACIMR, MACA0HR, MACA0LR, MACA1HR, MACA1LR, MACA2HR, MACA2LR, MACA3HR,$/;"	m	struct:stm32f_eth	file:
MACA0HR	mongoose.c	/^      RESERVED12[2], MACARPAR, RESERVED13[59], MACA0HR, MACA0LR, MACA1HR,$/;"	m	struct:stm32h_eth	file:
MACA0LR	mongoose.c	/^      MACIMR, MACA0HR, MACA0LR, MACA1HR, MACA1LR, MACA2HR, MACA2LR, MACA3HR,$/;"	m	struct:stm32f_eth	file:
MACA0LR	mongoose.c	/^      RESERVED12[2], MACARPAR, RESERVED13[59], MACA0HR, MACA0LR, MACA1HR,$/;"	m	struct:stm32h_eth	file:
MACA1HR	mongoose.c	/^      MACIMR, MACA0HR, MACA0LR, MACA1HR, MACA1LR, MACA2HR, MACA2LR, MACA3HR,$/;"	m	struct:stm32f_eth	file:
MACA1HR	mongoose.c	/^      RESERVED12[2], MACARPAR, RESERVED13[59], MACA0HR, MACA0LR, MACA1HR,$/;"	m	struct:stm32h_eth	file:
MACA1LR	mongoose.c	/^      MACA1LR, MACA2HR, MACA2LR, MACA3HR, MACA3LR, RESERVED14[248], MMCCR,$/;"	m	struct:stm32h_eth	file:
MACA1LR	mongoose.c	/^      MACIMR, MACA0HR, MACA0LR, MACA1HR, MACA1LR, MACA2HR, MACA2LR, MACA3HR,$/;"	m	struct:stm32f_eth	file:
MACA2HR	mongoose.c	/^      MACA1LR, MACA2HR, MACA2LR, MACA3HR, MACA3LR, RESERVED14[248], MMCCR,$/;"	m	struct:stm32h_eth	file:
MACA2HR	mongoose.c	/^      MACIMR, MACA0HR, MACA0LR, MACA1HR, MACA1LR, MACA2HR, MACA2LR, MACA3HR,$/;"	m	struct:stm32f_eth	file:
MACA2LR	mongoose.c	/^      MACA1LR, MACA2HR, MACA2LR, MACA3HR, MACA3LR, RESERVED14[248], MMCCR,$/;"	m	struct:stm32h_eth	file:
MACA2LR	mongoose.c	/^      MACIMR, MACA0HR, MACA0LR, MACA1HR, MACA1LR, MACA2HR, MACA2LR, MACA3HR,$/;"	m	struct:stm32f_eth	file:
MACA3HR	mongoose.c	/^      MACA1LR, MACA2HR, MACA2LR, MACA3HR, MACA3LR, RESERVED14[248], MMCCR,$/;"	m	struct:stm32h_eth	file:
MACA3HR	mongoose.c	/^      MACIMR, MACA0HR, MACA0LR, MACA1HR, MACA1LR, MACA2HR, MACA2LR, MACA3HR,$/;"	m	struct:stm32f_eth	file:
MACA3LR	mongoose.c	/^      MACA1LR, MACA2HR, MACA2LR, MACA3HR, MACA3LR, RESERVED14[248], MMCCR,$/;"	m	struct:stm32h_eth	file:
MACA3LR	mongoose.c	/^      MACA3LR, RESERVED2[40], MMCCR, MMCRIR, MMCTIR, MMCRIMR, MMCTIMR,$/;"	m	struct:stm32f_eth	file:
MACACR	mongoose.c	/^      RESERVED26[3], MACTTSSNR, MACTTSSSR, RESERVED27[2], MACACR, RESERVED28,$/;"	m	struct:stm32h_eth	file:
MACARPAR	mongoose.c	/^      RESERVED12[2], MACARPAR, RESERVED13[59], MACA0HR, MACA0LR, MACA1HR,$/;"	m	struct:stm32h_eth	file:
MACATSNR	mongoose.c	/^      MACATSNR, MACATSSR, MACTSIACR, MACTSEACR, MACTSICNR, MACTSECNR,$/;"	m	struct:stm32h_eth	file:
MACATSSR	mongoose.c	/^      MACATSNR, MACATSSR, MACTSIACR, MACTSEACR, MACTSICNR, MACTSECNR,$/;"	m	struct:stm32h_eth	file:
MACCR	mongoose.c	/^  volatile uint32_t MACCR, MACECR, MACPFR, MACWTR, MACHT0R, MACHT1R,$/;"	m	struct:stm32h_eth	file:
MACCR	mongoose.c	/^  volatile uint32_t MACCR, MACFFR, MACHTHR, MACHTLR, MACMIIAR, MACMIIDR, MACFCR,$/;"	m	struct:stm32f_eth	file:
MACDBGR	mongoose.c	/^      MACVLANTR, RESERVED0[2], MACRWUFFR, MACPMTCSR, RESERVED1, MACDBGR, MACSR,$/;"	m	struct:stm32f_eth	file:
MACDR	mongoose.c	/^      MACLTCR, MACLETR, MAC1USTCR, RESERVED9[12], MACVR, MACDR, RESERVED10,$/;"	m	struct:stm32h_eth	file:
MACECR	mongoose.c	/^  volatile uint32_t MACCR, MACECR, MACPFR, MACWTR, MACHT0R, MACHT1R,$/;"	m	struct:stm32h_eth	file:
MACFCR	mongoose.c	/^  volatile uint32_t MACCR, MACFFR, MACHTHR, MACHTLR, MACMIIAR, MACMIIDR, MACFCR,$/;"	m	struct:stm32f_eth	file:
MACFFR	mongoose.c	/^  volatile uint32_t MACCR, MACFFR, MACHTHR, MACHTLR, MACMIIAR, MACMIIDR, MACFCR,$/;"	m	struct:stm32f_eth	file:
MACHT0R	mongoose.c	/^  volatile uint32_t MACCR, MACECR, MACPFR, MACWTR, MACHT0R, MACHT1R,$/;"	m	struct:stm32h_eth	file:
MACHT1R	mongoose.c	/^  volatile uint32_t MACCR, MACECR, MACPFR, MACWTR, MACHT0R, MACHT1R,$/;"	m	struct:stm32h_eth	file:
MACHTHR	mongoose.c	/^  volatile uint32_t MACCR, MACFFR, MACHTHR, MACHTLR, MACMIIAR, MACMIIDR, MACFCR,$/;"	m	struct:stm32f_eth	file:
MACHTLR	mongoose.c	/^  volatile uint32_t MACCR, MACFFR, MACHTHR, MACHTLR, MACMIIAR, MACMIIDR, MACFCR,$/;"	m	struct:stm32f_eth	file:
MACHWF0R	mongoose.c	/^      MACHWF0R, MACHWF1R, MACHWF2R, RESERVED11[54], MACMDIOAR, MACMDIODR,$/;"	m	struct:stm32h_eth	file:
MACHWF1R	mongoose.c	/^      MACHWF0R, MACHWF1R, MACHWF2R, RESERVED11[54], MACMDIOAR, MACMDIODR,$/;"	m	struct:stm32h_eth	file:
MACHWF2R	mongoose.c	/^      MACHWF0R, MACHWF1R, MACHWF2R, RESERVED11[54], MACMDIOAR, MACMDIODR,$/;"	m	struct:stm32h_eth	file:
MACIER	mongoose.c	/^      MACIER, MACRXTXSR, RESERVED7, MACPCSR, MACRWKPFR, RESERVED8[2], MACLCSR,$/;"	m	struct:stm32h_eth	file:
MACIMR	mongoose.c	/^      MACIMR, MACA0HR, MACA0LR, MACA1HR, MACA1LR, MACA2HR, MACA2LR, MACA3HR,$/;"	m	struct:stm32f_eth	file:
MACISR	mongoose.c	/^      RESERVED4[2], MACTFCR, RESERVED5[7], MACRFCR, RESERVED6[7], MACISR,$/;"	m	struct:stm32h_eth	file:
MACIVIR	mongoose.c	/^      RESERVED1[14], MACVTR, RESERVED2, MACVHTR, RESERVED3, MACVIR, MACIVIR,$/;"	m	struct:stm32h_eth	file:
MACL3A0R0R	mongoose.c	/^      RESERVED21[2], MACL3A0R0R, MACL3A1R0R, MACL3A2R0R, MACL3A3R0R,$/;"	m	struct:stm32h_eth	file:
MACL3A0R1R	mongoose.c	/^      RESERVED22[4], MACL3L4C1R, MACL4A1R, RESERVED23[2], MACL3A0R1R,$/;"	m	struct:stm32h_eth	file:
MACL3A1R0R	mongoose.c	/^      RESERVED21[2], MACL3A0R0R, MACL3A1R0R, MACL3A2R0R, MACL3A3R0R,$/;"	m	struct:stm32h_eth	file:
MACL3A1R1R	mongoose.c	/^      MACL3A1R1R, MACL3A2R1R, MACL3A3R1R, RESERVED24[108], MACTSCR, MACSSIR,$/;"	m	struct:stm32h_eth	file:
MACL3A2R0R	mongoose.c	/^      RESERVED21[2], MACL3A0R0R, MACL3A1R0R, MACL3A2R0R, MACL3A3R0R,$/;"	m	struct:stm32h_eth	file:
MACL3A2R1R	mongoose.c	/^      MACL3A1R1R, MACL3A2R1R, MACL3A3R1R, RESERVED24[108], MACTSCR, MACSSIR,$/;"	m	struct:stm32h_eth	file:
MACL3A3R0R	mongoose.c	/^      RESERVED21[2], MACL3A0R0R, MACL3A1R0R, MACL3A2R0R, MACL3A3R0R,$/;"	m	struct:stm32h_eth	file:
MACL3A3R1R	mongoose.c	/^      MACL3A1R1R, MACL3A2R1R, MACL3A3R1R, RESERVED24[108], MACTSCR, MACSSIR,$/;"	m	struct:stm32h_eth	file:
MACL3L4C0R	mongoose.c	/^      MMCRLPIMSTR, MMCRLPITCR, RESERVED20[65], MACL3L4C0R, MACL4A0R,$/;"	m	struct:stm32h_eth	file:
MACL3L4C1R	mongoose.c	/^      RESERVED22[4], MACL3L4C1R, MACL4A1R, RESERVED23[2], MACL3A0R1R,$/;"	m	struct:stm32h_eth	file:
MACL4A0R	mongoose.c	/^      MMCRLPIMSTR, MMCRLPITCR, RESERVED20[65], MACL3L4C0R, MACL4A0R,$/;"	m	struct:stm32h_eth	file:
MACL4A1R	mongoose.c	/^      RESERVED22[4], MACL3L4C1R, MACL4A1R, RESERVED23[2], MACL3A0R1R,$/;"	m	struct:stm32h_eth	file:
MACLCSR	mongoose.c	/^      MACIER, MACRXTXSR, RESERVED7, MACPCSR, MACRWKPFR, RESERVED8[2], MACLCSR,$/;"	m	struct:stm32h_eth	file:
MACLETR	mongoose.c	/^      MACLTCR, MACLETR, MAC1USTCR, RESERVED9[12], MACVR, MACDR, RESERVED10,$/;"	m	struct:stm32h_eth	file:
MACLMIR	mongoose.c	/^      MACPPSWR, RESERVED31[12], MACPOCR, MACSPI0R, MACSPI1R, MACSPI2R, MACLMIR,$/;"	m	struct:stm32h_eth	file:
MACLTCR	mongoose.c	/^      MACLTCR, MACLETR, MAC1USTCR, RESERVED9[12], MACVR, MACDR, RESERVED10,$/;"	m	struct:stm32h_eth	file:
MACMDIOAR	mongoose.c	/^      MACHWF0R, MACHWF1R, MACHWF2R, RESERVED11[54], MACMDIOAR, MACMDIODR,$/;"	m	struct:stm32h_eth	file:
MACMDIODR	mongoose.c	/^      MACHWF0R, MACHWF1R, MACHWF2R, RESERVED11[54], MACMDIOAR, MACMDIODR,$/;"	m	struct:stm32h_eth	file:
MACMIIAR	mongoose.c	/^  volatile uint32_t MACCR, MACFFR, MACHTHR, MACHTLR, MACMIIAR, MACMIIDR, MACFCR,$/;"	m	struct:stm32f_eth	file:
MACMIIDR	mongoose.c	/^  volatile uint32_t MACCR, MACFFR, MACHTHR, MACHTLR, MACMIIAR, MACMIIDR, MACFCR,$/;"	m	struct:stm32f_eth	file:
MACPCSR	mongoose.c	/^      MACIER, MACRXTXSR, RESERVED7, MACPCSR, MACRWKPFR, RESERVED8[2], MACLCSR,$/;"	m	struct:stm32h_eth	file:
MACPFR	mongoose.c	/^  volatile uint32_t MACCR, MACECR, MACPFR, MACWTR, MACHT0R, MACHT1R,$/;"	m	struct:stm32h_eth	file:
MACPMTCSR	mongoose.c	/^      MACVLANTR, RESERVED0[2], MACRWUFFR, MACPMTCSR, RESERVED1, MACDBGR, MACSR,$/;"	m	struct:stm32f_eth	file:
MACPOCR	mongoose.c	/^      MACPPSWR, RESERVED31[12], MACPOCR, MACSPI0R, MACSPI1R, MACSPI2R, MACLMIR,$/;"	m	struct:stm32h_eth	file:
MACPPSCR	mongoose.c	/^      RESERVED29[4], MACPPSCR, RESERVED30[3], MACPPSTTSR, MACPPSTTNR, MACPPSIR,$/;"	m	struct:stm32h_eth	file:
MACPPSIR	mongoose.c	/^      RESERVED29[4], MACPPSCR, RESERVED30[3], MACPPSTTSR, MACPPSTTNR, MACPPSIR,$/;"	m	struct:stm32h_eth	file:
MACPPSTTNR	mongoose.c	/^      RESERVED29[4], MACPPSCR, RESERVED30[3], MACPPSTTSR, MACPPSTTNR, MACPPSIR,$/;"	m	struct:stm32h_eth	file:
MACPPSTTSR	mongoose.c	/^      RESERVED29[4], MACPPSCR, RESERVED30[3], MACPPSTTSR, MACPPSTTNR, MACPPSIR,$/;"	m	struct:stm32h_eth	file:
MACPPSWR	mongoose.c	/^      MACPPSWR, RESERVED31[12], MACPOCR, MACSPI0R, MACSPI1R, MACSPI2R, MACLMIR,$/;"	m	struct:stm32h_eth	file:
MACRFCR	mongoose.c	/^      RESERVED4[2], MACTFCR, RESERVED5[7], MACRFCR, RESERVED6[7], MACISR,$/;"	m	struct:stm32h_eth	file:
MACRWKPFR	mongoose.c	/^      MACIER, MACRXTXSR, RESERVED7, MACPCSR, MACRWKPFR, RESERVED8[2], MACLCSR,$/;"	m	struct:stm32h_eth	file:
MACRWUFFR	mongoose.c	/^      MACVLANTR, RESERVED0[2], MACRWUFFR, MACPMTCSR, RESERVED1, MACDBGR, MACSR,$/;"	m	struct:stm32f_eth	file:
MACRXTXSR	mongoose.c	/^      MACIER, MACRXTXSR, RESERVED7, MACPCSR, MACRWKPFR, RESERVED8[2], MACLCSR,$/;"	m	struct:stm32h_eth	file:
MACSPI0R	mongoose.c	/^      MACPPSWR, RESERVED31[12], MACPOCR, MACSPI0R, MACSPI1R, MACSPI2R, MACLMIR,$/;"	m	struct:stm32h_eth	file:
MACSPI1R	mongoose.c	/^      MACPPSWR, RESERVED31[12], MACPOCR, MACSPI0R, MACSPI1R, MACSPI2R, MACLMIR,$/;"	m	struct:stm32h_eth	file:
MACSPI2R	mongoose.c	/^      MACPPSWR, RESERVED31[12], MACPOCR, MACSPI0R, MACSPI1R, MACSPI2R, MACLMIR,$/;"	m	struct:stm32h_eth	file:
MACSR	mongoose.c	/^      MACVLANTR, RESERVED0[2], MACRWUFFR, MACPMTCSR, RESERVED1, MACDBGR, MACSR,$/;"	m	struct:stm32f_eth	file:
MACSSIR	mongoose.c	/^      MACL3A1R1R, MACL3A2R1R, MACL3A3R1R, RESERVED24[108], MACTSCR, MACSSIR,$/;"	m	struct:stm32h_eth	file:
MACSTNR	mongoose.c	/^      MACSTSR, MACSTNR, MACSTSUR, MACSTNUR, MACTSAR, RESERVED25, MACTSSR,$/;"	m	struct:stm32h_eth	file:
MACSTNUR	mongoose.c	/^      MACSTSR, MACSTNR, MACSTSUR, MACSTNUR, MACTSAR, RESERVED25, MACTSSR,$/;"	m	struct:stm32h_eth	file:
MACSTSR	mongoose.c	/^      MACSTSR, MACSTNR, MACSTSUR, MACSTNUR, MACTSAR, RESERVED25, MACTSSR,$/;"	m	struct:stm32h_eth	file:
MACSTSUR	mongoose.c	/^      MACSTSR, MACSTNR, MACSTSUR, MACSTNUR, MACTSAR, RESERVED25, MACTSSR,$/;"	m	struct:stm32h_eth	file:
MACTFCR	mongoose.c	/^      RESERVED4[2], MACTFCR, RESERVED5[7], MACRFCR, RESERVED6[7], MACISR,$/;"	m	struct:stm32h_eth	file:
MACTSAR	mongoose.c	/^      MACSTSR, MACSTNR, MACSTSUR, MACSTNUR, MACTSAR, RESERVED25, MACTSSR,$/;"	m	struct:stm32h_eth	file:
MACTSCR	mongoose.c	/^      MACL3A1R1R, MACL3A2R1R, MACL3A3R1R, RESERVED24[108], MACTSCR, MACSSIR,$/;"	m	struct:stm32h_eth	file:
MACTSEACR	mongoose.c	/^      MACATSNR, MACATSSR, MACTSIACR, MACTSEACR, MACTSICNR, MACTSECNR,$/;"	m	struct:stm32h_eth	file:
MACTSECNR	mongoose.c	/^      MACATSNR, MACATSSR, MACTSIACR, MACTSEACR, MACTSICNR, MACTSECNR,$/;"	m	struct:stm32h_eth	file:
MACTSIACR	mongoose.c	/^      MACATSNR, MACATSSR, MACTSIACR, MACTSEACR, MACTSICNR, MACTSECNR,$/;"	m	struct:stm32h_eth	file:
MACTSICNR	mongoose.c	/^      MACATSNR, MACATSSR, MACTSIACR, MACTSEACR, MACTSICNR, MACTSECNR,$/;"	m	struct:stm32h_eth	file:
MACTSSR	mongoose.c	/^      MACSTSR, MACSTNR, MACSTSUR, MACSTNUR, MACTSAR, RESERVED25, MACTSSR,$/;"	m	struct:stm32h_eth	file:
MACTTSSNR	mongoose.c	/^      RESERVED26[3], MACTTSSNR, MACTTSSSR, RESERVED27[2], MACACR, RESERVED28,$/;"	m	struct:stm32h_eth	file:
MACTTSSSR	mongoose.c	/^      RESERVED26[3], MACTTSSNR, MACTTSSSR, RESERVED27[2], MACACR, RESERVED28,$/;"	m	struct:stm32h_eth	file:
MACVHTR	mongoose.c	/^      RESERVED1[14], MACVTR, RESERVED2, MACVHTR, RESERVED3, MACVIR, MACIVIR,$/;"	m	struct:stm32h_eth	file:
MACVIR	mongoose.c	/^      RESERVED1[14], MACVTR, RESERVED2, MACVHTR, RESERVED3, MACVIR, MACIVIR,$/;"	m	struct:stm32h_eth	file:
MACVLANTR	mongoose.c	/^      MACVLANTR, RESERVED0[2], MACRWUFFR, MACPMTCSR, RESERVED1, MACDBGR, MACSR,$/;"	m	struct:stm32f_eth	file:
MACVR	mongoose.c	/^      MACLTCR, MACLETR, MAC1USTCR, RESERVED9[12], MACVR, MACDR, RESERVED10,$/;"	m	struct:stm32h_eth	file:
MACVTR	mongoose.c	/^      RESERVED1[14], MACVTR, RESERVED2, MACVHTR, RESERVED3, MACVIR, MACIVIR,$/;"	m	struct:stm32h_eth	file:
MACWTR	mongoose.c	/^  volatile uint32_t MACCR, MACECR, MACPFR, MACWTR, MACHT0R, MACHT1R,$/;"	m	struct:stm32h_eth	file:
MD5STEP	mongoose.c	3482;"	d	file:
MG_64BIT_ALIGNED	mongoose.c	/^static uint8_t s_rxbuf[ETH_DESC_CNT][ETH_PKT_SIZE] MG_64BIT_ALIGNED;$/;"	v	file:
MG_64BIT_ALIGNED	mongoose.c	/^static uint8_t s_txbuf[ETH_DESC_CNT][ETH_PKT_SIZE] MG_64BIT_ALIGNED;$/;"	v	file:
MG_64BIT_ALIGNED	mongoose.c	/^static volatile struct enet_desc s_rxdesc[ETH_DESC_CNT] MG_64BIT_ALIGNED;$/;"	v	typeref:struct:s_rxdesc	file:
MG_64BIT_ALIGNED	mongoose.c	/^static volatile struct enet_desc s_txdesc[ETH_DESC_CNT] MG_64BIT_ALIGNED;$/;"	v	typeref:struct:s_txdesc	file:
MG_64BIT_ALIGNED	mongoose.c	14028;"	d	file:
MG_ARCH	mongoose.h	48;"	d
MG_ARCH	mongoose.h	50;"	d
MG_ARCH	mongoose.h	52;"	d
MG_ARCH	mongoose.h	54;"	d
MG_ARCH	mongoose.h	56;"	d
MG_ARCH	mongoose.h	58;"	d
MG_ARCH	mongoose.h	61;"	d
MG_ARCH	mongoose.h	63;"	d
MG_ARCH	mongoose.h	65;"	d
MG_ARCH	mongoose.h	67;"	d
MG_ARCH_ARMCC	mongoose.h	42;"	d
MG_ARCH_AZURERTOS	mongoose.h	36;"	d
MG_ARCH_CMSIS_RTOS1	mongoose.h	39;"	d
MG_ARCH_CMSIS_RTOS2	mongoose.h	43;"	d
MG_ARCH_CUSTOM	mongoose.h	30;"	d
MG_ARCH_ESP32	mongoose.h	33;"	d
MG_ARCH_ESP8266	mongoose.h	34;"	d
MG_ARCH_FREERTOS	mongoose.h	35;"	d
MG_ARCH_NEWLIB	mongoose.h	38;"	d
MG_ARCH_RP2040	mongoose.h	41;"	d
MG_ARCH_RTTHREAD	mongoose.h	44;"	d
MG_ARCH_TIRTOS	mongoose.h	40;"	d
MG_ARCH_UNIX	mongoose.h	31;"	d
MG_ARCH_WIN32	mongoose.h	32;"	d
MG_ARCH_ZEPHYR	mongoose.h	37;"	d
MG_ARM_DISABLE_IRQ	mongoose.h	1080;"	d
MG_ARM_DISABLE_IRQ	mongoose.h	1083;"	d
MG_ARM_ENABLE_IRQ	mongoose.h	1081;"	d
MG_ARM_ENABLE_IRQ	mongoose.h	1084;"	d
MG_BIG_ENDIAN	mongoose.h	82;"	d
MG_BIT	mongoose.h	1073;"	d
MG_CHECKRET	mongoose.c	3149;"	d	file:
MG_C_STR	mongoose.h	848;"	d
MG_DATA_SIZE	mongoose.h	769;"	d
MG_DEBUG	mongoose.h	964;"	d
MG_DEVICE	mongoose.h	2684;"	d
MG_DEVICE_CH32V307	mongoose.h	2680;"	d
MG_DEVICE_CUSTOM	mongoose.h	2681;"	d
MG_DEVICE_NONE	mongoose.h	2677;"	d
MG_DEVICE_STM32H5	mongoose.h	2678;"	d
MG_DEVICE_STM32H7	mongoose.h	2679;"	d
MG_DIRSEP	mongoose.h	115;"	d
MG_DIRSEP	mongoose.h	480;"	d
MG_DIRSEP	mongoose.h	793;"	d
MG_DMARK	mongoose.c	1888;"	d	file:
MG_DSB	mongoose.h	1088;"	d
MG_DSB	mongoose.h	1090;"	d
MG_DSB	mongoose.h	1092;"	d
MG_DSB	mongoose.h	1094;"	d
MG_DSB	mongoose.h	1096;"	d
MG_ENABLE_ASSERT	mongoose.h	757;"	d
MG_ENABLE_CUSTOM_LOG	mongoose.h	684;"	d
MG_ENABLE_CUSTOM_MILLIS	mongoose.h	749;"	d
MG_ENABLE_CUSTOM_RANDOM	mongoose.h	745;"	d
MG_ENABLE_DIRLIST	mongoose.h	241;"	d
MG_ENABLE_DIRLIST	mongoose.h	397;"	d
MG_ENABLE_DIRLIST	mongoose.h	510;"	d
MG_ENABLE_DIRLIST	mongoose.h	741;"	d
MG_ENABLE_EPOLL	mongoose.h	357;"	d
MG_ENABLE_EPOLL	mongoose.h	712;"	d
MG_ENABLE_FATFS	mongoose.h	716;"	d
MG_ENABLE_FILE	mongoose.h	798;"	d
MG_ENABLE_FILE	mongoose.h	800;"	d
MG_ENABLE_FREERTOS_TCP	mongoose.h	59;"	d
MG_ENABLE_FREERTOS_TCP	mongoose.h	696;"	d
MG_ENABLE_IPV6	mongoose.h	724;"	d
MG_ENABLE_LOG	mongoose.h	680;"	d
MG_ENABLE_LWIP	mongoose.h	692;"	d
MG_ENABLE_MD5	mongoose.h	732;"	d
MG_ENABLE_PACKED_FS	mongoose.h	753;"	d
MG_ENABLE_POLL	mongoose.h	359;"	d
MG_ENABLE_POLL	mongoose.h	708;"	d
MG_ENABLE_PROFILE	mongoose.h	834;"	d
MG_ENABLE_RL	mongoose.h	320;"	d
MG_ENABLE_RL	mongoose.h	700;"	d
MG_ENABLE_SOCKET	mongoose.h	240;"	d
MG_ENABLE_SOCKET	mongoose.h	704;"	d
MG_ENABLE_SSI	mongoose.h	551;"	d
MG_ENABLE_SSI	mongoose.h	720;"	d
MG_ENABLE_TCPIP	mongoose.h	688;"	d
MG_ENABLE_WINSOCK	mongoose.h	737;"	d
MG_EOO	mongoose.c	3159;"	d	file:
MG_EPHEMERAL_PORT_BASE	mongoose.c	4479;"	d	file:
MG_EPOLL_ADD	mongoose.h	817;"	d
MG_EPOLL_ADD	mongoose.h	829;"	d
MG_EPOLL_MOD	mongoose.h	822;"	d
MG_EPOLL_MOD	mongoose.h	830;"	d
MG_ERROR	mongoose.h	962;"	d
MG_ESC	mongoose.h	929;"	d
MG_EV_ACCEPT	mongoose.h	/^  MG_EV_ACCEPT,     \/\/ Connection accepted          NULL$/;"	e	enum:__anon15
MG_EV_CLOSE	mongoose.h	/^  MG_EV_CLOSE,      \/\/ Connection closed            NULL$/;"	e	enum:__anon15
MG_EV_CONNECT	mongoose.h	/^  MG_EV_CONNECT,    \/\/ Connection established       NULL$/;"	e	enum:__anon15
MG_EV_ERROR	mongoose.h	/^  MG_EV_ERROR,      \/\/ Error                        char *error_message$/;"	e	enum:__anon15
MG_EV_HTTP_MSG	mongoose.h	/^  MG_EV_HTTP_MSG,   \/\/ HTTP request\/response        struct mg_http_message *$/;"	e	enum:__anon15
MG_EV_MQTT_CMD	mongoose.h	/^  MG_EV_MQTT_CMD,   \/\/ MQTT low-level command       struct mg_mqtt_message *$/;"	e	enum:__anon15
MG_EV_MQTT_MSG	mongoose.h	/^  MG_EV_MQTT_MSG,   \/\/ MQTT PUBLISH received        struct mg_mqtt_message *$/;"	e	enum:__anon15
MG_EV_MQTT_OPEN	mongoose.h	/^  MG_EV_MQTT_OPEN,  \/\/ MQTT CONNACK received        int *connack_status_code$/;"	e	enum:__anon15
MG_EV_OPEN	mongoose.h	/^  MG_EV_OPEN,       \/\/ Connection created           NULL$/;"	e	enum:__anon15
MG_EV_POLL	mongoose.h	/^  MG_EV_POLL,       \/\/ mg_mgr_poll iteration        uint64_t *uptime_millis$/;"	e	enum:__anon15
MG_EV_READ	mongoose.h	/^  MG_EV_READ,       \/\/ Data received from socket    long *bytes_read$/;"	e	enum:__anon15
MG_EV_RESOLVE	mongoose.h	/^  MG_EV_RESOLVE,    \/\/ Host name is resolved        NULL$/;"	e	enum:__anon15
MG_EV_SNTP_TIME	mongoose.h	/^  MG_EV_SNTP_TIME,  \/\/ SNTP time received           uint64_t *epoch_millis$/;"	e	enum:__anon15
MG_EV_TLS_HS	mongoose.h	/^  MG_EV_TLS_HS,     \/\/ TLS handshake succeeded      NULL$/;"	e	enum:__anon15
MG_EV_USER	mongoose.h	/^  MG_EV_USER        \/\/ Starting ID for user events$/;"	e	enum:__anon15
MG_EV_WAKEUP	mongoose.h	/^  MG_EV_WAKEUP,     \/\/ mg_wakeup() data received    struct mg_str *data$/;"	e	enum:__anon15
MG_EV_WRITE	mongoose.h	/^  MG_EV_WRITE,      \/\/ Data written to socket       long *bytes_written$/;"	e	enum:__anon15
MG_EV_WS_CTL	mongoose.h	/^  MG_EV_WS_CTL,     \/\/ Websocket control msg        struct mg_ws_message *$/;"	e	enum:__anon15
MG_EV_WS_MSG	mongoose.h	/^  MG_EV_WS_MSG,     \/\/ Websocket msg, text or bin   struct mg_ws_message *$/;"	e	enum:__anon15
MG_EV_WS_OPEN	mongoose.h	/^  MG_EV_WS_OPEN,    \/\/ Websocket handshake done     struct mg_http_message *$/;"	e	enum:__anon15
MG_FIRMWARE_CURRENT	mongoose.h	/^enum { MG_FIRMWARE_CURRENT = 0, MG_FIRMWARE_PREVIOUS = 1 };$/;"	e	enum:__anon21
MG_FIRMWARE_PREVIOUS	mongoose.h	/^enum { MG_FIRMWARE_CURRENT = 0, MG_FIRMWARE_PREVIOUS = 1 };$/;"	e	enum:__anon21
MG_FS_DIR	mongoose.h	/^enum { MG_FS_READ = 1, MG_FS_WRITE = 2, MG_FS_DIR = 4 };$/;"	e	enum:__anon9
MG_FS_READ	mongoose.h	/^enum { MG_FS_READ = 1, MG_FS_WRITE = 2, MG_FS_DIR = 4 };$/;"	e	enum:__anon9
MG_FS_WRITE	mongoose.h	/^enum { MG_FS_READ = 1, MG_FS_WRITE = 2, MG_FS_DIR = 4 };$/;"	e	enum:__anon9
MG_HTTP_INDEX	mongoose.h	777;"	d
MG_INFO	mongoose.h	963;"	d
MG_INVALID_SOCKET	mongoose.h	467;"	d
MG_INVALID_SOCKET	mongoose.h	569;"	d
MG_INVALID_SOCKET	mongoose.h	805;"	d
MG_IO_ERR	mongoose.h	/^enum { MG_IO_ERR = -1, MG_IO_WAIT = -2, MG_IO_RESET = -3 };$/;"	e	enum:__anon16
MG_IO_RESET	mongoose.h	/^enum { MG_IO_ERR = -1, MG_IO_WAIT = -2, MG_IO_RESET = -3 };$/;"	e	enum:__anon16
MG_IO_SIZE	mongoose.h	199;"	d
MG_IO_SIZE	mongoose.h	279;"	d
MG_IO_SIZE	mongoose.h	761;"	d
MG_IO_WAIT	mongoose.h	/^enum { MG_IO_ERR = -1, MG_IO_WAIT = -2, MG_IO_RESET = -3 };$/;"	e	enum:__anon16
MG_IPADDR_PARTS	mongoose.h	1069;"	d
MG_IPV6_V6ONLY	mongoose.h	728;"	d
MG_IRAM	mongoose.h	2644;"	d
MG_IRAM	mongoose.h	2646;"	d
MG_JSON_INVALID	mongoose.h	/^enum { MG_JSON_TOO_DEEP = -1, MG_JSON_INVALID = -2, MG_JSON_NOT_FOUND = -3 };$/;"	e	enum:__anon19
MG_JSON_MAX_DEPTH	mongoose.h	2578;"	d
MG_JSON_NOT_FOUND	mongoose.h	/^enum { MG_JSON_TOO_DEEP = -1, MG_JSON_INVALID = -2, MG_JSON_NOT_FOUND = -3 };$/;"	e	enum:__anon19
MG_JSON_TOO_DEEP	mongoose.h	/^enum { MG_JSON_TOO_DEEP = -1, MG_JSON_INVALID = -2, MG_JSON_NOT_FOUND = -3 };$/;"	e	enum:__anon19
MG_LL_DEBUG	mongoose.h	/^enum { MG_LL_NONE, MG_LL_ERROR, MG_LL_INFO, MG_LL_DEBUG, MG_LL_VERBOSE };$/;"	e	enum:__anon8
MG_LL_ERROR	mongoose.h	/^enum { MG_LL_NONE, MG_LL_ERROR, MG_LL_INFO, MG_LL_DEBUG, MG_LL_VERBOSE };$/;"	e	enum:__anon8
MG_LL_INFO	mongoose.h	/^enum { MG_LL_NONE, MG_LL_ERROR, MG_LL_INFO, MG_LL_DEBUG, MG_LL_VERBOSE };$/;"	e	enum:__anon8
MG_LL_NONE	mongoose.h	/^enum { MG_LL_NONE, MG_LL_ERROR, MG_LL_INFO, MG_LL_DEBUG, MG_LL_VERBOSE };$/;"	e	enum:__anon8
MG_LL_VERBOSE	mongoose.h	/^enum { MG_LL_NONE, MG_LL_ERROR, MG_LL_INFO, MG_LL_DEBUG, MG_LL_VERBOSE };$/;"	e	enum:__anon8
MG_LOAD_BE16	mongoose.c	8789;"	d	file:
MG_LOG	mongoose.h	948;"	d
MG_LOG	mongoose.h	956;"	d
MG_MAX_HTTP_HEADERS	mongoose.h	773;"	d
MG_MAX_RECV_SIZE	mongoose.h	765;"	d
MG_MAX_SSI_DEPTH	mongoose.c	7398;"	d	file:
MG_MBEDTLS_RNG_GET	mongoose.c	9674;"	d	file:
MG_MBEDTLS_RNG_GET	mongoose.c	9676;"	d	file:
MG_MEMORY_BARRIER	mongoose.c	6026;"	d	file:
MG_MEMORY_BARRIER	mongoose.c	6028;"	d	file:
MG_MEMORY_BARRIER	mongoose.c	6030;"	d	file:
MG_NULL_STR	mongoose.h	845;"	d
MG_OTA	mongoose.h	2640;"	d
MG_OTADATA_KEY	mongoose.c	5640;"	d	file:
MG_OTA_COMMITTED	mongoose.h	/^  MG_OTA_COMMITTED = 3     \/\/ The firmware is good$/;"	e	enum:__anon20
MG_OTA_CUSTOM	mongoose.h	2637;"	d
MG_OTA_FIRST_BOOT	mongoose.h	/^  MG_OTA_FIRST_BOOT = 1,   \/\/ Device booting the first time after the OTA$/;"	e	enum:__anon20
MG_OTA_FLASH	mongoose.h	2636;"	d
MG_OTA_NONE	mongoose.h	2635;"	d
MG_OTA_UNAVAILABLE	mongoose.h	/^  MG_OTA_UNAVAILABLE = 0,  \/\/ No OTA information is present$/;"	e	enum:__anon20
MG_OTA_UNCOMMITTED	mongoose.h	/^  MG_OTA_UNCOMMITTED = 2,  \/\/ Ditto, but marking us for the rollback$/;"	e	enum:__anon20
MG_PATH_MAX	mongoose.h	144;"	d
MG_PATH_MAX	mongoose.h	170;"	d
MG_PATH_MAX	mongoose.h	239;"	d
MG_PATH_MAX	mongoose.h	401;"	d
MG_PATH_MAX	mongoose.h	483;"	d
MG_PATH_MAX	mongoose.h	782;"	d
MG_PATH_MAX	mongoose.h	784;"	d
MG_PROFILE_ALLOC_GRANULARITY	mongoose.h	2805;"	d
MG_PROF_ADD	mongoose.h	2812;"	d
MG_PROF_ADD	mongoose.h	2846;"	d
MG_PROF_DUMP	mongoose.h	2831;"	d
MG_PROF_DUMP	mongoose.h	2847;"	d
MG_PROF_FREE	mongoose.h	2828;"	d
MG_PROF_FREE	mongoose.h	2845;"	d
MG_PROF_INIT	mongoose.h	2821;"	d
MG_PROF_INIT	mongoose.h	2844;"	d
MG_PUTCHAR	mongoose.h	537;"	d
MG_REG	mongoose.h	1072;"	d
MG_ROUND_DOWN	mongoose.h	1077;"	d
MG_ROUND_UP	mongoose.h	1076;"	d
MG_SET_BITS	mongoose.h	1074;"	d
MG_SOCKET_ERRNO	mongoose.h	813;"	d
MG_SOCKET_TYPE	mongoose.h	468;"	d
MG_SOCKET_TYPE	mongoose.h	568;"	d
MG_SOCKET_TYPE	mongoose.h	809;"	d
MG_SOCK_ERR	mongoose.c	6701;"	d	file:
MG_SOCK_ERR	mongoose.h	490;"	d
MG_SOCK_ERR	mongoose.h	583;"	d
MG_SOCK_ERR	mongoose.h	661;"	d
MG_SOCK_INTR	mongoose.c	6705;"	d	file:
MG_SOCK_INTR	mongoose.h	594;"	d
MG_SOCK_INTR	mongoose.h	673;"	d
MG_SOCK_LISTEN_BACKLOG_SIZE	mongoose.h	322;"	d
MG_SOCK_LISTEN_BACKLOG_SIZE	mongoose.h	789;"	d
MG_SOCK_PENDING	mongoose.c	6709;"	d	file:
MG_SOCK_PENDING	mongoose.h	492;"	d
MG_SOCK_PENDING	mongoose.h	585;"	d
MG_SOCK_PENDING	mongoose.h	663;"	d
MG_SOCK_RESET	mongoose.c	6714;"	d	file:
MG_SOCK_RESET	mongoose.h	497;"	d
MG_SOCK_RESET	mongoose.h	591;"	d
MG_SOCK_RESET	mongoose.h	667;"	d
MG_SSI_BUFSIZ	mongoose.c	7402;"	d	file:
MG_STAT_FUNC	mongoose.c	1597;"	d	file:
MG_STAT_STRUCT	mongoose.c	1593;"	d	file:
MG_TCPIP_MTU_DEFAULT	mongoose.h	2736;"	d
MG_TCPIP_STATE_DOWN	mongoose.h	2749;"	d
MG_TCPIP_STATE_READY	mongoose.h	2752;"	d
MG_TCPIP_STATE_REQ	mongoose.h	2751;"	d
MG_TCPIP_STATE_UP	mongoose.h	2750;"	d
MG_TIMER_CALLED	mongoose.c	7700;"	d	file:
MG_TIMER_ONCE	mongoose.h	975;"	d
MG_TIMER_REPEAT	mongoose.h	976;"	d
MG_TIMER_RUN_NOW	mongoose.h	977;"	d
MG_TLS	mongoose.h	2314;"	d
MG_TLS_BUILTIN	mongoose.h	2310;"	d
MG_TLS_CUSTOM	mongoose.h	2311;"	d
MG_TLS_HS_CLIENT_CHANGE_CIPHER	mongoose.c	/^  MG_TLS_HS_CLIENT_CHANGE_CIPHER,  \/\/ finally wait for ClientChangeCipher$/;"	e	enum:mg_tls_hs_state	file:
MG_TLS_HS_CLIENT_FINISH	mongoose.c	/^  MG_TLS_HS_CLIENT_FINISH,         \/\/ and ClientFinish (encrypted)$/;"	e	enum:mg_tls_hs_state	file:
MG_TLS_HS_CLIENT_HELLO	mongoose.c	/^  MG_TLS_HS_CLIENT_HELLO,  \/\/ first, wait for ClientHello$/;"	e	enum:mg_tls_hs_state	file:
MG_TLS_HS_DONE	mongoose.c	/^  MG_TLS_HS_DONE,  \/\/ finish handshake, start application data flow$/;"	e	enum:mg_tls_hs_state	file:
MG_TLS_HS_SERVER_HELLO	mongoose.c	/^  MG_TLS_HS_SERVER_HELLO,  \/\/ then, send all server handshake data at once$/;"	e	enum:mg_tls_hs_state	file:
MG_TLS_MBED	mongoose.h	2308;"	d
MG_TLS_NONE	mongoose.h	2307;"	d
MG_TLS_OPENSSL	mongoose.h	2309;"	d
MG_U32	mongoose.h	1063;"	d
MG_U8P	mongoose.h	1068;"	d
MG_VERBOSE	mongoose.h	965;"	d
MG_VERSION	mongoose.h	23;"	d
MIBC	mongoose.c	/^      ECR, RESERVED3[6], MMFR, MSCR, RESERVED4[7], MIBC, RESERVED5[7], RCR,$/;"	m	struct:imxrt_enet	file:
MIP_TCP_ACK_MS	mongoose.c	4486;"	d	file:
MIP_TCP_ARP_MS	mongoose.c	4487;"	d	file:
MIP_TCP_FIN_MS	mongoose.c	4489;"	d	file:
MIP_TCP_KEEPALIVE_MS	mongoose.c	4483;"	d	file:
MIP_TCP_SYN_MS	mongoose.c	4488;"	d	file:
MIP_TTYPE_ACK	mongoose.c	4497;"	d	file:
MIP_TTYPE_ARP	mongoose.c	4498;"	d	file:
MIP_TTYPE_FIN	mongoose.c	4500;"	d	file:
MIP_TTYPE_KEEPALIVE	mongoose.c	4496;"	d	file:
MIP_TTYPE_SYN	mongoose.c	4499;"	d	file:
MIX	mongoose.c	7858;"	d	file:
MMCCR	mongoose.c	/^      MACA1LR, MACA2HR, MACA2LR, MACA3HR, MACA3LR, RESERVED14[248], MMCCR,$/;"	m	struct:stm32h_eth	file:
MMCCR	mongoose.c	/^      MACA3LR, RESERVED2[40], MMCCR, MMCRIR, MMCTIR, MMCRIMR, MMCTIMR,$/;"	m	struct:stm32f_eth	file:
MMCRAEPR	mongoose.c	/^      RESERVED16[5], MMCTPCGR, RESERVED17[10], MMCRCRCEPR, MMCRAEPR,$/;"	m	struct:stm32h_eth	file:
MMCRCRCEPR	mongoose.c	/^      RESERVED16[5], MMCTPCGR, RESERVED17[10], MMCRCRCEPR, MMCRAEPR,$/;"	m	struct:stm32h_eth	file:
MMCRFAECR	mongoose.c	/^      RESERVED5[10], MMCRFCECR, MMCRFAECR, RESERVED6[10], MMCRGUFCR,$/;"	m	struct:stm32f_eth	file:
MMCRFCECR	mongoose.c	/^      RESERVED5[10], MMCRFCECR, MMCRFAECR, RESERVED6[10], MMCRGUFCR,$/;"	m	struct:stm32f_eth	file:
MMCRGUFCR	mongoose.c	/^      RESERVED5[10], MMCRFCECR, MMCRFAECR, RESERVED6[10], MMCRGUFCR,$/;"	m	struct:stm32f_eth	file:
MMCRIMR	mongoose.c	/^      MACA3LR, RESERVED2[40], MMCCR, MMCRIR, MMCTIR, MMCRIMR, MMCTIMR,$/;"	m	struct:stm32f_eth	file:
MMCRIMR	mongoose.c	/^      MMCRIR, MMCTIR, MMCRIMR, MMCTIMR, RESERVED15[14], MMCTSCGPR, MMCTMCGPR,$/;"	m	struct:stm32h_eth	file:
MMCRIR	mongoose.c	/^      MACA3LR, RESERVED2[40], MMCCR, MMCRIR, MMCTIR, MMCRIMR, MMCTIMR,$/;"	m	struct:stm32f_eth	file:
MMCRIR	mongoose.c	/^      MMCRIR, MMCTIR, MMCRIMR, MMCTIMR, RESERVED15[14], MMCTSCGPR, MMCTMCGPR,$/;"	m	struct:stm32h_eth	file:
MMCRLPIMSTR	mongoose.c	/^      MMCRLPIMSTR, MMCRLPITCR, RESERVED20[65], MACL3L4C0R, MACL4A0R,$/;"	m	struct:stm32h_eth	file:
MMCRLPITCR	mongoose.c	/^      MMCRLPIMSTR, MMCRLPITCR, RESERVED20[65], MACL3L4C0R, MACL4A0R,$/;"	m	struct:stm32h_eth	file:
MMCRUPGR	mongoose.c	/^      RESERVED18[10], MMCRUPGR, RESERVED19[9], MMCTLPIMSTR, MMCTLPITCR,$/;"	m	struct:stm32h_eth	file:
MMCTGFCR	mongoose.c	/^      RESERVED3[14], MMCTGFSCCR, MMCTGFMSCCR, RESERVED4[5], MMCTGFCR,$/;"	m	struct:stm32f_eth	file:
MMCTGFMSCCR	mongoose.c	/^      RESERVED3[14], MMCTGFSCCR, MMCTGFMSCCR, RESERVED4[5], MMCTGFCR,$/;"	m	struct:stm32f_eth	file:
MMCTGFSCCR	mongoose.c	/^      RESERVED3[14], MMCTGFSCCR, MMCTGFMSCCR, RESERVED4[5], MMCTGFCR,$/;"	m	struct:stm32f_eth	file:
MMCTIMR	mongoose.c	/^      MACA3LR, RESERVED2[40], MMCCR, MMCRIR, MMCTIR, MMCRIMR, MMCTIMR,$/;"	m	struct:stm32f_eth	file:
MMCTIMR	mongoose.c	/^      MMCRIR, MMCTIR, MMCRIMR, MMCTIMR, RESERVED15[14], MMCTSCGPR, MMCTMCGPR,$/;"	m	struct:stm32h_eth	file:
MMCTIR	mongoose.c	/^      MACA3LR, RESERVED2[40], MMCCR, MMCRIR, MMCTIR, MMCRIMR, MMCTIMR,$/;"	m	struct:stm32f_eth	file:
MMCTIR	mongoose.c	/^      MMCRIR, MMCTIR, MMCRIMR, MMCTIMR, RESERVED15[14], MMCTSCGPR, MMCTMCGPR,$/;"	m	struct:stm32h_eth	file:
MMCTLPIMSTR	mongoose.c	/^      RESERVED18[10], MMCRUPGR, RESERVED19[9], MMCTLPIMSTR, MMCTLPITCR,$/;"	m	struct:stm32h_eth	file:
MMCTLPITCR	mongoose.c	/^      RESERVED18[10], MMCRUPGR, RESERVED19[9], MMCTLPIMSTR, MMCTLPITCR,$/;"	m	struct:stm32h_eth	file:
MMCTMCGPR	mongoose.c	/^      MMCRIR, MMCTIR, MMCRIMR, MMCTIMR, RESERVED15[14], MMCTSCGPR, MMCTMCGPR,$/;"	m	struct:stm32h_eth	file:
MMCTPCGR	mongoose.c	/^      RESERVED16[5], MMCTPCGR, RESERVED17[10], MMCRCRCEPR, MMCRAEPR,$/;"	m	struct:stm32h_eth	file:
MMCTSCGPR	mongoose.c	/^      MMCRIR, MMCTIR, MMCRIMR, MMCTIMR, RESERVED15[14], MMCTSCGPR, MMCTMCGPR,$/;"	m	struct:stm32h_eth	file:
MMFR	mongoose.c	/^      ECR, RESERVED3[6], MMFR, MSCR, RESERVED4[7], MIBC, RESERVED5[7], RCR,$/;"	m	struct:imxrt_enet	file:
MONGOOSE_H	mongoose.h	21;"	d
MQTT_CLEAN_SESSION	mongoose.c	3658;"	d	file:
MQTT_CMD_AUTH	mongoose.h	2440;"	d
MQTT_CMD_CONNACK	mongoose.h	2427;"	d
MQTT_CMD_CONNECT	mongoose.h	2426;"	d
MQTT_CMD_DISCONNECT	mongoose.h	2439;"	d
MQTT_CMD_PINGREQ	mongoose.h	2437;"	d
MQTT_CMD_PINGRESP	mongoose.h	2438;"	d
MQTT_CMD_PUBACK	mongoose.h	2429;"	d
MQTT_CMD_PUBCOMP	mongoose.h	2432;"	d
MQTT_CMD_PUBLISH	mongoose.h	2428;"	d
MQTT_CMD_PUBREC	mongoose.h	2430;"	d
MQTT_CMD_PUBREL	mongoose.h	2431;"	d
MQTT_CMD_SUBACK	mongoose.h	2434;"	d
MQTT_CMD_SUBSCRIBE	mongoose.h	2433;"	d
MQTT_CMD_UNSUBACK	mongoose.h	2436;"	d
MQTT_CMD_UNSUBSCRIBE	mongoose.h	2435;"	d
MQTT_HAS_PASSWORD	mongoose.c	3661;"	d	file:
MQTT_HAS_USER_NAME	mongoose.c	3662;"	d	file:
MQTT_HAS_WILL	mongoose.c	3659;"	d	file:
MQTT_INCOMPLETE	mongoose.h	/^enum { MQTT_OK, MQTT_INCOMPLETE, MQTT_MALFORMED };$/;"	e	enum:__anon18
MQTT_MALFORMED	mongoose.h	/^enum { MQTT_OK, MQTT_INCOMPLETE, MQTT_MALFORMED };$/;"	e	enum:__anon18
MQTT_OK	mongoose.h	/^enum { MQTT_OK, MQTT_INCOMPLETE, MQTT_MALFORMED };$/;"	e	enum:__anon18
MQTT_PROP_ASSIGNED_CLIENT_IDENTIFIER	mongoose.h	2449;"	d
MQTT_PROP_AUTHENTICATION_DATA	mongoose.h	2452;"	d
MQTT_PROP_AUTHENTICATION_METHOD	mongoose.h	2451;"	d
MQTT_PROP_CONTENT_TYPE	mongoose.h	2444;"	d
MQTT_PROP_CORRELATION_DATA	mongoose.h	2446;"	d
MQTT_PROP_MAXIMUM_PACKET_SIZE	mongoose.h	2465;"	d
MQTT_PROP_MAXIMUM_QOS	mongoose.h	2462;"	d
MQTT_PROP_MESSAGE_EXPIRY_INTERVAL	mongoose.h	2443;"	d
MQTT_PROP_PAYLOAD_FORMAT_INDICATOR	mongoose.h	2442;"	d
MQTT_PROP_REASON_STRING	mongoose.h	2458;"	d
MQTT_PROP_RECEIVE_MAXIMUM	mongoose.h	2459;"	d
MQTT_PROP_REQUEST_PROBLEM_INFORMATION	mongoose.h	2453;"	d
MQTT_PROP_REQUEST_RESPONSE_INFORMATION	mongoose.h	2455;"	d
MQTT_PROP_RESPONSE_INFORMATION	mongoose.h	2456;"	d
MQTT_PROP_RESPONSE_TOPIC	mongoose.h	2445;"	d
MQTT_PROP_RETAIN_AVAILABLE	mongoose.h	2463;"	d
MQTT_PROP_SERVER_KEEP_ALIVE	mongoose.h	2450;"	d
MQTT_PROP_SERVER_REFERENCE	mongoose.h	2457;"	d
MQTT_PROP_SESSION_EXPIRY_INTERVAL	mongoose.h	2448;"	d
MQTT_PROP_SHARED_SUBSCRIPTION_AVAILABLE	mongoose.h	2468;"	d
MQTT_PROP_SUBSCRIPTION_IDENTIFIER	mongoose.h	2447;"	d
MQTT_PROP_SUBSCRIPTION_IDENTIFIER_AVAILABLE	mongoose.h	2467;"	d
MQTT_PROP_TOPIC_ALIAS	mongoose.h	2461;"	d
MQTT_PROP_TOPIC_ALIAS_MAXIMUM	mongoose.h	2460;"	d
MQTT_PROP_TYPE_BINARY_DATA	mongoose.h	/^  MQTT_PROP_TYPE_BINARY_DATA,$/;"	e	enum:__anon17
MQTT_PROP_TYPE_BYTE	mongoose.h	/^  MQTT_PROP_TYPE_BYTE,$/;"	e	enum:__anon17
MQTT_PROP_TYPE_INT	mongoose.h	/^  MQTT_PROP_TYPE_INT,$/;"	e	enum:__anon17
MQTT_PROP_TYPE_SHORT	mongoose.h	/^  MQTT_PROP_TYPE_SHORT$/;"	e	enum:__anon17
MQTT_PROP_TYPE_STRING	mongoose.h	/^  MQTT_PROP_TYPE_STRING,$/;"	e	enum:__anon17
MQTT_PROP_TYPE_STRING_PAIR	mongoose.h	/^  MQTT_PROP_TYPE_STRING_PAIR,$/;"	e	enum:__anon17
MQTT_PROP_TYPE_VARIABLE_INT	mongoose.h	/^  MQTT_PROP_TYPE_VARIABLE_INT,$/;"	e	enum:__anon17
MQTT_PROP_USER_PROPERTY	mongoose.h	2464;"	d
MQTT_PROP_WILDCARD_SUBSCRIPTION_AVAILABLE	mongoose.h	2466;"	d
MQTT_PROP_WILL_DELAY_INTERVAL	mongoose.h	2454;"	d
MQTT_WILL_RETAIN	mongoose.c	3660;"	d	file:
MRBR	mongoose.c	/^      RESERVED10[7], TFWR, RESERVED11[14], RDSR, TDSR, MRBR[2], RSFL, RSEM,$/;"	m	struct:imxrt_enet	file:
MSCR	mongoose.c	/^      ECR, RESERVED3[6], MMFR, MSCR, RESERVED4[7], MIBC, RESERVED5[7], RCR,$/;"	m	struct:imxrt_enet	file:
MSG_NONBLOCKING	mongoose.c	6693;"	d	file:
MTLISR	mongoose.c	/^      RESERVED32[11], MTLOMR, RESERVED33[7], MTLISR, RESERVED34[55], MTLTQOMR,$/;"	m	struct:stm32h_eth	file:
MTLOMR	mongoose.c	/^      RESERVED32[11], MTLOMR, RESERVED33[7], MTLISR, RESERVED34[55], MTLTQOMR,$/;"	m	struct:stm32h_eth	file:
MTLQICSR	mongoose.c	/^      MTLTQUR, MTLTQDR, RESERVED35[8], MTLQICSR, MTLRQOMR, MTLRQMPOCR, MTLRQDR,$/;"	m	struct:stm32h_eth	file:
MTLRQDR	mongoose.c	/^      MTLTQUR, MTLTQDR, RESERVED35[8], MTLQICSR, MTLRQOMR, MTLRQMPOCR, MTLRQDR,$/;"	m	struct:stm32h_eth	file:
MTLRQMPOCR	mongoose.c	/^      MTLTQUR, MTLTQDR, RESERVED35[8], MTLQICSR, MTLRQOMR, MTLRQMPOCR, MTLRQDR,$/;"	m	struct:stm32h_eth	file:
MTLRQOMR	mongoose.c	/^      MTLTQUR, MTLTQDR, RESERVED35[8], MTLQICSR, MTLRQOMR, MTLRQMPOCR, MTLRQDR,$/;"	m	struct:stm32h_eth	file:
MTLTQDR	mongoose.c	/^      MTLTQUR, MTLTQDR, RESERVED35[8], MTLQICSR, MTLRQOMR, MTLRQMPOCR, MTLRQDR,$/;"	m	struct:stm32h_eth	file:
MTLTQOMR	mongoose.c	/^      RESERVED32[11], MTLOMR, RESERVED33[7], MTLISR, RESERVED34[55], MTLTQOMR,$/;"	m	struct:stm32h_eth	file:
MTLTQUR	mongoose.c	/^      MTLTQUR, MTLTQDR, RESERVED35[8], MTLQICSR, MTLRQOMR, MTLRQMPOCR, MTLRQDR,$/;"	m	struct:stm32h_eth	file:
MUL	mongoose.c	7857;"	d	file:
NLIMBS	mongoose.c	8808;"	d	file:
OPD	mongoose.c	/^      RESERVED6[15], TCR, RESERVED7[7], PALR, PAUR, OPD, TXIC0, TXIC1, TXIC2,$/;"	m	struct:imxrt_enet	file:
OUT	Makefile	/^  OUT ?= -o $(PROG)             # Build output$/;"	m
OUT	Makefile	/^OUT ?= -o $(PROG)                 # Compiler argument for output file$/;"	m
PALR	mongoose.c	/^      RESERVED6[15], TCR, RESERVED7[7], PALR, PAUR, OPD, TXIC0, TXIC1, TXIC2,$/;"	m	struct:imxrt_enet	file:
PATH_MAX	mongoose.h	114;"	d
PAUR	mongoose.c	/^      RESERVED6[15], TCR, RESERVED7[7], PALR, PAUR, OPD, TXIC0, TXIC1, TXIC2,$/;"	m	struct:imxrt_enet	file:
PDIFF	mongoose.c	4480;"	d	file:
PHY_ADDR	mongoose.c	/^  PHY_ADDR = 0,$/;"	e	enum:__anon4	file:
PHY_ADDR	mongoose.c	/^enum { PHY_ADDR = 0, PHY_BCR = 0, PHY_BSR = 1 };$/;"	e	enum:__anon2	file:
PHY_BCR	mongoose.c	/^  PHY_BCR = 0,$/;"	e	enum:__anon4	file:
PHY_BCR	mongoose.c	/^enum { PHY_ADDR = 0, PHY_BCR = 0, PHY_BSR = 1 };$/;"	e	enum:__anon2	file:
PHY_BCR	mongoose.c	/^enum { PHY_BCR = 0, PHY_BSR = 1, PHY_ID1 = 2, PHY_ID2 = 3 };$/;"	e	enum:__anon1	file:
PHY_BCR	mongoose.c	/^enum { PHY_BCR = 0, PHY_BSR = 1, PHY_ID1 = 2, PHY_ID2 = 3, PHY_CSCR = 31 };$/;"	e	enum:__anon3	file:
PHY_BCR_DUPLEX_MODE_Msk	mongoose.c	14236;"	d	file:
PHY_BCR_SPEED_Msk	mongoose.c	14237;"	d	file:
PHY_BSR	mongoose.c	/^  PHY_BSR = 1,$/;"	e	enum:__anon4	file:
PHY_BSR	mongoose.c	/^enum { PHY_ADDR = 0, PHY_BCR = 0, PHY_BSR = 1 };$/;"	e	enum:__anon2	file:
PHY_BSR	mongoose.c	/^enum { PHY_BCR = 0, PHY_BSR = 1, PHY_ID1 = 2, PHY_ID2 = 3 };$/;"	e	enum:__anon1	file:
PHY_BSR	mongoose.c	/^enum { PHY_BCR = 0, PHY_BSR = 1, PHY_ID1 = 2, PHY_ID2 = 3, PHY_CSCR = 31 };$/;"	e	enum:__anon3	file:
PHY_BSR_LINK_STATUS_Msk	mongoose.c	14238;"	d	file:
PHY_CSCR	mongoose.c	/^  PHY_CSCR = 31$/;"	e	enum:__anon4	file:
PHY_CSCR	mongoose.c	/^enum { PHY_BCR = 0, PHY_BSR = 1, PHY_ID1 = 2, PHY_ID2 = 3, PHY_CSCR = 31 };$/;"	e	enum:__anon3	file:
PHY_ID1	mongoose.c	/^enum { PHY_BCR = 0, PHY_BSR = 1, PHY_ID1 = 2, PHY_ID2 = 3 };$/;"	e	enum:__anon1	file:
PHY_ID1	mongoose.c	/^enum { PHY_BCR = 0, PHY_BSR = 1, PHY_ID1 = 2, PHY_ID2 = 3, PHY_CSCR = 31 };$/;"	e	enum:__anon3	file:
PHY_ID2	mongoose.c	/^enum { PHY_BCR = 0, PHY_BSR = 1, PHY_ID1 = 2, PHY_ID2 = 3 };$/;"	e	enum:__anon1	file:
PHY_ID2	mongoose.c	/^enum { PHY_BCR = 0, PHY_BSR = 1, PHY_ID1 = 2, PHY_ID2 = 3, PHY_CSCR = 31 };$/;"	e	enum:__anon3	file:
PROG	Makefile	/^  PROG ?= example.exe           # Use .exe suffix for the binary$/;"	m
PROG	Makefile	/^PROG ?= example                   # Program we are building$/;"	m
PTPPPSCR	mongoose.c	/^      PTPTSAR, PTPTTHR, PTPTTLR, RESERVED8, PTPTSSR, PTPPPSCR, RESERVED9[564],$/;"	m	struct:stm32f_eth	file:
PTPSSIR	mongoose.c	/^      RESERVED7[334], PTPTSCR, PTPSSIR, PTPTSHR, PTPTSLR, PTPTSHUR, PTPTSLUR,$/;"	m	struct:stm32f_eth	file:
PTPTSAR	mongoose.c	/^      PTPTSAR, PTPTTHR, PTPTTLR, RESERVED8, PTPTSSR, PTPPPSCR, RESERVED9[564],$/;"	m	struct:stm32f_eth	file:
PTPTSCR	mongoose.c	/^      RESERVED7[334], PTPTSCR, PTPSSIR, PTPTSHR, PTPTSLR, PTPTSHUR, PTPTSLUR,$/;"	m	struct:stm32f_eth	file:
PTPTSHR	mongoose.c	/^      RESERVED7[334], PTPTSCR, PTPSSIR, PTPTSHR, PTPTSLR, PTPTSHUR, PTPTSLUR,$/;"	m	struct:stm32f_eth	file:
PTPTSHUR	mongoose.c	/^      RESERVED7[334], PTPTSCR, PTPSSIR, PTPTSHR, PTPTSLR, PTPTSHUR, PTPTSLUR,$/;"	m	struct:stm32f_eth	file:
PTPTSLR	mongoose.c	/^      RESERVED7[334], PTPTSCR, PTPSSIR, PTPTSHR, PTPTSLR, PTPTSHUR, PTPTSLUR,$/;"	m	struct:stm32f_eth	file:
PTPTSLUR	mongoose.c	/^      RESERVED7[334], PTPTSCR, PTPSSIR, PTPTSHR, PTPTSLR, PTPTSHUR, PTPTSLUR,$/;"	m	struct:stm32f_eth	file:
PTPTSSR	mongoose.c	/^      PTPTSAR, PTPTTHR, PTPTTLR, RESERVED8, PTPTSSR, PTPPPSCR, RESERVED9[564],$/;"	m	struct:stm32f_eth	file:
PTPTTHR	mongoose.c	/^      PTPTSAR, PTPTTHR, PTPTTLR, RESERVED8, PTPTSSR, PTPPPSCR, RESERVED9[564],$/;"	m	struct:stm32f_eth	file:
PTPTTLR	mongoose.c	/^      PTPTSAR, PTPTTHR, PTPTTLR, RESERVED8, PTPTSSR, PTPPPSCR, RESERVED9[564],$/;"	m	struct:stm32f_eth	file:
PUT_UINT32_BE	mongoose.c	8288;"	d	file:
PUT_UINT32_LE	mongoose.c	7809;"	d	file:
R0	mongoose.c	6236;"	d	file:
R0	mongoose.c	6246;"	d	file:
R1	mongoose.c	6237;"	d	file:
R1	mongoose.c	6249;"	d	file:
R2	mongoose.c	6238;"	d	file:
R2	mongoose.c	6252;"	d	file:
R3	mongoose.c	6239;"	d	file:
R3	mongoose.c	6255;"	d	file:
R4	mongoose.c	6240;"	d	file:
R4	mongoose.c	6258;"	d	file:
RACC	mongoose.c	/^      RAEM, RAFL, TSEM, TAEM, TAFL, TIPG, FTRL, RESERVED12[3], TACC, RACC,$/;"	m	struct:imxrt_enet	file:
RAEM	mongoose.c	/^      RAEM, RAFL, TSEM, TAEM, TAFL, TIPG, FTRL, RESERVED12[3], TACC, RACC,$/;"	m	struct:imxrt_enet	file:
RAFL	mongoose.c	/^      RAEM, RAFL, TSEM, TAEM, TAFL, TIPG, FTRL, RESERVED12[3], TACC, RACC,$/;"	m	struct:imxrt_enet	file:
RCON	mongoose.c	/^static uint32_t RCON[10];  \/\/ AES round constants$/;"	v	file:
RCR	mongoose.c	/^      ECR, RESERVED3[6], MMFR, MSCR, RESERVED4[7], MIBC, RESERVED5[7], RCR,$/;"	m	struct:imxrt_enet	file:
RDAR	mongoose.c	/^  volatile uint32_t RESERVED0, EIR, EIMR, RESERVED1, RDAR, TDAR, RESERVED2[3],$/;"	m	struct:imxrt_enet	file:
RDSR	mongoose.c	/^      RESERVED10[7], TFWR, RESERVED11[14], RDSR, TDSR, MRBR[2], RSFL, RSEM,$/;"	m	struct:imxrt_enet	file:
REPEAT	mongoose.c	10221;"	d	file:
REPEATM	mongoose.c	10228;"	d	file:
REPEATM_0	mongoose.c	10225;"	d	file:
REPEATM_NAME_0	mongoose.c	10223;"	d	file:
REPEATM_NAME_SOME	mongoose.c	10224;"	d	file:
REPEATM_SOME	mongoose.c	10226;"	d	file:
REPEAT_0	mongoose.c	10218;"	d	file:
REPEAT_NAME_0	mongoose.c	10216;"	d	file:
REPEAT_NAME_SOME	mongoose.c	10217;"	d	file:
REPEAT_SOME	mongoose.c	10219;"	d	file:
RESERVED0	mongoose.c	/^      EMACMIIADDR, EMACMIIDATA, EMACFLOWCTL, EMACVLANTG, RESERVED0, EMACSTATUS,$/;"	m	struct:tm4c_emac	file:
RESERVED0	mongoose.c	/^      MACVLANTR, RESERVED0[2], MACRWUFFR, MACPMTCSR, RESERVED1, MACDBGR, MACSR,$/;"	m	struct:stm32f_eth	file:
RESERVED0	mongoose.c	/^  volatile uint32_t RESERVED0, EIR, EIMR, RESERVED1, RDAR, TDAR, RESERVED2[3],$/;"	m	struct:imxrt_enet	file:
RESERVED1	mongoose.c	/^      EMACRWUFF, EMACPMTCTLSTAT, RESERVED1[2], EMACRIS, EMACIM, EMACADDR0H,$/;"	m	struct:tm4c_emac	file:
RESERVED1	mongoose.c	/^      MACVLANTR, RESERVED0[2], MACRWUFFR, MACPMTCSR, RESERVED1, MACDBGR, MACSR,$/;"	m	struct:stm32f_eth	file:
RESERVED1	mongoose.c	/^      RESERVED1[14], MACVTR, RESERVED2, MACVHTR, RESERVED3, MACVIR, MACIVIR,$/;"	m	struct:stm32h_eth	file:
RESERVED1	mongoose.c	/^  volatile uint32_t RESERVED0, EIR, EIMR, RESERVED1, RDAR, TDAR, RESERVED2[3],$/;"	m	struct:imxrt_enet	file:
RESERVED10	mongoose.c	/^      DMAMFBOCR, DMARSWTR, RESERVED10[8], DMACHTDR, DMACHRDR, DMACHTBAR,$/;"	m	struct:stm32f_eth	file:
RESERVED10	mongoose.c	/^      EMACRXCNTALGNERR, RESERVED9[10], EMACRXCNTGUNI, RESERVED10[239],$/;"	m	struct:tm4c_emac	file:
RESERVED10	mongoose.c	/^      MACLTCR, MACLETR, MAC1USTCR, RESERVED9[12], MACVR, MACDR, RESERVED10,$/;"	m	struct:stm32h_eth	file:
RESERVED10	mongoose.c	/^      RESERVED10[7], TFWR, RESERVED11[14], RDSR, TDSR, MRBR[2], RSFL, RSEM,$/;"	m	struct:imxrt_enet	file:
RESERVED11	mongoose.c	/^      EMACVLNINCREP, EMACVLANHASH, RESERVED11[93], EMACTIMSTCTRL, EMACSUBSECINC,$/;"	m	struct:tm4c_emac	file:
RESERVED11	mongoose.c	/^      MACHWF0R, MACHWF1R, MACHWF2R, RESERVED11[54], MACMDIOAR, MACMDIODR,$/;"	m	struct:stm32h_eth	file:
RESERVED11	mongoose.c	/^      RESERVED10[7], TFWR, RESERVED11[14], RDSR, TDSR, MRBR[2], RSFL, RSEM,$/;"	m	struct:imxrt_enet	file:
RESERVED12	mongoose.c	/^      RAEM, RAFL, TSEM, TAEM, TAFL, TIPG, FTRL, RESERVED12[3], TACC, RACC,$/;"	m	struct:imxrt_enet	file:
RESERVED12	mongoose.c	/^      RESERVED12[12], EMACPPS0INTVL, EMACPPS0WIDTH, RESERVED13[294],$/;"	m	struct:tm4c_emac	file:
RESERVED12	mongoose.c	/^      RESERVED12[2], MACARPAR, RESERVED13[59], MACA0HR, MACA0LR, MACA1HR,$/;"	m	struct:stm32h_eth	file:
RESERVED13	mongoose.c	/^      RESERVED12[12], EMACPPS0INTVL, EMACPPS0WIDTH, RESERVED13[294],$/;"	m	struct:tm4c_emac	file:
RESERVED13	mongoose.c	/^      RESERVED12[2], MACARPAR, RESERVED13[59], MACA0HR, MACA0LR, MACA1HR,$/;"	m	struct:stm32h_eth	file:
RESERVED13	mongoose.c	/^      RESERVED13[15], RMON_T_PACKETS, RMON_T_BC_PKT, RMON_T_MC_PKT,$/;"	m	struct:imxrt_enet	file:
RESERVED14	mongoose.c	/^      IEEE_T_SQE, IEEE_T_FDXFC, IEEE_T_OCTETS_OK, RESERVED14[3], RMON_R_PACKETS,$/;"	m	struct:imxrt_enet	file:
RESERVED14	mongoose.c	/^      MACA1LR, MACA2HR, MACA2LR, MACA3HR, MACA3LR, RESERVED14[248], MMCCR,$/;"	m	struct:stm32h_eth	file:
RESERVED14	mongoose.c	/^      RESERVED14[8], EMACHOSTXDESC, EMACHOSRXDESC, EMACHOSTXBA, EMACHOSRXBA,$/;"	m	struct:tm4c_emac	file:
RESERVED15	mongoose.c	/^      MMCRIR, MMCTIR, MMCRIMR, MMCTIMR, RESERVED15[14], MMCTSCGPR, MMCTMCGPR,$/;"	m	struct:stm32h_eth	file:
RESERVED15	mongoose.c	/^      RESERVED15[218], EMACPP, EMACPC, EMACCC, RESERVED16, EMACEPHYRIS,$/;"	m	struct:tm4c_emac	file:
RESERVED15	mongoose.c	/^      RMON_R_OVERSIZE, RMON_R_FRAG, RMON_R_JAB, RESERVED15, RMON_R_P64,$/;"	m	struct:imxrt_enet	file:
RESERVED16	mongoose.c	/^      IEEE_R_OCTETS_OK, RESERVED16[71], ATCR, ATVR, ATOFF, ATPER, ATCOR, ATINC,$/;"	m	struct:imxrt_enet	file:
RESERVED16	mongoose.c	/^      RESERVED15[218], EMACPP, EMACPC, EMACCC, RESERVED16, EMACEPHYRIS,$/;"	m	struct:tm4c_emac	file:
RESERVED16	mongoose.c	/^      RESERVED16[5], MMCTPCGR, RESERVED17[10], MMCRCRCEPR, MMCRAEPR,$/;"	m	struct:stm32h_eth	file:
RESERVED17	mongoose.c	/^      ATSTMP, RESERVED17[122], TGSR, TCSR0, TCCR0, TCSR1, TCCR1, TCSR2, TCCR2,$/;"	m	struct:imxrt_enet	file:
RESERVED17	mongoose.c	/^      RESERVED16[5], MMCTPCGR, RESERVED17[10], MMCRCRCEPR, MMCRAEPR,$/;"	m	struct:stm32h_eth	file:
RESERVED18	mongoose.c	/^      RESERVED18[10], MMCRUPGR, RESERVED19[9], MMCTLPIMSTR, MMCTLPITCR,$/;"	m	struct:stm32h_eth	file:
RESERVED19	mongoose.c	/^      RESERVED18[10], MMCRUPGR, RESERVED19[9], MMCTLPIMSTR, MMCTLPITCR,$/;"	m	struct:stm32h_eth	file:
RESERVED2	mongoose.c	/^      EMACADDR3L, RESERVED2[31], EMACWDOGTO, RESERVED3[8], EMACMMCCTRL,$/;"	m	struct:tm4c_emac	file:
RESERVED2	mongoose.c	/^      MACA3LR, RESERVED2[40], MMCCR, MMCRIR, MMCTIR, MMCRIMR, MMCTIMR,$/;"	m	struct:stm32f_eth	file:
RESERVED2	mongoose.c	/^      RESERVED1[14], MACVTR, RESERVED2, MACVHTR, RESERVED3, MACVIR, MACIVIR,$/;"	m	struct:stm32h_eth	file:
RESERVED2	mongoose.c	/^  volatile uint32_t RESERVED0, EIR, EIMR, RESERVED1, RDAR, TDAR, RESERVED2[3],$/;"	m	struct:imxrt_enet	file:
RESERVED20	mongoose.c	/^      MMCRLPIMSTR, MMCRLPITCR, RESERVED20[65], MACL3L4C0R, MACL4A0R,$/;"	m	struct:stm32h_eth	file:
RESERVED21	mongoose.c	/^      RESERVED21[2], MACL3A0R0R, MACL3A1R0R, MACL3A2R0R, MACL3A3R0R,$/;"	m	struct:stm32h_eth	file:
RESERVED22	mongoose.c	/^      RESERVED22[4], MACL3L4C1R, MACL4A1R, RESERVED23[2], MACL3A0R1R,$/;"	m	struct:stm32h_eth	file:
RESERVED23	mongoose.c	/^      RESERVED22[4], MACL3L4C1R, MACL4A1R, RESERVED23[2], MACL3A0R1R,$/;"	m	struct:stm32h_eth	file:
RESERVED24	mongoose.c	/^      MACL3A1R1R, MACL3A2R1R, MACL3A3R1R, RESERVED24[108], MACTSCR, MACSSIR,$/;"	m	struct:stm32h_eth	file:
RESERVED25	mongoose.c	/^      MACSTSR, MACSTNR, MACSTSUR, MACSTNUR, MACTSAR, RESERVED25, MACTSSR,$/;"	m	struct:stm32h_eth	file:
RESERVED26	mongoose.c	/^      RESERVED26[3], MACTTSSNR, MACTTSSSR, RESERVED27[2], MACACR, RESERVED28,$/;"	m	struct:stm32h_eth	file:
RESERVED27	mongoose.c	/^      RESERVED26[3], MACTTSSNR, MACTTSSSR, RESERVED27[2], MACACR, RESERVED28,$/;"	m	struct:stm32h_eth	file:
RESERVED28	mongoose.c	/^      RESERVED26[3], MACTTSSNR, MACTTSSSR, RESERVED27[2], MACACR, RESERVED28,$/;"	m	struct:stm32h_eth	file:
RESERVED29	mongoose.c	/^      RESERVED29[4], MACPPSCR, RESERVED30[3], MACPPSTTSR, MACPPSTTNR, MACPPSIR,$/;"	m	struct:stm32h_eth	file:
RESERVED3	mongoose.c	/^      ECR, RESERVED3[6], MMFR, MSCR, RESERVED4[7], MIBC, RESERVED5[7], RCR,$/;"	m	struct:imxrt_enet	file:
RESERVED3	mongoose.c	/^      EMACADDR3L, RESERVED2[31], EMACWDOGTO, RESERVED3[8], EMACMMCCTRL,$/;"	m	struct:tm4c_emac	file:
RESERVED3	mongoose.c	/^      RESERVED1[14], MACVTR, RESERVED2, MACVHTR, RESERVED3, MACVIR, MACIVIR,$/;"	m	struct:stm32h_eth	file:
RESERVED3	mongoose.c	/^      RESERVED3[14], MMCTGFSCCR, MMCTGFMSCCR, RESERVED4[5], MMCTGFCR,$/;"	m	struct:stm32f_eth	file:
RESERVED30	mongoose.c	/^      RESERVED29[4], MACPPSCR, RESERVED30[3], MACPPSTTSR, MACPPSTTNR, MACPPSIR,$/;"	m	struct:stm32h_eth	file:
RESERVED31	mongoose.c	/^      MACPPSWR, RESERVED31[12], MACPOCR, MACSPI0R, MACSPI1R, MACSPI2R, MACLMIR,$/;"	m	struct:stm32h_eth	file:
RESERVED32	mongoose.c	/^      RESERVED32[11], MTLOMR, RESERVED33[7], MTLISR, RESERVED34[55], MTLTQOMR,$/;"	m	struct:stm32h_eth	file:
RESERVED33	mongoose.c	/^      RESERVED32[11], MTLOMR, RESERVED33[7], MTLISR, RESERVED34[55], MTLTQOMR,$/;"	m	struct:stm32h_eth	file:
RESERVED34	mongoose.c	/^      RESERVED32[11], MTLOMR, RESERVED33[7], MTLISR, RESERVED34[55], MTLTQOMR,$/;"	m	struct:stm32h_eth	file:
RESERVED35	mongoose.c	/^      MTLTQUR, MTLTQDR, RESERVED35[8], MTLQICSR, MTLRQOMR, MTLRQMPOCR, MTLRQDR,$/;"	m	struct:stm32h_eth	file:
RESERVED36	mongoose.c	/^      RESERVED36[177], DMAMR, DMASBMR, DMAISR, DMADSR, RESERVED37[60], DMACCR,$/;"	m	struct:stm32h_eth	file:
RESERVED37	mongoose.c	/^      RESERVED36[177], DMAMR, DMASBMR, DMAISR, DMADSR, RESERVED37[60], DMACCR,$/;"	m	struct:stm32h_eth	file:
RESERVED38	mongoose.c	/^      DMACTCR, DMACRCR, RESERVED38[2], DMACTDLAR, RESERVED39, DMACRDLAR,$/;"	m	struct:stm32h_eth	file:
RESERVED39	mongoose.c	/^      DMACTCR, DMACRCR, RESERVED38[2], DMACTDLAR, RESERVED39, DMACRDLAR,$/;"	m	struct:stm32h_eth	file:
RESERVED4	mongoose.c	/^      ECR, RESERVED3[6], MMFR, MSCR, RESERVED4[7], MIBC, RESERVED5[7], RCR,$/;"	m	struct:imxrt_enet	file:
RESERVED4	mongoose.c	/^      EMACMMCRXRIS, EMACMMCTXRIS, EMACMMCRXIM, EMACMMCTXIM, RESERVED4,$/;"	m	struct:tm4c_emac	file:
RESERVED4	mongoose.c	/^      RESERVED3[14], MMCTGFSCCR, MMCTGFMSCCR, RESERVED4[5], MMCTGFCR,$/;"	m	struct:stm32f_eth	file:
RESERVED4	mongoose.c	/^      RESERVED4[2], MACTFCR, RESERVED5[7], MACRFCR, RESERVED6[7], MACISR,$/;"	m	struct:stm32h_eth	file:
RESERVED40	mongoose.c	/^      DMACTDTPR, RESERVED40, DMACRDTPR, DMACTDRLR, DMACRDRLR, DMACIER,$/;"	m	struct:stm32h_eth	file:
RESERVED41	mongoose.c	/^      DMACRIWTR, DMACSFCSR, RESERVED41, DMACCATDR, RESERVED42, DMACCARDR,$/;"	m	struct:stm32h_eth	file:
RESERVED42	mongoose.c	/^      DMACRIWTR, DMACSFCSR, RESERVED41, DMACCATDR, RESERVED42, DMACCARDR,$/;"	m	struct:stm32h_eth	file:
RESERVED43	mongoose.c	/^      RESERVED43, DMACCATBR, RESERVED44, DMACCARBR, DMACSR, RESERVED45[2],$/;"	m	struct:stm32h_eth	file:
RESERVED44	mongoose.c	/^      RESERVED43, DMACCATBR, RESERVED44, DMACCARBR, DMACSR, RESERVED45[2],$/;"	m	struct:stm32h_eth	file:
RESERVED45	mongoose.c	/^      RESERVED43, DMACCATBR, RESERVED44, DMACCARBR, DMACSR, RESERVED45[2],$/;"	m	struct:stm32h_eth	file:
RESERVED5	mongoose.c	/^      ECR, RESERVED3[6], MMFR, MSCR, RESERVED4[7], MIBC, RESERVED5[7], RCR,$/;"	m	struct:imxrt_enet	file:
RESERVED5	mongoose.c	/^      EMACTXCNTGB, RESERVED5[12], EMACTXCNTSCOL, EMACTXCNTMCOL, RESERVED6[4],$/;"	m	struct:tm4c_emac	file:
RESERVED5	mongoose.c	/^      RESERVED4[2], MACTFCR, RESERVED5[7], MACRFCR, RESERVED6[7], MACISR,$/;"	m	struct:stm32h_eth	file:
RESERVED5	mongoose.c	/^      RESERVED5[10], MMCRFCECR, MMCRFAECR, RESERVED6[10], MMCRGUFCR,$/;"	m	struct:stm32f_eth	file:
RESERVED6	mongoose.c	/^      EMACTXCNTGB, RESERVED5[12], EMACTXCNTSCOL, EMACTXCNTMCOL, RESERVED6[4],$/;"	m	struct:tm4c_emac	file:
RESERVED6	mongoose.c	/^      RESERVED4[2], MACTFCR, RESERVED5[7], MACRFCR, RESERVED6[7], MACISR,$/;"	m	struct:stm32h_eth	file:
RESERVED6	mongoose.c	/^      RESERVED5[10], MMCRFCECR, MMCRFAECR, RESERVED6[10], MMCRGUFCR,$/;"	m	struct:stm32f_eth	file:
RESERVED6	mongoose.c	/^      RESERVED6[15], TCR, RESERVED7[7], PALR, PAUR, OPD, TXIC0, TXIC1, TXIC2,$/;"	m	struct:imxrt_enet	file:
RESERVED7	mongoose.c	/^      EMACTXOCTCNTG, RESERVED7[6], EMACRXCNTGB, RESERVED8[4], EMACRXCNTCRCERR,$/;"	m	struct:tm4c_emac	file:
RESERVED7	mongoose.c	/^      MACIER, MACRXTXSR, RESERVED7, MACPCSR, MACRWKPFR, RESERVED8[2], MACLCSR,$/;"	m	struct:stm32h_eth	file:
RESERVED7	mongoose.c	/^      RESERVED6[15], TCR, RESERVED7[7], PALR, PAUR, OPD, TXIC0, TXIC1, TXIC2,$/;"	m	struct:imxrt_enet	file:
RESERVED7	mongoose.c	/^      RESERVED7[334], PTPTSCR, PTPSSIR, PTPTSHR, PTPTSLR, PTPTSHUR, PTPTSLUR,$/;"	m	struct:stm32f_eth	file:
RESERVED8	mongoose.c	/^      EMACTXOCTCNTG, RESERVED7[6], EMACRXCNTGB, RESERVED8[4], EMACRXCNTCRCERR,$/;"	m	struct:tm4c_emac	file:
RESERVED8	mongoose.c	/^      MACIER, MACRXTXSR, RESERVED7, MACPCSR, MACRWKPFR, RESERVED8[2], MACLCSR,$/;"	m	struct:stm32h_eth	file:
RESERVED8	mongoose.c	/^      PTPTSAR, PTPTTHR, PTPTTLR, RESERVED8, PTPTSSR, PTPPPSCR, RESERVED9[564],$/;"	m	struct:stm32f_eth	file:
RESERVED8	mongoose.c	/^      RESERVED8, RXIC0, RXIC1, RXIC2, RESERVED9[3], IAUR, IALR, GAUR, GALR,$/;"	m	struct:imxrt_enet	file:
RESERVED9	mongoose.c	/^      EMACRXCNTALGNERR, RESERVED9[10], EMACRXCNTGUNI, RESERVED10[239],$/;"	m	struct:tm4c_emac	file:
RESERVED9	mongoose.c	/^      MACLTCR, MACLETR, MAC1USTCR, RESERVED9[12], MACVR, MACDR, RESERVED10,$/;"	m	struct:stm32h_eth	file:
RESERVED9	mongoose.c	/^      PTPTSAR, PTPTTHR, PTPTTLR, RESERVED8, PTPTSSR, PTPPPSCR, RESERVED9[564],$/;"	m	struct:stm32f_eth	file:
RESERVED9	mongoose.c	/^      RESERVED8, RXIC0, RXIC1, RXIC2, RESERVED9[3], IAUR, IALR, GAUR, GALR,$/;"	m	struct:imxrt_enet	file:
RMON_R_BC_PKT	mongoose.c	/^      RMON_R_BC_PKT, RMON_R_MC_PKT, RMON_R_CRC_ALIGN, RMON_R_UNDERSIZE,$/;"	m	struct:imxrt_enet	file:
RMON_R_CRC_ALIGN	mongoose.c	/^      RMON_R_BC_PKT, RMON_R_MC_PKT, RMON_R_CRC_ALIGN, RMON_R_UNDERSIZE,$/;"	m	struct:imxrt_enet	file:
RMON_R_FRAG	mongoose.c	/^      RMON_R_OVERSIZE, RMON_R_FRAG, RMON_R_JAB, RESERVED15, RMON_R_P64,$/;"	m	struct:imxrt_enet	file:
RMON_R_GTE2048	mongoose.c	/^      RMON_R_P1024TO2047, RMON_R_GTE2048, RMON_R_OCTETS, IEEE_R_DROP,$/;"	m	struct:imxrt_enet	file:
RMON_R_JAB	mongoose.c	/^      RMON_R_OVERSIZE, RMON_R_FRAG, RMON_R_JAB, RESERVED15, RMON_R_P64,$/;"	m	struct:imxrt_enet	file:
RMON_R_MC_PKT	mongoose.c	/^      RMON_R_BC_PKT, RMON_R_MC_PKT, RMON_R_CRC_ALIGN, RMON_R_UNDERSIZE,$/;"	m	struct:imxrt_enet	file:
RMON_R_OCTETS	mongoose.c	/^      RMON_R_P1024TO2047, RMON_R_GTE2048, RMON_R_OCTETS, IEEE_R_DROP,$/;"	m	struct:imxrt_enet	file:
RMON_R_OVERSIZE	mongoose.c	/^      RMON_R_OVERSIZE, RMON_R_FRAG, RMON_R_JAB, RESERVED15, RMON_R_P64,$/;"	m	struct:imxrt_enet	file:
RMON_R_P1024TO2047	mongoose.c	/^      RMON_R_P1024TO2047, RMON_R_GTE2048, RMON_R_OCTETS, IEEE_R_DROP,$/;"	m	struct:imxrt_enet	file:
RMON_R_P128TO255	mongoose.c	/^      RMON_R_P65TO127, RMON_R_P128TO255, RMON_R_P256TO511, RMON_R_P512TO1023,$/;"	m	struct:imxrt_enet	file:
RMON_R_P256TO511	mongoose.c	/^      RMON_R_P65TO127, RMON_R_P128TO255, RMON_R_P256TO511, RMON_R_P512TO1023,$/;"	m	struct:imxrt_enet	file:
RMON_R_P512TO1023	mongoose.c	/^      RMON_R_P65TO127, RMON_R_P128TO255, RMON_R_P256TO511, RMON_R_P512TO1023,$/;"	m	struct:imxrt_enet	file:
RMON_R_P64	mongoose.c	/^      RMON_R_OVERSIZE, RMON_R_FRAG, RMON_R_JAB, RESERVED15, RMON_R_P64,$/;"	m	struct:imxrt_enet	file:
RMON_R_P65TO127	mongoose.c	/^      RMON_R_P65TO127, RMON_R_P128TO255, RMON_R_P256TO511, RMON_R_P512TO1023,$/;"	m	struct:imxrt_enet	file:
RMON_R_PACKETS	mongoose.c	/^      IEEE_T_SQE, IEEE_T_FDXFC, IEEE_T_OCTETS_OK, RESERVED14[3], RMON_R_PACKETS,$/;"	m	struct:imxrt_enet	file:
RMON_R_UNDERSIZE	mongoose.c	/^      RMON_R_BC_PKT, RMON_R_MC_PKT, RMON_R_CRC_ALIGN, RMON_R_UNDERSIZE,$/;"	m	struct:imxrt_enet	file:
RMON_T_BC_PKT	mongoose.c	/^      RESERVED13[15], RMON_T_PACKETS, RMON_T_BC_PKT, RMON_T_MC_PKT,$/;"	m	struct:imxrt_enet	file:
RMON_T_COL	mongoose.c	/^      RMON_T_JAB, RMON_T_COL, RMON_T_P64, RMON_T_P65TO127, RMON_T_P128TO255,$/;"	m	struct:imxrt_enet	file:
RMON_T_CRC_ALIGN	mongoose.c	/^      RMON_T_CRC_ALIGN, RMON_T_UNDERSIZE, RMON_T_OVERSIZE, RMON_T_FRAG,$/;"	m	struct:imxrt_enet	file:
RMON_T_FRAG	mongoose.c	/^      RMON_T_CRC_ALIGN, RMON_T_UNDERSIZE, RMON_T_OVERSIZE, RMON_T_FRAG,$/;"	m	struct:imxrt_enet	file:
RMON_T_GTE2048	mongoose.c	/^      RMON_T_P256TO511, RMON_T_P512TO1023, RMON_T_P1024TO2048, RMON_T_GTE2048,$/;"	m	struct:imxrt_enet	file:
RMON_T_JAB	mongoose.c	/^      RMON_T_JAB, RMON_T_COL, RMON_T_P64, RMON_T_P65TO127, RMON_T_P128TO255,$/;"	m	struct:imxrt_enet	file:
RMON_T_MC_PKT	mongoose.c	/^      RESERVED13[15], RMON_T_PACKETS, RMON_T_BC_PKT, RMON_T_MC_PKT,$/;"	m	struct:imxrt_enet	file:
RMON_T_OCTETS	mongoose.c	/^      RMON_T_OCTETS, IEEE_T_DROP, IEEE_T_FRAME_OK, IEEE_T_1COL, IEEE_T_MCOL,$/;"	m	struct:imxrt_enet	file:
RMON_T_OVERSIZE	mongoose.c	/^      RMON_T_CRC_ALIGN, RMON_T_UNDERSIZE, RMON_T_OVERSIZE, RMON_T_FRAG,$/;"	m	struct:imxrt_enet	file:
RMON_T_P1024TO2048	mongoose.c	/^      RMON_T_P256TO511, RMON_T_P512TO1023, RMON_T_P1024TO2048, RMON_T_GTE2048,$/;"	m	struct:imxrt_enet	file:
RMON_T_P128TO255	mongoose.c	/^      RMON_T_JAB, RMON_T_COL, RMON_T_P64, RMON_T_P65TO127, RMON_T_P128TO255,$/;"	m	struct:imxrt_enet	file:
RMON_T_P256TO511	mongoose.c	/^      RMON_T_P256TO511, RMON_T_P512TO1023, RMON_T_P1024TO2048, RMON_T_GTE2048,$/;"	m	struct:imxrt_enet	file:
RMON_T_P512TO1023	mongoose.c	/^      RMON_T_P256TO511, RMON_T_P512TO1023, RMON_T_P1024TO2048, RMON_T_GTE2048,$/;"	m	struct:imxrt_enet	file:
RMON_T_P64	mongoose.c	/^      RMON_T_JAB, RMON_T_COL, RMON_T_P64, RMON_T_P65TO127, RMON_T_P128TO255,$/;"	m	struct:imxrt_enet	file:
RMON_T_P65TO127	mongoose.c	/^      RMON_T_JAB, RMON_T_COL, RMON_T_P64, RMON_T_P65TO127, RMON_T_P128TO255,$/;"	m	struct:imxrt_enet	file:
RMON_T_PACKETS	mongoose.c	/^      RESERVED13[15], RMON_T_PACKETS, RMON_T_BC_PKT, RMON_T_MC_PKT,$/;"	m	struct:imxrt_enet	file:
RMON_T_UNDERSIZE	mongoose.c	/^      RMON_T_CRC_ALIGN, RMON_T_UNDERSIZE, RMON_T_OVERSIZE, RMON_T_FRAG,$/;"	m	struct:imxrt_enet	file:
ROTL8	mongoose.c	7855;"	d	file:
RSEM	mongoose.c	/^      RESERVED10[7], TFWR, RESERVED11[14], RDSR, TDSR, MRBR[2], RSFL, RSEM,$/;"	m	struct:imxrt_enet	file:
RSFL	mongoose.c	/^      RESERVED10[7], TFWR, RESERVED11[14], RDSR, TDSR, MRBR[2], RSFL, RSEM,$/;"	m	struct:imxrt_enet	file:
RSb	mongoose.c	/^static uchar RSb[256];     \/\/ Reverse substitution box (RSb)$/;"	v	file:
RT0	mongoose.c	/^static uint32_t RT0[256];  \/\/ Reverse key schedule assembly tables$/;"	v	file:
RT1	mongoose.c	/^static uint32_t RT1[256];$/;"	v	file:
RT2	mongoose.c	/^static uint32_t RT2[256];$/;"	v	file:
RT3	mongoose.c	/^static uint32_t RT3[256];$/;"	v	file:
RXIC0	mongoose.c	/^      RESERVED8, RXIC0, RXIC1, RXIC2, RESERVED9[3], IAUR, IALR, GAUR, GALR,$/;"	m	struct:imxrt_enet	file:
RXIC1	mongoose.c	/^      RESERVED8, RXIC0, RXIC1, RXIC2, RESERVED9[3], IAUR, IALR, GAUR, GALR,$/;"	m	struct:imxrt_enet	file:
RXIC2	mongoose.c	/^      RESERVED8, RXIC0, RXIC1, RXIC2, RESERVED9[3], IAUR, IALR, GAUR, GALR,$/;"	m	struct:imxrt_enet	file:
S2PTR	mongoose.c	6690;"	d	file:
SECOND_ARG	mongoose.c	10208;"	d	file:
SHA256_HashContext	mongoose.c	/^typedef struct SHA256_HashContext {$/;"	s	file:
SHA256_HashContext	mongoose.c	/^} SHA256_HashContext;$/;"	t	typeref:struct:SHA256_HashContext	file:
SIGPIPE	mongoose.h	514;"	d
SNTP_MAX_FRAC	mongoose.c	6596;"	d	file:
SNTP_TIME_OFFSET	mongoose.c	6595;"	d	file:
SOCK_DGRAM	mongoose.h	577;"	d
SOCK_STREAM	mongoose.h	576;"	d
SOL_SOCKET	mongoose.h	580;"	d
SOME_CHECK_0	mongoose.c	10209;"	d	file:
SOME_OR_0	mongoose.c	10211;"	d	file:
SOURCES	Makefile	/^SOURCES = main.c mongoose.c  packed_fs.c      # Source code files, packed_fs.c contains ca.pem, which contains CA certs for TLS$/;"	m
SO_BROADCAST	mongoose.h	578;"	d
SO_ERROR	mongoose.h	579;"	d
SO_EXCLUSIVEADDRUSE	mongoose.h	487;"	d
SO_REUSEADDR	mongoose.h	581;"	d
STACK_OF	mongoose.c	/^static STACK_OF(X509_INFO) * load_ca_certs(struct mg_str ca) {$/;"	f	file:
STR	mongoose.c	10165;"	d	file:
STRX	mongoose.c	10164;"	d	file:
S_ISDIR	mongoose.h	506;"	d
TACC	mongoose.c	/^      RAEM, RAFL, TSEM, TAEM, TAFL, TIPG, FTRL, RESERVED12[3], TACC, RACC,$/;"	m	struct:imxrt_enet	file:
TAEM	mongoose.c	/^      RAEM, RAFL, TSEM, TAEM, TAFL, TIPG, FTRL, RESERVED12[3], TACC, RACC,$/;"	m	struct:imxrt_enet	file:
TAFL	mongoose.c	/^      RAEM, RAFL, TSEM, TAEM, TAFL, TIPG, FTRL, RESERVED12[3], TACC, RACC,$/;"	m	struct:imxrt_enet	file:
TCCR0	mongoose.c	/^      ATSTMP, RESERVED17[122], TGSR, TCSR0, TCCR0, TCSR1, TCCR1, TCSR2, TCCR2,$/;"	m	struct:imxrt_enet	file:
TCCR1	mongoose.c	/^      ATSTMP, RESERVED17[122], TGSR, TCSR0, TCCR0, TCSR1, TCCR1, TCSR2, TCCR2,$/;"	m	struct:imxrt_enet	file:
TCCR2	mongoose.c	/^      ATSTMP, RESERVED17[122], TGSR, TCSR0, TCCR0, TCSR1, TCCR1, TCSR2, TCCR2,$/;"	m	struct:imxrt_enet	file:
TCP_NODELAY	mongoose.h	659;"	d
TCR	mongoose.c	/^      RESERVED6[15], TCR, RESERVED7[7], PALR, PAUR, OPD, TXIC0, TXIC1, TXIC2,$/;"	m	struct:imxrt_enet	file:
TCSR0	mongoose.c	/^      ATSTMP, RESERVED17[122], TGSR, TCSR0, TCCR0, TCSR1, TCCR1, TCSR2, TCCR2,$/;"	m	struct:imxrt_enet	file:
TCSR1	mongoose.c	/^      ATSTMP, RESERVED17[122], TGSR, TCSR0, TCCR0, TCSR1, TCCR1, TCSR2, TCCR2,$/;"	m	struct:imxrt_enet	file:
TCSR2	mongoose.c	/^      ATSTMP, RESERVED17[122], TGSR, TCSR0, TCCR0, TCSR1, TCCR1, TCSR2, TCCR2,$/;"	m	struct:imxrt_enet	file:
TCSR3	mongoose.c	/^      TCSR3;$/;"	m	struct:imxrt_enet	file:
TDAR	mongoose.c	/^  volatile uint32_t RESERVED0, EIR, EIMR, RESERVED1, RDAR, TDAR, RESERVED2[3],$/;"	m	struct:imxrt_enet	file:
TDSR	mongoose.c	/^      RESERVED10[7], TFWR, RESERVED11[14], RDSR, TDSR, MRBR[2], RSFL, RSEM,$/;"	m	struct:imxrt_enet	file:
TFWR	mongoose.c	/^      RESERVED10[7], TFWR, RESERVED11[14], RDSR, TDSR, MRBR[2], RSFL, RSEM,$/;"	m	struct:imxrt_enet	file:
TGSR	mongoose.c	/^      ATSTMP, RESERVED17[122], TGSR, TCSR0, TCCR0, TCSR1, TCCR1, TCSR2, TCCR2,$/;"	m	struct:imxrt_enet	file:
TH_ACK	mongoose.c	4571;"	d	file:
TH_CWR	mongoose.c	4574;"	d	file:
TH_ECE	mongoose.c	4573;"	d	file:
TH_FIN	mongoose.c	4567;"	d	file:
TH_PUSH	mongoose.c	4570;"	d	file:
TH_RST	mongoose.c	4569;"	d	file:
TH_SYN	mongoose.c	4568;"	d	file:
TH_URG	mongoose.c	4572;"	d	file:
TIPG	mongoose.c	/^      RAEM, RAFL, TSEM, TAEM, TAFL, TIPG, FTRL, RESERVED12[3], TACC, RACC,$/;"	m	struct:imxrt_enet	file:
TLS_HDR_SIZE	mongoose.c	8790;"	d	file:
TSEM	mongoose.c	/^      RAEM, RAFL, TSEM, TAEM, TAFL, TIPG, FTRL, RESERVED12[3], TACC, RACC,$/;"	m	struct:imxrt_enet	file:
TXIC0	mongoose.c	/^      RESERVED6[15], TCR, RESERVED7[7], PALR, PAUR, OPD, TXIC0, TXIC1, TXIC2,$/;"	m	struct:imxrt_enet	file:
TXIC1	mongoose.c	/^      RESERVED6[15], TCR, RESERVED7[7], PALR, PAUR, OPD, TXIC0, TXIC1, TXIC2,$/;"	m	struct:imxrt_enet	file:
TXIC2	mongoose.c	/^      RESERVED6[15], TCR, RESERVED7[7], PALR, PAUR, OPD, TXIC0, TXIC1, TXIC2,$/;"	m	struct:imxrt_enet	file:
W5500_CR	mongoose.c	/^enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };$/;"	e	enum:__anon6	file:
W5500_RX0	mongoose.c	/^enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };$/;"	e	enum:__anon6	file:
W5500_S0	mongoose.c	/^enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };$/;"	e	enum:__anon6	file:
W5500_TX0	mongoose.c	/^enum { W5500_CR = 0, W5500_S0 = 1, W5500_TX0 = 2, W5500_RX0 = 3 };$/;"	e	enum:__anon6	file:
WEBSOCKET_OP_BINARY	mongoose.h	2391;"	d
WEBSOCKET_OP_CLOSE	mongoose.h	2392;"	d
WEBSOCKET_OP_CONTINUE	mongoose.h	2389;"	d
WEBSOCKET_OP_PING	mongoose.h	2393;"	d
WEBSOCKET_OP_PONG	mongoose.h	2394;"	d
WEBSOCKET_OP_TEXT	mongoose.h	2390;"	d
WIN32_LEAN_AND_MEAN	mongoose.h	410;"	d
X25519_BASE_POINT	mongoose.c	/^const uint8_t X25519_BASE_POINT[X25519_BYTES] = {9};$/;"	v
X25519_BYTES	mongoose.c	8798;"	d	file:
X25519_WBITS	mongoose.c	8801;"	d	file:
XTIME	mongoose.c	7856;"	d	file:
XYcZ_add	mongoose.c	/^static void XYcZ_add(uECC_word_t *X1, uECC_word_t *Y1, uECC_word_t *X2,$/;"	f	file:
XYcZ_addC	mongoose.c	/^static void XYcZ_addC(uECC_word_t *X1, uECC_word_t *Y1, uECC_word_t *X2,$/;"	f	file:
XYcZ_initial_double	mongoose.c	/^static void XYcZ_initial_double(uECC_word_t *X1, uECC_word_t *Y1,$/;"	f	file:
_CRT_SECURE_NO_WARNINGS	mongoose.h	414;"	d
_DARWIN_UNLIMITED_SELECT	mongoose.h	350;"	d
_POSIX_TIMERS	mongoose.h	224;"	d
_UECC_CURVE_SPECIFIC_H_	mongoose.c	10905;"	d	file:
_UECC_H_	mongoose.h	1466;"	d
_UECC_TYPES_H_	mongoose.h	1998;"	d
_UECC_VLI_H_	mongoose.h	1839;"	d
_WINSOCK_DEPRECATED_NO_WARNINGS	mongoose.h	418;"	d
__func__	mongoose.h	437;"	d
a24	mongoose.c	/^static const limb_t a24[1] = {121665};$/;"	v	file:
accept	mongoose.h	598;"	d
accept_conn	mongoose.c	/^static struct mg_connection *accept_conn(struct mg_connection *lsn,$/;"	f	file:
accept_conn	mongoose.c	/^static void accept_conn(struct mg_mgr *mgr, struct mg_connection *lsn) {$/;"	f	file:
ack	mongoose.c	/^  uint32_t ack;    \/\/ Acknowledgement number$/;"	m	struct:tcp	file:
ack	mongoose.c	/^  uint32_t seq, ack;           \/\/ TCP seq\/ack counters$/;"	m	struct:connstate	file:
ack	mongoose.h	/^  uint8_t ack;          \/\/ CONNACK return code, 0 = success$/;"	m	struct:mg_mqtt_message
aclass	mongoose.h	/^  uint16_t aclass;  \/\/ Address class$/;"	m	struct:mg_dns_rr
active_dns_requests	mongoose.h	/^  void *active_dns_requests;    \/\/ DNS requests in progress$/;"	m	struct:mg_mgr
adc	mongoose.c	/^static limb_t adc(limb_t *carry, limb_t acc, limb_t mand) {$/;"	f	file:
adc0	mongoose.c	/^static limb_t adc0(limb_t *carry, limb_t acc) {$/;"	f	file:
add	mongoose.c	/^static void add(fe out, const fe a, const fe b) {$/;"	f	file:
add_ca_certs	mongoose.c	/^static bool add_ca_certs(SSL_CTX *ctx, STACK_OF(X509_INFO) * certs) {$/;"	f	file:
add_len	mongoose.h	/^  uint64_t add_len;     \/\/ total add data length$/;"	m	struct:__anon14
addexp	mongoose.c	/^static int addexp(char *buf, int e, int sign) {$/;"	f	file:
addr	mongoose.c	/^  uint8_t addr, ctrl, proto[2], code, id, len[2];$/;"	m	struct:lcp	file:
addr	mongoose.h	/^  struct mg_addr addr;  \/\/ Resolved address$/;"	m	struct:mg_dns_message	typeref:struct:mg_dns_message::mg_addr
aes_cipher	mongoose.c	/^int aes_cipher(aes_context *ctx, const uchar input[16], uchar output[16]) {$/;"	f
aes_context	mongoose.h	/^} aes_context;$/;"	t	typeref:struct:__anon13
aes_ctx	mongoose.h	/^  aes_context aes_ctx;  \/\/ cipher context used$/;"	m	struct:__anon14
aes_gcm_decrypt	mongoose.c	/^int aes_gcm_decrypt(unsigned char *output, const unsigned char *input,$/;"	f
aes_gcm_encrypt	mongoose.c	/^int aes_gcm_encrypt(unsigned char *output,  \/\/$/;"	f
aes_init_keygen_tables	mongoose.c	/^void aes_init_keygen_tables(void) {$/;"	f
aes_set_decryption_key	mongoose.c	/^static int aes_set_decryption_key(aes_context *ctx, const uchar *key, uint keysize) {$/;"	f	file:
aes_set_encryption_key	mongoose.c	/^static int aes_set_encryption_key(aes_context *ctx, const uchar *key, uint keysize) {$/;"	f	file:
aes_setkey	mongoose.c	/^int aes_setkey(aes_context *ctx,  \/\/ AES context provided by our caller$/;"	f
aes_tables_inited	mongoose.c	/^static int aes_tables_inited = 0;  \/\/ run-once flag for performing key$/;"	v	file:
alen	mongoose.h	/^  uint16_t alen;    \/\/ Address length$/;"	m	struct:mg_dns_rr
align	mongoose.h	/^  size_t align;        \/\/ Alignment during allocation$/;"	m	struct:mg_iobuf
alloca	mongoose.h	473;"	d
apply_z	mongoose.c	/^static void apply_z(uECC_word_t *X1, uECC_word_t *Y1,$/;"	f	file:
arg	mongoose.h	/^  void *arg;                \/\/ Function argument$/;"	m	struct:mg_timer
arp	mongoose.c	/^  struct arp *arp;$/;"	m	struct:pkt	typeref:struct:pkt::arp	file:
arp	mongoose.c	/^struct arp {$/;"	s	file:
arp_ask	mongoose.c	/^static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {$/;"	f	file:
asm_add	mongoose.c	10336;"	d	file:
asm_clear	mongoose.c	10330;"	d	file:
asm_mmod_fast_secp256r1	mongoose.c	10348;"	d	file:
asm_mult	mongoose.c	10342;"	d	file:
asm_rshift1	mongoose.c	10345;"	d	file:
asm_set	mongoose.c	10333;"	d	file:
asm_sub	mongoose.c	10339;"	d	file:
assert	mongoose.h	1048;"	d
atype	mongoose.h	/^  uint16_t atype;   \/\/ Address type$/;"	m	struct:mg_dns_rr
b	mongoose.c	/^  uECC_word_t b[uECC_MAX_WORDS];$/;"	m	struct:uECC_Curve_t	file:
base_ectr	mongoose.h	/^  uchar base_ectr[16];  \/\/ first counter-mode cipher output for tag$/;"	m	struct:__anon14
bcopy	mongoose.c	/^static void bcopy(uint8_t *dst, const uint8_t *src, unsigned num_bytes) {$/;"	f	file:
bcpy	mongoose.c	/^static size_t bcpy(void (*out)(char, void *), void *arg, uint8_t *buf,$/;"	f	file:
be32	mongoose.c	/^static uint32_t be32(const uint8_t *p) {$/;"	f	file:
begin	mongoose.h	/^  void (*begin)(void *);            \/\/ SPI begin: slave select low$/;"	m	struct:mg_tcpip_spi
bind	mongoose.h	600;"	d
bitcount_t	mongoose.h	/^typedef int16_t bitcount_t;$/;"	t
bits	mongoose.h	/^  uint32_t bits[2];$/;"	m	struct:__anon10
bits	mongoose.h	/^  uint64_t bits;$/;"	m	struct:__anon12
bits2int	mongoose.c	/^static void bits2int(uECC_word_t *native, const uint8_t *bits,$/;"	f	file:
blk	mongoose.c	6235;"	d	file:
blk	mongoose.c	6242;"	d	file:
blk0	mongoose.c	/^static uint32_t blk0(union char64long16 *block, int i) {$/;"	f	file:
block_size	mongoose.h	/^      block_size; \/* Hash function block size in bytes, eg 64 for SHA-256. *\/$/;"	m	struct:uECC_HashContext
bm	mongoose.h	/^  BIO_METHOD *bm;$/;"	m	struct:mg_tls
body	mongoose.h	/^  struct mg_str body;                                  \/\/ Body$/;"	m	struct:mg_http_message	typeref:struct:mg_http_message::mg_str
body	mongoose.h	/^  struct mg_str body;      \/\/ Part contents$/;"	m	struct:mg_http_part	typeref:struct:mg_http_part::mg_str
bool	mongoose.h	/^typedef enum { false = 0, true = 1 } bool;$/;"	t	typeref:enum:__anon7
broadcast	mongoose.c	/^static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};$/;"	v	file:
buf	mongoose.h	/^  char *buf;$/;"	m	struct:mg_queue
buf	mongoose.h	/^  uchar buf[16];        \/\/ buf working value$/;"	m	struct:__anon14
buf	mongoose.h	/^  uint32_t buf[4];$/;"	m	struct:__anon10
buf	mongoose.h	/^  uint32_t buf[68];  \/\/ key expansion buffer$/;"	m	struct:__anon13
buf	mongoose.h	/^  unsigned char *buf;  \/\/ Pointer to stored data$/;"	m	struct:mg_iobuf
buffer	mongoose.c	/^  uint32_t *buffer;  \/\/ Data ptr$/;"	m	struct:enet_desc	file:
buffer	mongoose.h	/^  unsigned char buffer[64];$/;"	m	struct:__anon11
buffer	mongoose.h	/^  unsigned char buffer[64];$/;"	m	struct:__anon12
c	mongoose.c	/^  struct mg_connection *c;$/;"	m	struct:dns_data	typeref:struct:dns_data::mg_connection	file:
c	mongoose.c	/^  struct mg_connection *c;$/;"	m	struct:printdirentrydata	typeref:struct:printdirentrydata::mg_connection	file:
c	mongoose.c	/^  unsigned char c[64];$/;"	m	union:char64long16	file:
c	mongoose.h	/^  struct mg_connection *c;  \/\/ DNS server connection$/;"	m	struct:mg_dns	typeref:struct:mg_dns::mg_connection
ca	mongoose.h	/^  mbedtls_x509_crt ca;      \/\/ Parsed CA certificate$/;"	m	struct:mg_tls
ca	mongoose.h	/^  struct mg_str ca;    \/\/ PEM or DER$/;"	m	struct:mg_tls_opts	typeref:struct:mg_tls_opts::mg_str
calloc	mongoose.h	202;"	d
can_read	mongoose.c	/^static bool can_read(const struct mg_connection *c) {$/;"	f	file:
can_write	mongoose.c	/^static bool can_write(const struct mg_connection *c) {$/;"	f	file:
can_write	mongoose.c	/^static bool can_write(struct mg_connection *c) {$/;"	f	file:
canon	mongoose.c	/^static limb_t canon(fe x) {$/;"	f	file:
cert	mongoose.h	/^  mbedtls_x509_crt cert;    \/\/ Parsed certificate$/;"	m	struct:mg_tls
cert	mongoose.h	/^  struct mg_str cert;  \/\/ PEM or DER$/;"	m	struct:mg_tls_opts	typeref:struct:mg_tls_opts::mg_str
ch	mongoose.c	6428;"	d	file:
char64long16	mongoose.c	/^union char64long16 {$/;"	u	file:
ciaddr	mongoose.c	/^  uint32_t ciaddr, yiaddr, siaddr, giaddr;$/;"	m	struct:dhcp	file:
cl	mongoose.h	/^  void (*cl)(void *fd);                                 \/\/ Close file$/;"	m	struct:mg_fs
clean	mongoose.h	/^  bool clean;                       \/\/ Clean session flag$/;"	m	struct:mg_mqtt_opts
clen	mongoose.c	/^static size_t clen(const char *s, const char *end) {$/;"	f	file:
client_finished_key	mongoose.c	/^  uint8_t client_finished_key[32];$/;"	m	struct:tls_data	file:
client_id	mongoose.h	/^  struct mg_str client_id;          \/\/ Client ID$/;"	m	struct:mg_mqtt_opts	typeref:struct:mg_mqtt_opts::mg_str
client_write_iv	mongoose.c	/^  uint8_t client_write_iv[12];$/;"	m	struct:tls_data	file:
client_write_key	mongoose.c	/^  uint8_t client_write_key[16];$/;"	m	struct:tls_data	file:
close_conn	mongoose.c	/^static void close_conn(struct mg_connection *c) {$/;"	f	file:
closedir	mongoose.c	/^int closedir(DIR *d) {$/;"	f
closesocket	mongoose.c	6686;"	d	file:
closesocket	mongoose.h	118;"	d
closesocket	mongoose.h	477;"	d
closesocket	mongoose.h	609;"	d
closesocket	mongoose.h	657;"	d
cmd	mongoose.h	/^  uint8_t cmd;          \/\/ MQTT command, one of MQTT_CMD_*$/;"	m	struct:mg_mqtt_message
cmpresult_t	mongoose.h	/^typedef int8_t cmpresult_t;$/;"	t
cmsis_init	mongoose.c	/^static bool cmsis_init(struct mg_tcpip_if *ifp) {$/;"	f	file:
cmsis_rx	mongoose.c	/^static size_t cmsis_rx(void *buf, size_t buflen, struct mg_tcpip_if *ifp) {$/;"	f	file:
cmsis_tx	mongoose.c	/^static size_t cmsis_tx(const void *buf, size_t len, struct mg_tcpip_if *ifp) {$/;"	f	file:
cmsis_up	mongoose.c	/^static bool cmsis_up(struct mg_tcpip_if *ifp) {$/;"	f	file:
code	mongoose.c	/^  uint8_t addr, ctrl, proto[2], code, id, len[2];$/;"	m	struct:lcp	file:
code	mongoose.c	/^  uint8_t code;$/;"	m	struct:icmp	file:
condswap	mongoose.c	/^static void condswap(limb_t a[2 * NLIMBS], limb_t b[2 * NLIMBS],$/;"	f	file:
conf	mongoose.h	/^  mbedtls_ssl_config conf;  \/\/ SSL-TLS config$/;"	m	struct:mg_tls
connect	mongoose.h	599;"	d
connect_conn	mongoose.c	/^static void connect_conn(struct mg_connection *c) {$/;"	f	file:
conns	mongoose.h	/^  struct mg_connection *conns;  \/\/ List of active connections$/;"	m	struct:mg_mgr	typeref:struct:mg_mgr::mg_connection
connstate	mongoose.c	/^struct connstate {$/;"	s	file:
control	mongoose.c	/^  uint16_t control;  \/\/ Control and status$/;"	m	struct:enet_desc	file:
count	mongoose.h	/^  uint32_t count[2];$/;"	m	struct:__anon11
crc32	mongoose.c	/^  uint32_t crc32, size, timestamp, status;$/;"	m	struct:mg_otadata	file:
cseq	mongoose.c	/^  uint32_t cseq;  \/\/ client sequence number, used in decryption$/;"	m	struct:tls_data	file:
csum	mongoose.c	/^  uint16_t csum;   \/\/ UDP checksum$/;"	m	struct:udp	file:
csum	mongoose.c	/^  uint16_t csum;  \/\/ Checksum$/;"	m	struct:ip	file:
csum	mongoose.c	/^  uint16_t csum;  \/\/ Checksum$/;"	m	struct:tcp	file:
csum	mongoose.c	/^  uint16_t csum;$/;"	m	struct:icmp	file:
csumfin	mongoose.c	/^static uint16_t csumfin(uint32_t sum) {$/;"	f	file:
csumup	mongoose.c	/^static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {$/;"	f	file:
ctrl	mongoose.c	/^  uint8_t addr, ctrl, proto[2], code, id, len[2];$/;"	m	struct:lcp	file:
ctx	mongoose.c	/^  mg_sha256_ctx ctx;$/;"	m	struct:SHA256_HashContext	file:
ctx	mongoose.h	/^  SSL_CTX *ctx;$/;"	m	struct:mg_tls
curve_secp160r1	mongoose.c	/^static const struct uECC_Curve_t curve_secp160r1 = {$/;"	v	typeref:struct:uECC_Curve_t	file:
curve_secp192r1	mongoose.c	/^static const struct uECC_Curve_t curve_secp192r1 = {$/;"	v	typeref:struct:uECC_Curve_t	file:
curve_secp224r1	mongoose.c	/^static const struct uECC_Curve_t curve_secp224r1 = {$/;"	v	typeref:struct:uECC_Curve_t	file:
curve_secp256k1	mongoose.c	/^static const struct uECC_Curve_t curve_secp256k1 = {$/;"	v	typeref:struct:uECC_Curve_t	file:
curve_secp256r1	mongoose.c	/^static const struct uECC_Curve_t curve_secp256r1 = {$/;"	v	typeref:struct:uECC_Curve_t	file:
d_name	mongoose.c	/^  char d_name[MAX_PATH];$/;"	m	struct:dirent	file:
data	mongoose.c	/^  const char *data;$/;"	m	struct:packed_file	file:
data	mongoose.h	/^  char data[MG_DATA_SIZE];     \/\/ Arbitrary connection data$/;"	m	struct:mg_connection
data	mongoose.h	/^  struct mg_str data;   \/\/ Parsed message for PUBLISH$/;"	m	struct:mg_mqtt_message	typeref:struct:mg_mqtt_message::mg_str
data	mongoose.h	/^  struct mg_str data;  \/\/ Websocket message data$/;"	m	struct:mg_ws_message	typeref:struct:mg_ws_message::mg_str
data	packed_fs.c	/^  const unsigned char *data;$/;"	m	struct:packed_file	file:
data_len	mongoose.c	/^  size_t data_len;$/;"	m	struct:ws_msg	file:
debug_cb	mongoose.c	/^static void debug_cb(void *c, int lev, const char *s, int n, const char *s2) {$/;"	f	file:
decode_varint	mongoose.c	/^static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {$/;"	f	file:
dgram	mongoose.h	/^  struct mg_str dgram;  \/\/ Whole MQTT packet, including headers$/;"	m	struct:mg_mqtt_message	typeref:struct:mg_mqtt_message::mg_str
dhcp	mongoose.c	/^  struct dhcp *dhcp;$/;"	m	struct:pkt	typeref:struct:pkt::dhcp	file:
dhcp	mongoose.c	/^struct dhcp {$/;"	s	file:
dir	mongoose.c	/^  const char *dir;$/;"	m	struct:printdirentrydata	file:
dirent	mongoose.c	/^struct dirent {$/;"	s	file:
dlimb_t	mongoose.c	/^typedef uint64_t dlimb_t;$/;"	t	file:
dns4	mongoose.h	/^  struct mg_dns dns4;           \/\/ DNS for IPv4$/;"	m	struct:mg_mgr	typeref:struct:mg_mgr::mg_dns
dns6	mongoose.h	/^  struct mg_dns dns6;           \/\/ DNS for IPv6$/;"	m	struct:mg_mgr	typeref:struct:mg_mgr::mg_dns
dns_cb	mongoose.c	/^static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {$/;"	f	file:
dns_data	mongoose.c	/^struct dns_data {$/;"	s	file:
dnstimeout	mongoose.h	/^  int dnstimeout;               \/\/ DNS resolve timeout in milliseconds$/;"	m	struct:mg_mgr
double_jacobian	mongoose.c	/^  void (*double_jacobian)(uECC_word_t *X1, uECC_word_t *Y1, uECC_word_t *Z1,$/;"	m	struct:uECC_Curve_t	file:
double_jacobian_default	mongoose.c	/^static void double_jacobian_default(uECC_word_t *X1, uECC_word_t *Y1,$/;"	f	file:
double_jacobian_secp256k1	mongoose.c	/^static void double_jacobian_secp256k1(uECC_word_t *X1, uECC_word_t *Y1,$/;"	f	file:
dport	mongoose.c	/^  uint16_t dport;  \/\/ Destination port$/;"	m	struct:tcp	file:
dport	mongoose.c	/^  uint16_t dport;  \/\/ Destination port$/;"	m	struct:udp	file:
driver	mongoose.h	/^  struct mg_tcpip_driver *driver;  \/\/ Low level driver$/;"	m	struct:mg_tcpip_if	typeref:struct:mg_tcpip_if::mg_tcpip_driver
driver_data	mongoose.h	/^  void *driver_data;               \/\/ Driver-specific data$/;"	m	struct:mg_tcpip_if
dst	mongoose.c	/^  uint32_t dst;   \/\/ Destination IP$/;"	m	struct:ip	file:
dst	mongoose.c	/^  uint8_t dst[16];  \/\/ Destination IP$/;"	m	struct:ip6	file:
dst	mongoose.c	/^  uint8_t dst[6];  \/\/ Destination MAC address$/;"	m	struct:eth	file:
dummy	mongoose.h	/^  int dummy;$/;"	m	struct:mg_tls_ctx
emac_read_phy	mongoose.c	/^static uint32_t emac_read_phy(uint8_t addr, uint8_t reg) {$/;"	f	file:
emac_write_phy	mongoose.c	/^static void emac_write_phy(uint8_t addr, uint8_t reg, uint32_t val) {$/;"	f	file:
enable_crc32_check	mongoose.h	/^  bool enable_crc32_check;         \/\/ Do a CRC check on RX frames and strip it$/;"	m	struct:mg_tcpip_if
enable_dhcp_client	mongoose.h	/^  bool enable_dhcp_client;         \/\/ Enable DCHP client$/;"	m	struct:mg_tcpip_if
enable_dhcp_server	mongoose.h	/^  bool enable_dhcp_server;         \/\/ Enable DCHP server$/;"	m	struct:mg_tcpip_if
enable_get_gateway	mongoose.h	/^  bool enable_get_gateway;         \/\/ DCHP server sets client as gateway$/;"	m	struct:mg_tcpip_if
enable_mac_check	mongoose.h	/^  bool enable_mac_check;           \/\/ Do a MAC check on RX frames$/;"	m	struct:mg_tcpip_if
encode_varint	mongoose.c	/^static size_t encode_varint(uint8_t *buf, size_t value) {$/;"	f	file:
end	mongoose.c	/^  size_t key, user, pass, host, port, uri, end;$/;"	m	struct:url	file:
end	mongoose.h	/^  void (*end)(void *);              \/\/ SPI end: slave select high$/;"	m	struct:mg_tcpip_spi
enet_desc	mongoose.c	/^struct enet_desc {$/;"	s	file:
enet_phy_id	mongoose.c	/^static uint32_t enet_phy_id(uint8_t addr) {$/;"	f	file:
enet_phy_read	mongoose.c	/^static uint16_t enet_phy_read(uint8_t addr, uint8_t reg) {$/;"	f	file:
enet_phy_write	mongoose.c	/^static void enet_phy_write(uint8_t addr, uint8_t reg, uint16_t val) {$/;"	f	file:
ep0	mongoose.c	6430;"	d	file:
ep1	mongoose.c	6431;"	d	file:
epoll_fd	mongoose.h	/^  int epoll_fd;                 \/\/ Used when MG_EPOLL_ENABLE=1$/;"	m	struct:mg_mgr
eport	mongoose.h	/^  uint16_t eport;               \/\/ Next ephemeral port$/;"	m	struct:mg_tcpip_if
escapeseq	mongoose.c	/^static const char *escapeseq(int esc) {$/;"	f	file:
eth	mongoose.c	/^  struct eth *eth;$/;"	m	struct:pkt	typeref:struct:pkt::eth	file:
eth	mongoose.c	/^struct eth {$/;"	s	file:
eth_read_phy	mongoose.c	/^static uint16_t eth_read_phy(uint8_t addr, uint8_t reg) {$/;"	f	file:
eth_read_phy	mongoose.c	/^static uint32_t eth_read_phy(uint8_t addr, uint8_t reg) {$/;"	f	file:
eth_write_phy	mongoose.c	/^static void eth_write_phy(uint8_t addr, uint8_t reg, uint32_t val) {$/;"	f	file:
ether_output	mongoose.c	/^static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {$/;"	f	file:
expire	mongoose.c	/^  uint64_t expire;$/;"	m	struct:dns_data	file:
expire	mongoose.h	/^  uint64_t expire;          \/\/ Expiration timestamp in milliseconds$/;"	m	struct:mg_timer
extra_headers	mongoose.h	/^  const char *extra_headers;  \/\/ Extra HTTP headers to add in responses$/;"	m	struct:mg_http_serve_opts
extraconnsize	mongoose.h	/^  size_t extraconnsize;         \/\/ Used by the MIP stack$/;"	m	struct:mg_mgr
false	mongoose.h	/^typedef enum { false = 0, true = 1 } bool;$/;"	e	enum:__anon7
fd	mongoose.h	/^  void *fd;                    \/\/ Connected socket, or LWIP data$/;"	m	struct:mg_connection
fd	mongoose.h	/^  void *fd;$/;"	m	struct:mg_fd
fe	mongoose.c	/^typedef limb_t fe[NLIMBS];$/;"	t	file:
ff_close	mongoose.c	/^static void ff_close(void *fp) {$/;"	f	file:
ff_list	mongoose.c	/^static void ff_list(const char *dir, void (*fn)(const char *, void *),$/;"	f	file:
ff_mkdir	mongoose.c	/^static bool ff_mkdir(const char *path) {$/;"	f	file:
ff_open	mongoose.c	/^static void *ff_open(const char *path, int flags) {$/;"	f	file:
ff_read	mongoose.c	/^static size_t ff_read(void *fp, void *buf, size_t len) {$/;"	f	file:
ff_remove	mongoose.c	/^static bool ff_remove(const char *path) {$/;"	f	file:
ff_rename	mongoose.c	/^static bool ff_rename(const char *from, const char *to) {$/;"	f	file:
ff_seek	mongoose.c	/^static size_t ff_seek(void *fp, size_t offset) {$/;"	f	file:
ff_stat	mongoose.c	/^static int ff_stat(const char *path, size_t *size, time_t *mtime) {$/;"	f	file:
ff_time_to_epoch	mongoose.c	/^static time_t ff_time_to_epoch(uint16_t fdate, uint16_t ftime) {$/;"	f	file:
ff_write	mongoose.c	/^static size_t ff_write(void *fp, const void *buf, size_t len) {$/;"	f	file:
filename	mongoose.h	/^  struct mg_str filename;  \/\/ Filename for file uploads$/;"	m	struct:mg_http_part	typeref:struct:mg_http_part::mg_str
finish_SHA256	mongoose.c	/^static void finish_SHA256(const uECC_HashContext *base, uint8_t *hash_result) {$/;"	f	file:
finish_hash	mongoose.h	/^  void (*finish_hash)(const struct uECC_HashContext *context,$/;"	m	struct:uECC_HashContext
flags	mongoose.c	/^  uint16_t secs, flags;$/;"	m	struct:dhcp	file:
flags	mongoose.c	/^  uint8_t flags;   \/\/ TCP flags$/;"	m	struct:tcp	file:
flags	mongoose.c	/^  uint8_t flags;$/;"	m	struct:ws_msg	file:
flags	mongoose.h	/^  uint16_t flags;$/;"	m	struct:mg_dns_header
flags	mongoose.h	/^  uint8_t flags;       \/\/ Websocket message flags$/;"	m	struct:mg_ws_message
flags	mongoose.h	/^  unsigned flags;           \/\/ Possible flags values below$/;"	m	struct:mg_timer
flash_bank	mongoose.c	/^MG_IRAM static uint32_t flash_bank(void *addr) {$/;"	f	file:
flash_bank_is_swapped	mongoose.c	/^MG_IRAM static bool flash_bank_is_swapped(uint32_t bank) {$/;"	f	file:
flash_bank_is_swapped	mongoose.c	/^static bool flash_bank_is_swapped(void) {$/;"	f	file:
flash_clear_err	mongoose.c	/^MG_IRAM static void flash_clear_err(uint32_t bank) {$/;"	f	file:
flash_clear_err	mongoose.c	/^static void flash_clear_err(void) {$/;"	f	file:
flash_is_err	mongoose.c	/^MG_IRAM static bool flash_is_err(uint32_t bank) {$/;"	f	file:
flash_is_err	mongoose.c	/^static bool flash_is_err(void) {$/;"	f	file:
flash_last_sector	mongoose.c	/^static char *flash_last_sector(void) {$/;"	f	file:
flash_page_start	mongoose.c	/^MG_IRAM static bool flash_page_start(volatile uint32_t *dst) {$/;"	f	file:
flash_page_start	mongoose.c	/^static int flash_page_start(volatile uint32_t *dst) {$/;"	f	file:
flash_unlock	mongoose.c	/^MG_IRAM static void flash_unlock(void) {$/;"	f	file:
flash_unlock	mongoose.c	/^static void flash_unlock(void) {$/;"	f	file:
flash_wait	mongoose.c	/^MG_IRAM static void flash_wait(uint32_t bank) {$/;"	f	file:
flash_wait	mongoose.c	/^static void flash_wait(void) {$/;"	f	file:
fmt	mongoose.c	/^  uint16_t fmt;    \/\/ Format of hardware address$/;"	m	struct:arp	file:
fn	main.c	/^static void fn(struct mg_connection *c, int ev, void *ev_data) {$/;"	f	file:
fn	mongoose.h	/^  mg_event_handler_t fn;       \/\/ User-specified event handler function$/;"	m	struct:mg_connection
fn	mongoose.h	/^  void (*fn)(struct mg_rpc_req *);  \/\/ Handler function$/;"	m	struct:mg_rpc
fn	mongoose.h	/^  void (*fn)(void *);       \/\/ Function to call$/;"	m	struct:mg_timer
fn_data	mongoose.h	/^  void *fn_data;                    \/\/ Handler function argument$/;"	m	struct:mg_rpc
fn_data	mongoose.h	/^  void *fn_data;               \/\/ User-specified function parameter$/;"	m	struct:mg_connection
frag	mongoose.c	/^  uint16_t frag;  \/\/ Fragmentation$/;"	m	struct:ip	file:
frame	mongoose.h	/^  struct mg_str frame;   \/\/ Request, e.g. {"id":1,"method":"add","params":[1,2]}$/;"	m	struct:mg_rpc_req	typeref:struct:mg_rpc_req::mg_str
free	mongoose.h	203;"	d
fs	mongoose.h	/^  struct mg_fs *fs;           \/\/ Filesystem implementation. Use NULL for POSIX$/;"	m	struct:mg_http_serve_opts	typeref:struct:mg_http_serve_opts::mg_fs
fs	mongoose.h	/^  struct mg_fs *fs;$/;"	m	struct:mg_fd	typeref:struct:mg_fd::mg_fs
g_rng_function	mongoose.c	/^static uECC_RNG_Function g_rng_function = &default_RNG;$/;"	v	file:
g_rng_function	mongoose.c	/^static uECC_RNG_Function g_rng_function = 0;$/;"	v	file:
gcm_auth_decrypt	mongoose.c	/^int gcm_auth_decrypt($/;"	f
gcm_context	mongoose.h	/^} gcm_context;$/;"	t	typeref:struct:__anon14
gcm_crypt_and_tag	mongoose.c	/^int gcm_crypt_and_tag($/;"	f
gcm_finish	mongoose.c	/^int gcm_finish(gcm_context *ctx,  \/\/ pointer to user-provided GCM context$/;"	f
gcm_initialize	mongoose.c	/^int gcm_initialize(void) {$/;"	f
gcm_mult	mongoose.c	/^static void gcm_mult(gcm_context *ctx,   \/\/ pointer to established context$/;"	f	file:
gcm_setkey	mongoose.c	/^int gcm_setkey(gcm_context *ctx,    \/\/ pointer to caller-provided gcm context$/;"	f
gcm_start	mongoose.c	/^int gcm_start(gcm_context *ctx,  \/\/ pointer to user-provided GCM context$/;"	f
gcm_update	mongoose.c	/^int gcm_update(gcm_context *ctx,    \/\/ pointer to user-provided GCM context$/;"	f
gcm_zero_ctx	mongoose.c	/^void gcm_zero_ctx(gcm_context *ctx) {$/;"	f
get_clock_rate	mongoose.c	/^int get_clock_rate(struct mg_tcpip_driver_same54_data *d) {$/;"	f
get_hclk	mongoose.c	/^static uint32_t get_hclk(void) {$/;"	f	file:
get_properties_length	mongoose.c	/^static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {$/;"	f	file:
get_props_size	mongoose.c	/^static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {$/;"	f	file:
get_sysclk	mongoose.c	/^static uint32_t get_sysclk(void) {$/;"	f	file:
gethostbyname	mongoose.h	610;"	d
getpeer	mongoose.c	/^static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,$/;"	f	file:
getpeername	mongoose.h	612;"	d
getrange	mongoose.c	/^static int getrange(struct mg_str *s, size_t *a, size_t *b) {$/;"	f	file:
getsockname	mongoose.h	611;"	d
gettimestamp	mongoose.c	/^static int64_t gettimestamp(const uint32_t *data) {$/;"	f	file:
giaddr	mongoose.c	/^  uint32_t ciaddr, yiaddr, siaddr, giaddr;$/;"	m	struct:dhcp	file:
guess_content_type	mongoose.c	/^static struct mg_str guess_content_type(struct mg_str path, const char *extra) {$/;"	f	file:
guess_mdc_cr	mongoose.c	/^static int guess_mdc_cr(void) {$/;"	f	file:
gw	mongoose.h	/^  uint32_t ip, mask, gw;           \/\/ IP address, mask, default gateway$/;"	m	struct:mg_tcpip_if
gwmac	mongoose.h	/^  uint8_t gwmac[6];             \/\/ Router's MAC$/;"	m	struct:mg_tcpip_if
handle	mongoose.c	/^  HANDLE handle;$/;"	m	struct:win32_dir	file:
handshake_secret	mongoose.c	/^  uint8_t handshake_secret[32];$/;"	m	struct:tls_data	file:
head	mongoose.h	/^  struct mg_rpc **head;  \/\/ RPC handlers list head$/;"	m	struct:mg_rpc_req	typeref:struct:mg_rpc_req::mg_rpc
head	mongoose.h	/^  struct mg_str head;                                  \/\/ Request + headers$/;"	m	struct:mg_http_message	typeref:struct:mg_http_message::mg_str
head	mongoose.h	/^  volatile size_t head;$/;"	m	struct:mg_queue
header_len	mongoose.c	/^  size_t header_len;$/;"	m	struct:ws_msg	file:
headers	mongoose.h	/^  struct mg_http_header headers[MG_MAX_HTTP_HEADERS];  \/\/ Headers$/;"	m	struct:mg_http_message	typeref:struct:mg_http_message::mg_http_header
hlen	mongoose.c	/^  uint8_t hlen;    \/\/ Length of hardware address$/;"	m	struct:arp	file:
hlen	mongoose.c	/^  uint8_t op, htype, hlen, hops;$/;"	m	struct:dhcp	file:
hm	mongoose.c	/^  struct mg_http_message *hm;$/;"	m	struct:printdirentrydata	typeref:struct:printdirentrydata::mg_http_message	file:
hops	mongoose.c	/^  uint8_t op, htype, hlen, hops;$/;"	m	struct:dhcp	file:
host	mongoose.c	/^  size_t key, user, pass, host, port, uri, end;$/;"	m	struct:url	file:
http_cb	mongoose.c	/^static void http_cb(struct mg_connection *c, int ev, void *ev_data) {$/;"	f	file:
htype	mongoose.c	/^  uint8_t op, htype, hlen, hops;$/;"	m	struct:dhcp	file:
hwaddr	mongoose.c	/^  uint8_t hwaddr[208];$/;"	m	struct:dhcp	file:
icmp	mongoose.c	/^  struct icmp *icmp;$/;"	m	struct:pkt	typeref:struct:pkt::icmp	file:
icmp	mongoose.c	/^struct icmp {$/;"	s	file:
id	mongoose.c	/^  uint16_t id;    \/\/ Unused$/;"	m	struct:ip	file:
id	mongoose.c	/^  uint8_t addr, ctrl, proto[2], code, id, len[2];$/;"	m	struct:lcp	file:
id	mongoose.c	/^  uint8_t id;$/;"	m	struct:mg_mqtt_pmap	file:
id	mongoose.h	/^  uint16_t id;          \/\/ For PUBACK, PUBREC, PUBREL, PUBCOMP, SUBACK, PUBLISH$/;"	m	struct:mg_mqtt_message
id	mongoose.h	/^  uint8_t id;         \/\/ Enumerated at MQTT5 Reference$/;"	m	struct:mg_mqtt_prop
id	mongoose.h	/^  unsigned long id;            \/\/ Auto-incrementing unique connection ID$/;"	m	struct:mg_connection
id	mongoose.h	/^  unsigned long id;         \/\/ Timer ID$/;"	m	struct:mg_timer
imxrt_enet	mongoose.c	/^struct imxrt_enet {$/;"	s	file:
in	mongoose.h	/^  unsigned char in[64];$/;"	m	struct:__anon10
info	mongoose.c	/^  WIN32_FIND_DATAW info;$/;"	m	struct:win32_dir	file:
init	mongoose.h	/^  bool (*init)(struct mg_tcpip_if *);                         \/\/ Init driver$/;"	m	struct:mg_tcpip_driver
init_SHA256	mongoose.c	/^static void init_SHA256(const uECC_HashContext *base) {$/;"	f	file:
init_closure	mongoose.c	/^static void init_closure(struct mg_connection *c) {$/;"	f	file:
init_hash	mongoose.h	/^  void (*init_hash)(const struct uECC_HashContext *context);$/;"	m	struct:uECC_HashContext
int16_t	mongoose.h	/^typedef short int16_t;$/;"	t
int32_t	mongoose.h	/^typedef int int32_t;$/;"	t
int64_t	mongoose.h	/^typedef __int64 int64_t;$/;"	t
int8_t	mongoose.h	/^typedef char int8_t;$/;"	t
ioalloc	mongoose.c	/^static bool ioalloc(struct mg_connection *c, struct mg_iobuf *io) {$/;"	f	file:
iolog	mongoose.c	/^static void iolog(struct mg_connection *c, char *buf, long n, bool r) {$/;"	f	file:
ip	mongoose.c	/^  struct ip *ip;$/;"	m	struct:pkt	typeref:struct:pkt::ip	file:
ip	mongoose.c	/^struct ip {$/;"	s	file:
ip	mongoose.h	/^  uint32_t ip, mask, gw;           \/\/ IP address, mask, default gateway$/;"	m	struct:mg_tcpip_if
ip	mongoose.h	/^  uint8_t ip[16];    \/\/ Holds IPv4 or IPv6 address, in network byte order$/;"	m	struct:mg_addr
ip6	mongoose.c	/^  struct ip6 *ip6;$/;"	m	struct:pkt	typeref:struct:pkt::ip6	file:
ip6	mongoose.c	/^struct ip6 {$/;"	s	file:
ipcsum	mongoose.c	/^static uint16_t ipcsum(const void *buf, size_t len) {$/;"	f	file:
is_accepted	mongoose.h	/^  unsigned is_accepted : 1;    \/\/ Accepted (server) connection$/;"	m	struct:mg_connection
is_arplooking	mongoose.h	/^  unsigned is_arplooking : 1;  \/\/ Non-blocking ARP resolution is in progress$/;"	m	struct:mg_connection
is_client	mongoose.h	/^  unsigned is_client : 1;      \/\/ Outbound (client) connection$/;"	m	struct:mg_connection
is_closing	mongoose.h	/^  unsigned is_closing : 1;     \/\/ Close and free the connection immediately$/;"	m	struct:mg_connection
is_connecting	mongoose.h	/^  unsigned is_connecting : 1;  \/\/ Non-blocking connect is in progress$/;"	m	struct:mg_connection
is_digit	mongoose.c	/^static bool is_digit(int c) {$/;"	f	file:
is_dir_prefix	mongoose.c	/^static int is_dir_prefix(const char *prefix, size_t n, const char *path) {$/;"	f	file:
is_draining	mongoose.h	/^  unsigned is_draining : 1;    \/\/ Send remaining data, then close and free$/;"	m	struct:mg_connection
is_full	mongoose.h	/^  unsigned is_full : 1;        \/\/ Stop reads, until cleared$/;"	m	struct:mg_connection
is_hex_digit	mongoose.c	/^static bool is_hex_digit(int c) {$/;"	f	file:
is_hexdumping	mongoose.h	/^  unsigned is_hexdumping : 1;  \/\/ Hexdump in\/out traffic$/;"	m	struct:mg_connection
is_ip6	mongoose.h	/^  bool is_ip6;       \/\/ True when address is IPv6 address$/;"	m	struct:mg_addr
is_listening	mongoose.h	/^  unsigned is_listening : 1;   \/\/ Listening connection$/;"	m	struct:mg_connection
is_mqtt5	mongoose.h	/^  unsigned is_mqtt5 : 1;       \/\/ For MQTT connection, v5 indicator$/;"	m	struct:mg_connection
is_page_boundary	mongoose.c	/^static bool is_page_boundary(const void *addr) {$/;"	f	file:
is_readable	mongoose.h	/^  unsigned is_readable : 1;    \/\/ Connection is ready to read$/;"	m	struct:mg_connection
is_resolving	mongoose.h	/^  unsigned is_resolving : 1;   \/\/ Non-blocking DNS resolution is in progress$/;"	m	struct:mg_connection
is_resp	mongoose.h	/^  unsigned is_resp : 1;        \/\/ Response is still being generated$/;"	m	struct:mg_connection
is_space	mongoose.c	/^static bool is_space(int c) {$/;"	f	file:
is_tls	mongoose.h	/^  unsigned is_tls : 1;         \/\/ TLS-enabled connection$/;"	m	struct:mg_connection
is_tls_hs	mongoose.h	/^  unsigned is_tls_hs : 1;      \/\/ TLS handshake is in progress$/;"	m	struct:mg_connection
is_udp	mongoose.h	/^  unsigned is_udp : 1;         \/\/ UDP connection$/;"	m	struct:mg_connection
is_websocket	mongoose.h	/^  unsigned is_websocket : 1;   \/\/ WebSocket connection$/;"	m	struct:mg_connection
is_writable	mongoose.h	/^  unsigned is_writable : 1;    \/\/ Connection is ready to write$/;"	m	struct:mg_connection
isbyte	mongoose.c	/^static int isbyte(int n) {$/;"	f	file:
isok	mongoose.c	/^static bool isok(uint8_t c) {$/;"	f	file:
isx	mongoose.c	/^static bool isx(int c) {$/;"	f	file:
iv	mongoose.h	/^  uint32_t iv;        \/\/ Integer value for 8-, 16-, 32-bit integers types$/;"	m	struct:mg_mqtt_prop
json_esc	mongoose.c	/^static char json_esc(int c, int esc) {$/;"	f	file:
keepalive	mongoose.h	/^  uint16_t keepalive;               \/\/ Keep-alive timer in seconds$/;"	m	struct:mg_mqtt_opts
key	mongoose.c	/^  size_t key, user, pass, host, port, uri, end;$/;"	m	struct:url	file:
key	mongoose.h	/^  struct mg_str key;   \/\/ PEM or DER$/;"	m	struct:mg_tls_opts	typeref:struct:mg_tls_opts::mg_str
key	mongoose.h	/^  struct mg_str key;  \/\/ Non-NULL only for user property type$/;"	m	struct:mg_mqtt_prop	typeref:struct:mg_mqtt_prop::mg_str
l	mongoose.c	/^  uint32_t l[16];$/;"	m	union:char64long16	file:
ladder_part1	mongoose.c	/^static void ladder_part1(fe xs[5]) {$/;"	f	file:
ladder_part2	mongoose.c	/^static void ladder_part2(fe xs[5], const fe x1) {$/;"	f	file:
last4	mongoose.c	/^static const uint64_t last4[16] = {$/;"	v	file:
lcp	mongoose.c	/^struct lcp {$/;"	s	file:
lease_expire	mongoose.h	/^  uint64_t lease_expire;        \/\/ Lease expiration time, in ms$/;"	m	struct:mg_tcpip_if
len	mongoose.c	/^  uint16_t len;     \/\/ Length$/;"	m	struct:ip6	file:
len	mongoose.c	/^  uint16_t len;    \/\/ UDP length$/;"	m	struct:udp	file:
len	mongoose.c	/^  uint16_t len;   \/\/ Length$/;"	m	struct:ip	file:
len	mongoose.c	/^  uint8_t addr, ctrl, proto[2], code, id, len[2];$/;"	m	struct:lcp	file:
len	mongoose.h	/^  size_t len;          \/\/ Current number of bytes$/;"	m	struct:mg_iobuf
len	mongoose.h	/^  size_t len;       \/\/ String len$/;"	m	struct:mg_str
len	mongoose.h	/^  uint32_t len;$/;"	m	struct:__anon12
len	mongoose.h	/^  uint64_t len;         \/\/ cipher data length processed so far$/;"	m	struct:__anon14
length	mongoose.c	/^  uint16_t length;   \/\/ Data length$/;"	m	struct:enet_desc	file:
limb_t	mongoose.c	/^typedef uint32_t limb_t;$/;"	t	file:
listdir	mongoose.c	/^static void listdir(struct mg_connection *c, struct mg_http_message *hm,$/;"	f	file:
listen	mongoose.h	601;"	d
llc	mongoose.c	/^  struct llc *llc;$/;"	m	struct:pkt	typeref:struct:pkt::llc	file:
load_cert	mongoose.c	/^static X509 *load_cert(struct mg_str s) {$/;"	f	file:
load_key	mongoose.c	/^static EVP_PKEY *load_key(struct mg_str s) {$/;"	f	file:
loc	mongoose.h	/^  struct mg_addr loc;          \/\/ Local address$/;"	m	struct:mg_connection	typeref:struct:mg_connection::mg_addr
logc	mongoose.c	/^static void logc(unsigned char c) {$/;"	f	file:
logs	mongoose.c	/^static void logs(const char *buf, size_t len) {$/;"	f	file:
ls	mongoose.h	/^  void (*ls)(const char *path, void (*fn)(const char *, void *),$/;"	m	struct:mg_fs
mac	mongoose.c	/^  uint8_t mac[6];              \/\/ Peer MAC address$/;"	m	struct:connstate	file:
mac	mongoose.h	/^  uint8_t mac[6];                  \/\/ MAC address. Must be set to a valid MAC$/;"	m	struct:mg_tcpip_if
mac_cb	mongoose.c	/^static void mac_cb(uint32_t ev) {$/;"	f	file:
magic	mongoose.c	/^  uint32_t magic;$/;"	m	struct:dhcp	file:
main	main.c	/^int main(int argc, char *argv[]) {$/;"	f
maj	mongoose.c	6429;"	d	file:
malloc	mongoose.h	204;"	d
mask	mongoose.h	/^  uint32_t ip, mask, gw;           \/\/ IP address, mask, default gateway$/;"	m	struct:mg_tcpip_if
mdc_cr	mongoose.h	/^    int mdc_cr;$/;"	m	struct:mg_tcpip_driver_same54_data
mdc_cr	mongoose.h	/^  int mdc_cr;  \/\/ Valid values: -1 to 63$/;"	m	struct:mg_tcpip_driver_imxrt_data
mdc_cr	mongoose.h	/^  int mdc_cr;  \/\/ Valid values: -1, 0, 1, 2, 3$/;"	m	struct:mg_tcpip_driver_tm4c_data
mdc_cr	mongoose.h	/^  int mdc_cr;  \/\/ Valid values: -1, 0, 1, 2, 3, 4, 5$/;"	m	struct:mg_tcpip_driver_stm32f_data
mdc_cr	mongoose.h	/^  int mdc_cr;  \/\/ Valid values: -1, 0, 1, 2, 3, 4, 5$/;"	m	struct:mg_tcpip_driver_stm32h_data
message	mongoose.h	/^  struct mg_str message;            \/\/ message content$/;"	m	struct:mg_mqtt_opts	typeref:struct:mg_mqtt_opts::mg_str
message	mongoose.h	/^  struct mg_str message;  \/\/ Request + headers + body$/;"	m	struct:mg_http_message	typeref:struct:mg_http_message::mg_str
method	mongoose.h	/^  struct mg_str method, uri, query, proto;             \/\/ Request\/response line$/;"	m	struct:mg_http_message	typeref:struct:mg_http_message::mg_str
method	mongoose.h	/^  struct mg_str method;             \/\/ Method pattern$/;"	m	struct:mg_rpc	typeref:struct:mg_rpc::mg_str
mg_addr	mongoose.h	/^struct mg_addr {$/;"	s
mg_alloc_conn	mongoose.c	/^struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {$/;"	f
mg_atod	mongoose.c	/^static double mg_atod(const char *p, int len, int *numlen) {$/;"	f	file:
mg_aton	mongoose.c	/^bool mg_aton(struct mg_str str, struct mg_addr *addr) {$/;"	f
mg_aton4	mongoose.c	/^static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {$/;"	f	file:
mg_aton6	mongoose.c	/^static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {$/;"	f	file:
mg_atone	mongoose.c	/^static bool mg_atone(struct mg_str str, struct mg_addr *addr) {$/;"	f	file:
mg_atonl	mongoose.c	/^static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {$/;"	f	file:
mg_base64_decode	mongoose.c	/^size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {$/;"	f
mg_base64_decode_single	mongoose.c	/^static int mg_base64_decode_single(int c) {$/;"	f	file:
mg_base64_encode	mongoose.c	/^size_t mg_base64_encode(const unsigned char *p, size_t n, char *to, size_t dl) {$/;"	f
mg_base64_encode_single	mongoose.c	/^static int mg_base64_encode_single(int c) {$/;"	f	file:
mg_base64_final	mongoose.c	/^size_t mg_base64_final(char *to, size_t n) {$/;"	f
mg_base64_update	mongoose.c	/^size_t mg_base64_update(unsigned char ch, char *to, size_t n) {$/;"	f
mg_bio_ctrl	mongoose.c	/^static long mg_bio_ctrl(BIO *b, int cmd, long larg, void *pargs) {$/;"	f	file:
mg_bio_read	mongoose.c	/^static int mg_bio_read(BIO *bio, char *buf, int len) {$/;"	f	file:
mg_bio_write	mongoose.c	/^static int mg_bio_write(BIO *bio, const char *buf, int len) {$/;"	f	file:
mg_byte_reverse	mongoose.c	/^static void mg_byte_reverse(unsigned char *buf, unsigned longs) {$/;"	f	file:
mg_bzero	mongoose.c	/^void mg_bzero(volatile unsigned char *buf, size_t len) {$/;"	f
mg_call	mongoose.c	/^void mg_call(struct mg_connection *c, int ev, void *ev_data) {$/;"	f
mg_calloc	mongoose.h	/^static inline void *mg_calloc(size_t cnt, size_t size) {$/;"	f
mg_casecmp	mongoose.c	/^int mg_casecmp(const char *s1, const char *s2) {$/;"	f
mg_check_ip_acl	mongoose.c	/^int mg_check_ip_acl(struct mg_str acl, struct mg_addr *remote_ip) {$/;"	f
mg_close_conn	mongoose.c	/^void mg_close_conn(struct mg_connection *c) {$/;"	f
mg_commalist	mongoose.c	/^bool mg_commalist(struct mg_str *s, struct mg_str *k, struct mg_str *v) {$/;"	f
mg_connect	mongoose.c	/^struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *url,$/;"	f
mg_connect_resolved	mongoose.c	/^void mg_connect_resolved(struct mg_connection *c) {$/;"	f
mg_connection	mongoose.h	/^struct mg_connection {$/;"	s
mg_crc32	mongoose.c	/^uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {$/;"	f
mg_days_from_epoch	mongoose.c	/^static int mg_days_from_epoch(int y, int m, int d) {$/;"	f	file:
mg_device_reset	mongoose.c	/^MG_IRAM void mg_device_reset(void) {$/;"	f
mg_device_reset	mongoose.c	/^void mg_device_reset(void) {$/;"	f
mg_dns	mongoose.h	/^struct mg_dns {$/;"	s
mg_dns_free	mongoose.c	/^static void mg_dns_free(struct dns_data **head, struct dns_data *d) {$/;"	f	file:
mg_dns_header	mongoose.h	/^struct mg_dns_header {$/;"	s
mg_dns_message	mongoose.h	/^struct mg_dns_message {$/;"	s
mg_dns_parse	mongoose.c	/^bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {$/;"	f
mg_dns_parse_name	mongoose.c	/^static size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs,$/;"	f	file:
mg_dns_parse_name_depth	mongoose.c	/^static size_t mg_dns_parse_name_depth(const uint8_t *s, size_t len, size_t ofs,$/;"	f	file:
mg_dns_parse_rr	mongoose.c	/^size_t mg_dns_parse_rr(const uint8_t *buf, size_t len, size_t ofs,$/;"	f
mg_dns_rr	mongoose.h	/^struct mg_dns_rr {$/;"	s
mg_dns_send	mongoose.c	/^static bool mg_dns_send(struct mg_connection *c, const struct mg_str *name,$/;"	f	file:
mg_dtoa	mongoose.c	/^static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {$/;"	f	file:
mg_error	mongoose.c	/^void mg_error(struct mg_connection *c, const char *fmt, ...) {$/;"	f
mg_esc	mongoose.c	/^static char mg_esc(int c, bool esc) {$/;"	f	file:
mg_escape	mongoose.c	/^static char mg_escape(int c) {$/;"	f	file:
mg_event_handler_t	mongoose.h	/^typedef void (*mg_event_handler_t)(struct mg_connection *, int ev,$/;"	t
mg_fd	mongoose.h	/^struct mg_fd {$/;"	s
mg_file_printf	mongoose.c	/^bool mg_file_printf(struct mg_fs *fs, const char *path, const char *fmt, ...) {$/;"	f
mg_file_read	mongoose.c	/^char *mg_file_read(struct mg_fs *fs, const char *path, size_t *sizep) {$/;"	f
mg_file_write	mongoose.c	/^bool mg_file_write(struct mg_fs *fs, const char *path, const void *buf,$/;"	f
mg_flash_bank	mongoose.c	/^MG_IRAM int mg_flash_bank(void) {$/;"	f
mg_flash_bank	mongoose.c	/^int mg_flash_bank(void) {$/;"	f
mg_flash_erase	mongoose.c	/^MG_IRAM bool mg_flash_erase(void *addr) {$/;"	f
mg_flash_erase	mongoose.c	/^bool mg_flash_erase(void *addr) {$/;"	f
mg_flash_erase	mongoose.c	/^bool mg_flash_erase(void *location) {$/;"	f
mg_flash_load	mongoose.c	/^bool mg_flash_load(void *sector, uint32_t key, void *buf, size_t len) {$/;"	f
mg_flash_next	mongoose.c	/^size_t mg_flash_next(char *p, char *end, uint32_t *key, size_t *size) {$/;"	f
mg_flash_save	mongoose.c	/^bool mg_flash_save(void *sector, uint32_t key, const void *buf, size_t len) {$/;"	f
mg_flash_sector_cleanup	mongoose.c	/^static void mg_flash_sector_cleanup(char *sector) {$/;"	f	file:
mg_flash_sector_size	mongoose.c	/^MG_IRAM size_t mg_flash_sector_size(void) {$/;"	f
mg_flash_sector_size	mongoose.c	/^size_t mg_flash_sector_size(void) {$/;"	f
mg_flash_size	mongoose.c	/^MG_IRAM size_t mg_flash_size(void) {$/;"	f
mg_flash_size	mongoose.c	/^size_t mg_flash_size(void) {$/;"	f
mg_flash_start	mongoose.c	/^MG_IRAM void *mg_flash_start(void) {$/;"	f
mg_flash_start	mongoose.c	/^void *mg_flash_start(void) {$/;"	f
mg_flash_swap_bank	mongoose.c	/^MG_IRAM bool mg_flash_swap_bank() {$/;"	f
mg_flash_swap_bank	mongoose.c	/^bool mg_flash_swap_bank(void) {$/;"	f
mg_flash_write	mongoose.c	/^MG_IRAM bool mg_flash_write(void *addr, const void *buf, size_t len) {$/;"	f
mg_flash_write	mongoose.c	/^bool mg_flash_write(void *addr, const void *buf, size_t len) {$/;"	f
mg_flash_write_align	mongoose.c	/^MG_IRAM size_t mg_flash_write_align(void) {$/;"	f
mg_flash_write_align	mongoose.c	/^size_t mg_flash_write_align(void) {$/;"	f
mg_fs	mongoose.h	/^struct mg_fs {$/;"	s
mg_fs_close	mongoose.c	/^void mg_fs_close(struct mg_fd *fd) {$/;"	f
mg_fs_fat	mongoose.c	/^struct mg_fs mg_fs_fat = {ff_stat,  ff_list, ff_open,   ff_close,  ff_read,$/;"	v	typeref:struct:mg_fs
mg_fs_open	mongoose.c	/^struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {$/;"	f
mg_fs_packed	mongoose.c	/^struct mg_fs mg_fs_packed = {$/;"	v	typeref:struct:mg_fs
mg_fs_posix	mongoose.c	/^struct mg_fs mg_fs_posix = {p_stat,  p_list, p_open,   p_close,  p_read,$/;"	v	typeref:struct:mg_fs
mg_fwkey	mongoose.c	/^MG_IRAM static uint32_t mg_fwkey(int fw) {$/;"	f	file:
mg_getpeername	mongoose.h	/^static inline int mg_getpeername(MG_SOCKET_TYPE fd, void *buf, socklen_t *len) {$/;"	f
mg_getsockname	mongoose.h	/^static inline int mg_getsockname(MG_SOCKET_TYPE fd, void *buf, socklen_t *len) {$/;"	f
mg_globmatch	mongoose.c	/^bool mg_globmatch(const char *s1, size_t n1, const char *s2, size_t n2) {$/;"	f
mg_hello	mongoose.c	/^void mg_hello(const char *url) {$/;"	f
mg_hex	mongoose.c	/^char *mg_hex(const void *buf, size_t len, char *to) {$/;"	f
mg_hexdump	mongoose.c	/^void mg_hexdump(const void *buf, size_t len) {$/;"	f
mg_hfn	mongoose.c	/^static void mg_hfn(struct mg_connection *c, int ev, void *ev_data) {$/;"	f	file:
mg_hmac_sha256	mongoose.c	/^void mg_hmac_sha256(uint8_t dst[32], uint8_t *key, size_t keysz, uint8_t *data,$/;"	f
mg_htonl	mongoose.h	1061;"	d
mg_htons	mongoose.h	1060;"	d
mg_http_bauth	mongoose.c	/^void mg_http_bauth(struct mg_connection *c, const char *user,$/;"	f
mg_http_connect	mongoose.c	/^struct mg_connection *mg_http_connect(struct mg_mgr *mgr, const char *url,$/;"	f
mg_http_creds	mongoose.c	/^void mg_http_creds(struct mg_http_message *hm, char *user, size_t userlen,$/;"	f
mg_http_etag	mongoose.c	/^char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {$/;"	f
mg_http_get_header	mongoose.c	/^struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {$/;"	f
mg_http_get_header_var	mongoose.c	/^struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {$/;"	f
mg_http_get_request_len	mongoose.c	/^int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {$/;"	f
mg_http_get_var	mongoose.c	/^int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,$/;"	f
mg_http_header	mongoose.h	/^struct mg_http_header {$/;"	s
mg_http_listen	mongoose.c	/^struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,$/;"	f
mg_http_match_uri	mongoose.c	/^bool mg_http_match_uri(const struct mg_http_message *hm, const char *glob) {$/;"	f
mg_http_message	mongoose.h	/^struct mg_http_message {$/;"	s
mg_http_next_multipart	mongoose.c	/^size_t mg_http_next_multipart(struct mg_str body, size_t ofs,$/;"	f
mg_http_parse	mongoose.c	/^int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {$/;"	f
mg_http_parse_headers	mongoose.c	/^static bool mg_http_parse_headers(const char *s, const char *end,$/;"	f	file:
mg_http_part	mongoose.h	/^struct mg_http_part {$/;"	s
mg_http_printf_chunk	mongoose.c	/^void mg_http_printf_chunk(struct mg_connection *c, const char *fmt, ...) {$/;"	f
mg_http_reply	mongoose.c	/^void mg_http_reply(struct mg_connection *c, int code, const char *headers,$/;"	f
mg_http_serve_dir	mongoose.c	/^void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,$/;"	f
mg_http_serve_file	mongoose.c	/^void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,$/;"	f
mg_http_serve_opts	mongoose.h	/^struct mg_http_serve_opts {$/;"	s
mg_http_serve_ssi	mongoose.c	/^void mg_http_serve_ssi(struct mg_connection *c, const char *root,$/;"	f
mg_http_status	mongoose.c	/^int mg_http_status(const struct mg_http_message *hm) {$/;"	f
mg_http_status_code_str	mongoose.c	/^static const char *mg_http_status_code_str(int status_code) {$/;"	f	file:
mg_http_upload	mongoose.c	/^long mg_http_upload(struct mg_connection *c, struct mg_http_message *hm,$/;"	f
mg_http_var	mongoose.c	/^struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {$/;"	f
mg_http_vprintf_chunk	mongoose.c	/^static void mg_http_vprintf_chunk(struct mg_connection *c, const char *fmt,$/;"	f	file:
mg_http_write_chunk	mongoose.c	/^void mg_http_write_chunk(struct mg_connection *c, const char *buf, size_t len) {$/;"	f
mg_io_recv	mongoose.c	/^long mg_io_recv(struct mg_connection *c, void *buf, size_t len) {$/;"	f
mg_io_send	mongoose.c	/^long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {$/;"	f
mg_iobuf	mongoose.h	/^struct mg_iobuf {$/;"	s
mg_iobuf_add	mongoose.c	/^size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,$/;"	f
mg_iobuf_del	mongoose.c	/^size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {$/;"	f
mg_iobuf_free	mongoose.c	/^void mg_iobuf_free(struct mg_iobuf *io) {$/;"	f
mg_iobuf_init	mongoose.c	/^int mg_iobuf_init(struct mg_iobuf *io, size_t size, size_t align) {$/;"	f
mg_iobuf_resize	mongoose.c	/^int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {$/;"	f
mg_iotest	mongoose.c	/^static void mg_iotest(struct mg_mgr *mgr, int ms) {$/;"	f	file:
mg_is_url_safe	mongoose.c	/^static bool mg_is_url_safe(int c) {$/;"	f	file:
mg_json_get	mongoose.c	/^int mg_json_get(struct mg_str json, const char *path, int *toklen) {$/;"	f
mg_json_get_b64	mongoose.c	/^char *mg_json_get_b64(struct mg_str json, const char *path, int *slen) {$/;"	f
mg_json_get_bool	mongoose.c	/^bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {$/;"	f
mg_json_get_hex	mongoose.c	/^char *mg_json_get_hex(struct mg_str json, const char *path, int *slen) {$/;"	f
mg_json_get_long	mongoose.c	/^long mg_json_get_long(struct mg_str json, const char *path, long dflt) {$/;"	f
mg_json_get_num	mongoose.c	/^bool mg_json_get_num(struct mg_str json, const char *path, double *v) {$/;"	f
mg_json_get_str	mongoose.c	/^char *mg_json_get_str(struct mg_str json, const char *path) {$/;"	f
mg_json_next	mongoose.c	/^size_t mg_json_next(struct mg_str obj, size_t ofs, struct mg_str *key,$/;"	f
mg_json_unescape	mongoose.c	/^bool mg_json_unescape(struct mg_str s, char *to, size_t n) {$/;"	f
mg_listen	mongoose.c	/^struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,$/;"	f
mg_lld	mongoose.c	/^static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {$/;"	f	file:
mg_load_cert	mongoose.c	/^static bool mg_load_cert(struct mg_str str, mbedtls_x509_crt *p) {$/;"	f	file:
mg_load_key	mongoose.c	/^static bool mg_load_key(struct mg_str str, mbedtls_pk_context *p) {$/;"	f	file:
mg_log	mongoose.c	/^void mg_log(const char *fmt, ...) {$/;"	f
mg_log_level	mongoose.c	/^int mg_log_level = MG_LL_INFO;$/;"	v
mg_log_prefix	mongoose.c	/^void mg_log_prefix(int level, const char *file, int line, const char *fname) {$/;"	f
mg_log_set	mongoose.h	945;"	d
mg_log_set_fn	mongoose.c	/^void mg_log_set_fn(mg_pfn_t fn, void *param) {$/;"	f
mg_lower	mongoose.c	/^int mg_lower(const char *s) {$/;"	f
mg_match	mongoose.c	/^bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {$/;"	f
mg_mbed_rng	mongoose.c	/^static int mg_mbed_rng(void *ctx, unsigned char *buf, size_t len) {$/;"	f	file:
mg_md5_ctx	mongoose.h	/^} mg_md5_ctx;$/;"	t	typeref:struct:__anon10
mg_md5_final	mongoose.c	/^void mg_md5_final(mg_md5_ctx *ctx, unsigned char digest[16]) {$/;"	f
mg_md5_init	mongoose.c	/^void mg_md5_init(mg_md5_ctx *ctx) {$/;"	f
mg_md5_transform	mongoose.c	/^static void mg_md5_transform(uint32_t buf[4], uint32_t const in[16]) {$/;"	f	file:
mg_md5_update	mongoose.c	/^void mg_md5_update(mg_md5_ctx *ctx, const unsigned char *buf, size_t len) {$/;"	f
mg_mgr	mongoose.h	/^struct mg_mgr {$/;"	s
mg_mgr_free	mongoose.c	/^void mg_mgr_free(struct mg_mgr *mgr) {$/;"	f
mg_mgr_init	mongoose.c	/^void mg_mgr_init(struct mg_mgr *mgr) {$/;"	f
mg_mgr_poll	mongoose.c	/^void mg_mgr_poll(struct mg_mgr *mgr, int ms) {$/;"	f
mg_millis	mongoose.c	/^uint64_t mg_millis(void) {$/;"	f
mg_mkdir	mongoose.h	/^static inline int mg_mkdir(const char *path, mode_t mode) {$/;"	f
mg_mprintf	mongoose.c	/^char *mg_mprintf(const char *fmt, ...) {$/;"	f
mg_mqtt_connect	mongoose.c	/^struct mg_connection *mg_mqtt_connect(struct mg_mgr *mgr, const char *url,$/;"	f
mg_mqtt_disconnect	mongoose.c	/^void mg_mqtt_disconnect(struct mg_connection *c,$/;"	f
mg_mqtt_listen	mongoose.c	/^struct mg_connection *mg_mqtt_listen(struct mg_mgr *mgr, const char *url,$/;"	f
mg_mqtt_login	mongoose.c	/^void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {$/;"	f
mg_mqtt_message	mongoose.h	/^struct mg_mqtt_message {$/;"	s
mg_mqtt_next_prop	mongoose.c	/^size_t mg_mqtt_next_prop(struct mg_mqtt_message *msg, struct mg_mqtt_prop *prop,$/;"	f
mg_mqtt_opts	mongoose.h	/^struct mg_mqtt_opts {$/;"	s
mg_mqtt_parse	mongoose.c	/^int mg_mqtt_parse(const uint8_t *buf, size_t len, uint8_t version,$/;"	f
mg_mqtt_ping	mongoose.c	/^void mg_mqtt_ping(struct mg_connection *nc) {$/;"	f
mg_mqtt_pmap	mongoose.c	/^struct mg_mqtt_pmap {$/;"	s	file:
mg_mqtt_pong	mongoose.c	/^void mg_mqtt_pong(struct mg_connection *nc) {$/;"	f
mg_mqtt_prop	mongoose.h	/^struct mg_mqtt_prop {$/;"	s
mg_mqtt_pub	mongoose.c	/^void mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {$/;"	f
mg_mqtt_send_header	mongoose.c	/^void mg_mqtt_send_header(struct mg_connection *c, uint8_t cmd, uint8_t flags,$/;"	f
mg_mqtt_sub	mongoose.c	/^void mg_mqtt_sub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {$/;"	f
mg_ncasecmp	mongoose.c	/^int mg_ncasecmp(const char *s1, const char *s2, size_t len) {$/;"	f
mg_nce	mongoose.c	/^static size_t mg_nce(const char *s, size_t n, size_t ofs, size_t *koff,$/;"	f	file:
mg_net_recv	mongoose.c	/^static int mg_net_recv(void *ctx, unsigned char *buf, size_t len) {$/;"	f	file:
mg_net_send	mongoose.c	/^static int mg_net_send(void *ctx, const unsigned char *buf, size_t len) {$/;"	f	file:
mg_ntohl	mongoose.c	/^uint32_t mg_ntohl(uint32_t net) {$/;"	f
mg_ntohs	mongoose.c	/^uint16_t mg_ntohs(uint16_t net) {$/;"	f
mg_open_listener	mongoose.c	/^bool mg_open_listener(struct mg_connection *c, const char *url) {$/;"	f
mg_ota_begin	mongoose.c	/^bool mg_ota_begin(size_t new_firmware_size) {$/;"	f
mg_ota_boot	mongoose.c	/^MG_IRAM void mg_ota_boot(void) {$/;"	f
mg_ota_commit	mongoose.c	/^MG_IRAM bool mg_ota_commit(void) {$/;"	f
mg_ota_commit	mongoose.c	/^bool mg_ota_commit(void) {$/;"	f
mg_ota_crc32	mongoose.c	/^uint32_t mg_ota_crc32(int fw) {$/;"	f
mg_ota_end	mongoose.c	/^bool mg_ota_end(void) {$/;"	f
mg_ota_rollback	mongoose.c	/^bool mg_ota_rollback(void) {$/;"	f
mg_ota_size	mongoose.c	/^size_t mg_ota_size(int fw) {$/;"	f
mg_ota_status	mongoose.c	/^int mg_ota_status(int fw) {$/;"	f
mg_ota_timestamp	mongoose.c	/^uint32_t mg_ota_timestamp(int fw) {$/;"	f
mg_ota_write	mongoose.c	/^bool mg_ota_write(const void *buf, size_t len) {$/;"	f
mg_otadata	mongoose.c	/^MG_IRAM static struct mg_otadata mg_otadata(int fw) {$/;"	f	file:
mg_otadata	mongoose.c	/^struct mg_otadata {$/;"	s	file:
mg_parse_pem	mongoose.c	/^static int mg_parse_pem(const struct mg_str pem, const struct mg_str label,$/;"	f	file:
mg_pass_string	mongoose.c	/^static int mg_pass_string(const char *s, int len) {$/;"	f	file:
mg_path_is_sane	mongoose.c	/^bool mg_path_is_sane(const char *path) {$/;"	f
mg_pfn_iobuf	mongoose.c	/^void mg_pfn_iobuf(char ch, void *param) {$/;"	f
mg_pfn_iobuf_private	mongoose.c	/^static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {$/;"	f	file:
mg_pfn_stdout	mongoose.c	/^void mg_pfn_stdout(char c, void *param) {$/;"	f
mg_pfn_t	mongoose.h	/^typedef void (*mg_pfn_t)(char, void *);                  \/\/ Output function$/;"	t
mg_pm_t	mongoose.h	/^typedef size_t (*mg_pm_t)(mg_pfn_t, void *, va_list *);  \/\/ %M printer$/;"	t
mg_print_base64	mongoose.c	/^size_t mg_print_base64(void (*out)(char, void *), void *arg, va_list *ap) {$/;"	f
mg_print_esc	mongoose.c	/^size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {$/;"	f
mg_print_hex	mongoose.c	/^size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {$/;"	f
mg_print_ip	mongoose.c	/^size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {$/;"	f
mg_print_ip4	mongoose.c	/^size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {$/;"	f
mg_print_ip6	mongoose.c	/^size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {$/;"	f
mg_print_ip_port	mongoose.c	/^size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {$/;"	f
mg_print_mac	mongoose.c	/^size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {$/;"	f
mg_printf	mongoose.c	/^size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {$/;"	f
mg_profitem	mongoose.h	/^struct mg_profitem {$/;"	s
mg_putchar_iobuf_static	mongoose.c	/^static void mg_putchar_iobuf_static(char ch, void *param) {$/;"	f	file:
mg_queue	mongoose.h	/^struct mg_queue {$/;"	s
mg_queue_add	mongoose.c	/^void mg_queue_add(struct mg_queue *q, size_t len) {$/;"	f
mg_queue_book	mongoose.c	/^size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {$/;"	f
mg_queue_del	mongoose.c	/^void mg_queue_del(struct mg_queue *q, size_t len) {$/;"	f
mg_queue_init	mongoose.c	/^void mg_queue_init(struct mg_queue *q, char *buf, size_t size) {$/;"	f
mg_queue_next	mongoose.c	/^size_t mg_queue_next(struct mg_queue *q, char **buf) {$/;"	f
mg_queue_printf	mongoose.c	/^size_t mg_queue_printf(struct mg_queue *q, const char *fmt, ...) {$/;"	f
mg_queue_read_len	mongoose.c	/^static size_t mg_queue_read_len(struct mg_queue *q) {$/;"	f	file:
mg_queue_vprintf	mongoose.c	/^size_t mg_queue_vprintf(struct mg_queue *q, const char *fmt, va_list *ap) {$/;"	f
mg_queue_write_len	mongoose.c	/^static void mg_queue_write_len(struct mg_queue *q, size_t len) {$/;"	f	file:
mg_random	mongoose.c	/^void mg_random(void *buf, size_t len) {$/;"	f
mg_random_str	mongoose.c	/^char *mg_random_str(char *buf, size_t len) {$/;"	f
mg_resolve	mongoose.c	/^void mg_resolve(struct mg_connection *c, const char *url) {$/;"	f
mg_resolve_cancel	mongoose.c	/^void mg_resolve_cancel(struct mg_connection *c) {$/;"	f
mg_rpc	mongoose.h	/^struct mg_rpc {$/;"	s
mg_rpc_add	mongoose.c	/^void mg_rpc_add(struct mg_rpc **head, struct mg_str method,$/;"	f
mg_rpc_call	mongoose.c	/^static void mg_rpc_call(struct mg_rpc_req *r, struct mg_str method) {$/;"	f	file:
mg_rpc_del	mongoose.c	/^void mg_rpc_del(struct mg_rpc **head, void (*fn)(struct mg_rpc_req *)) {$/;"	f
mg_rpc_err	mongoose.c	/^void mg_rpc_err(struct mg_rpc_req *r, int code, const char *fmt, ...) {$/;"	f
mg_rpc_list	mongoose.c	/^void mg_rpc_list(struct mg_rpc_req *r) {$/;"	f
mg_rpc_ok	mongoose.c	/^void mg_rpc_ok(struct mg_rpc_req *r, const char *fmt, ...) {$/;"	f
mg_rpc_process	mongoose.c	/^void mg_rpc_process(struct mg_rpc_req *r) {$/;"	f
mg_rpc_req	mongoose.h	/^struct mg_rpc_req {$/;"	s
mg_rpc_verr	mongoose.c	/^void mg_rpc_verr(struct mg_rpc_req *r, int code, const char *fmt, va_list *ap) {$/;"	f
mg_rpc_vok	mongoose.c	/^void mg_rpc_vok(struct mg_rpc_req *r, const char *fmt, va_list *ap) {$/;"	f
mg_send	mongoose.c	/^bool mg_send(struct mg_connection *c, const void *buf, size_t len) {$/;"	f
mg_send_mqtt_properties	mongoose.c	/^static void mg_send_mqtt_properties(struct mg_connection *c,$/;"	f	file:
mg_send_u16	mongoose.c	/^static void mg_send_u16(struct mg_connection *c, uint16_t value) {$/;"	f	file:
mg_send_u32	mongoose.c	/^static void mg_send_u32(struct mg_connection *c, uint32_t value) {$/;"	f	file:
mg_sendnsreq	mongoose.c	/^static void mg_sendnsreq(struct mg_connection *c, struct mg_str *name, int ms,$/;"	f	file:
mg_set_non_blocking_mode	mongoose.c	/^static void mg_set_non_blocking_mode(MG_SOCKET_TYPE fd) {$/;"	f	file:
mg_sha1_ctx	mongoose.h	/^} mg_sha1_ctx;$/;"	t	typeref:struct:__anon11
mg_sha1_final	mongoose.c	/^void mg_sha1_final(unsigned char digest[20], mg_sha1_ctx *context) {$/;"	f
mg_sha1_init	mongoose.c	/^void mg_sha1_init(mg_sha1_ctx *context) {$/;"	f
mg_sha1_transform	mongoose.c	/^static void mg_sha1_transform(uint32_t state[5],$/;"	f	file:
mg_sha1_update	mongoose.c	/^void mg_sha1_update(mg_sha1_ctx *context, const unsigned char *data,$/;"	f
mg_sha256_chunk	mongoose.c	/^static void mg_sha256_chunk(mg_sha256_ctx *ctx) {$/;"	f	file:
mg_sha256_ctx	mongoose.h	/^} mg_sha256_ctx;$/;"	t	typeref:struct:__anon12
mg_sha256_final	mongoose.c	/^void mg_sha256_final(unsigned char digest[32], mg_sha256_ctx *ctx) {$/;"	f
mg_sha256_init	mongoose.c	/^void mg_sha256_init(mg_sha256_ctx *ctx) {$/;"	f
mg_sha256_k	mongoose.c	/^static const uint32_t mg_sha256_k[64] = {$/;"	v	file:
mg_sha256_update	mongoose.c	/^void mg_sha256_update(mg_sha256_ctx *ctx, const unsigned char *data,$/;"	f
mg_snprintf	mongoose.c	/^size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {$/;"	f
mg_sntp_connect	mongoose.c	/^struct mg_connection *mg_sntp_connect(struct mg_mgr *mgr, const char *url,$/;"	f
mg_sntp_parse	mongoose.c	/^int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {$/;"	f
mg_sntp_request	mongoose.c	/^void mg_sntp_request(struct mg_connection *c) {$/;"	f
mg_socketpair	mongoose.c	/^static bool mg_socketpair(MG_SOCKET_TYPE sp[2], union usa usa[2]) {$/;"	f	file:
mg_split	mongoose.c	/^bool mg_split(struct mg_str *s, struct mg_str *k, struct mg_str *v, char sep) {$/;"	f
mg_ssi	mongoose.c	/^static char *mg_ssi(const char *path, const char *root, int depth) {$/;"	f	file:
mg_str	mongoose.h	/^struct mg_str {$/;"	s
mg_str	mongoose.h	852;"	d
mg_str_n	mongoose.c	/^struct mg_str mg_str_n(const char *s, size_t n) {$/;"	f
mg_str_s	mongoose.c	/^struct mg_str mg_str_s(const char *s) {$/;"	f
mg_strcmp	mongoose.c	/^int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {$/;"	f
mg_strdup	mongoose.c	/^struct mg_str mg_strdup(const struct mg_str s) {$/;"	f
mg_strstr	mongoose.c	/^const char *mg_strstr(const struct mg_str haystack,$/;"	f
mg_strstrip	mongoose.c	/^struct mg_str mg_strstrip(struct mg_str s) {$/;"	f
mg_tcpip_driver	mongoose.h	/^struct mg_tcpip_driver {$/;"	s
mg_tcpip_driver_cmsis	mongoose.c	/^struct mg_tcpip_driver mg_tcpip_driver_cmsis = {cmsis_init, cmsis_tx, NULL,$/;"	v	typeref:struct:mg_tcpip_driver
mg_tcpip_driver_imxrt	mongoose.c	/^struct mg_tcpip_driver mg_tcpip_driver_imxrt = {mg_tcpip_driver_imxrt_init,$/;"	v	typeref:struct:mg_tcpip_driver
mg_tcpip_driver_imxrt_data	mongoose.h	/^struct mg_tcpip_driver_imxrt_data {$/;"	s
mg_tcpip_driver_imxrt_init	mongoose.c	/^static bool mg_tcpip_driver_imxrt_init(struct mg_tcpip_if *ifp) {$/;"	f	file:
mg_tcpip_driver_imxrt_tx	mongoose.c	/^static size_t mg_tcpip_driver_imxrt_tx(const void *buf, size_t len,$/;"	f	file:
mg_tcpip_driver_imxrt_up	mongoose.c	/^static bool mg_tcpip_driver_imxrt_up(struct mg_tcpip_if *ifp) {$/;"	f	file:
mg_tcpip_driver_same54	mongoose.c	/^struct mg_tcpip_driver mg_tcpip_driver_same54 = {$/;"	v	typeref:struct:mg_tcpip_driver
mg_tcpip_driver_same54_data	mongoose.h	/^struct mg_tcpip_driver_same54_data {$/;"	s
mg_tcpip_driver_same54_init	mongoose.c	/^static bool mg_tcpip_driver_same54_init(struct mg_tcpip_if *ifp) {$/;"	f	file:
mg_tcpip_driver_same54_tx	mongoose.c	/^static size_t mg_tcpip_driver_same54_tx(const void *buf, size_t len,$/;"	f	file:
mg_tcpip_driver_same54_up	mongoose.c	/^static bool mg_tcpip_driver_same54_up(struct mg_tcpip_if *ifp) {$/;"	f	file:
mg_tcpip_driver_stm32f	mongoose.c	/^struct mg_tcpip_driver mg_tcpip_driver_stm32f = {$/;"	v	typeref:struct:mg_tcpip_driver
mg_tcpip_driver_stm32f_data	mongoose.h	/^struct mg_tcpip_driver_stm32f_data {$/;"	s
mg_tcpip_driver_stm32f_init	mongoose.c	/^static bool mg_tcpip_driver_stm32f_init(struct mg_tcpip_if *ifp) {$/;"	f	file:
mg_tcpip_driver_stm32f_tx	mongoose.c	/^static size_t mg_tcpip_driver_stm32f_tx(const void *buf, size_t len,$/;"	f	file:
mg_tcpip_driver_stm32f_up	mongoose.c	/^static bool mg_tcpip_driver_stm32f_up(struct mg_tcpip_if *ifp) {$/;"	f	file:
mg_tcpip_driver_stm32h	mongoose.c	/^struct mg_tcpip_driver mg_tcpip_driver_stm32h = {$/;"	v	typeref:struct:mg_tcpip_driver
mg_tcpip_driver_stm32h_data	mongoose.h	/^struct mg_tcpip_driver_stm32h_data {$/;"	s
mg_tcpip_driver_stm32h_init	mongoose.c	/^static bool mg_tcpip_driver_stm32h_init(struct mg_tcpip_if *ifp) {$/;"	f	file:
mg_tcpip_driver_stm32h_tx	mongoose.c	/^static size_t mg_tcpip_driver_stm32h_tx(const void *buf, size_t len,$/;"	f	file:
mg_tcpip_driver_stm32h_up	mongoose.c	/^static bool mg_tcpip_driver_stm32h_up(struct mg_tcpip_if *ifp) {$/;"	f	file:
mg_tcpip_driver_tm4c	mongoose.c	/^struct mg_tcpip_driver mg_tcpip_driver_tm4c = {mg_tcpip_driver_tm4c_init,$/;"	v	typeref:struct:mg_tcpip_driver
mg_tcpip_driver_tm4c_data	mongoose.h	/^struct mg_tcpip_driver_tm4c_data {$/;"	s
mg_tcpip_driver_tm4c_init	mongoose.c	/^static bool mg_tcpip_driver_tm4c_init(struct mg_tcpip_if *ifp) {$/;"	f	file:
mg_tcpip_driver_tm4c_tx	mongoose.c	/^static size_t mg_tcpip_driver_tm4c_tx(const void *buf, size_t len,$/;"	f	file:
mg_tcpip_driver_tm4c_up	mongoose.c	/^static bool mg_tcpip_driver_tm4c_up(struct mg_tcpip_if *ifp) {$/;"	f	file:
mg_tcpip_driver_w5500	mongoose.c	/^struct mg_tcpip_driver mg_tcpip_driver_w5500 = {w5500_init, w5500_tx, w5500_rx, w5500_up};$/;"	v	typeref:struct:mg_tcpip_driver
mg_tcpip_free	mongoose.c	/^void mg_tcpip_free(struct mg_tcpip_if *ifp) {$/;"	f
mg_tcpip_if	mongoose.h	/^struct mg_tcpip_if {$/;"	s
mg_tcpip_init	mongoose.c	/^void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {$/;"	f
mg_tcpip_poll	mongoose.c	/^static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t uptime_ms) {$/;"	f	file:
mg_tcpip_qwrite	mongoose.c	/^void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {$/;"	f
mg_tcpip_rx	mongoose.c	/^static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {$/;"	f	file:
mg_tcpip_spi	mongoose.h	/^struct mg_tcpip_spi {$/;"	s
mg_timegm	mongoose.c	/^static time_t mg_timegm(const struct tm *t) {$/;"	f	file:
mg_timer	mongoose.h	/^struct mg_timer {$/;"	s
mg_timer_add	mongoose.c	/^struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,$/;"	f
mg_timer_expired	mongoose.c	/^bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {$/;"	f
mg_timer_free	mongoose.c	/^void mg_timer_free(struct mg_timer **head, struct mg_timer *t) {$/;"	f
mg_timer_init	mongoose.c	/^void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,$/;"	f
mg_timer_poll	mongoose.c	/^void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {$/;"	f
mg_tls	mongoose.h	/^struct mg_tls {$/;"	s
mg_tls_client_change_cipher	mongoose.c	/^static int mg_tls_client_change_cipher(struct mg_connection *c) {$/;"	f	file:
mg_tls_client_finish	mongoose.c	/^static int mg_tls_client_finish(struct mg_connection *c) {$/;"	f	file:
mg_tls_client_hello	mongoose.c	/^static int mg_tls_client_hello(struct mg_connection *c) {$/;"	f	file:
mg_tls_ctx	mongoose.h	/^struct mg_tls_ctx {$/;"	s
mg_tls_ctx_free	mongoose.c	/^void mg_tls_ctx_free(struct mg_mgr *mgr) {$/;"	f
mg_tls_ctx_init	mongoose.c	/^void mg_tls_ctx_init(struct mg_mgr *mgr) {$/;"	f
mg_tls_derive_secret	mongoose.c	/^static void mg_tls_derive_secret(const char *label, uint8_t *key, size_t keysz,$/;"	f	file:
mg_tls_drop_packet	mongoose.c	/^static void mg_tls_drop_packet(struct mg_iobuf *rio) {$/;"	f	file:
mg_tls_encrypt	mongoose.c	/^static void mg_tls_encrypt(struct mg_connection *c, const uint8_t *msg,$/;"	f	file:
mg_tls_err	mongoose.c	/^static int mg_tls_err(struct mg_connection *c, struct mg_tls *tls, int res) {$/;"	f	file:
mg_tls_free	mongoose.c	/^void mg_tls_free(struct mg_connection *c) {$/;"	f
mg_tls_generate_application_keys	mongoose.c	/^static void mg_tls_generate_application_keys(struct mg_connection *c) {$/;"	f	file:
mg_tls_generate_handshake_keys	mongoose.c	/^static void mg_tls_generate_handshake_keys(struct mg_connection *c) {$/;"	f	file:
mg_tls_got_msg	mongoose.c	/^static bool mg_tls_got_msg(struct mg_connection *c) {$/;"	f	file:
mg_tls_handshake	mongoose.c	/^void mg_tls_handshake(struct mg_connection *c) {$/;"	f
mg_tls_hexdump	mongoose.c	/^static void mg_tls_hexdump(const char *msg, uint8_t *buf, size_t bufsz) {$/;"	f	file:
mg_tls_hs_state	mongoose.c	/^enum mg_tls_hs_state {$/;"	g	file:
mg_tls_init	mongoose.c	/^void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {$/;"	f
mg_tls_opts	mongoose.h	/^struct mg_tls_opts {$/;"	s
mg_tls_pending	mongoose.c	/^size_t mg_tls_pending(struct mg_connection *c) {$/;"	f
mg_tls_recv	mongoose.c	/^long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {$/;"	f
mg_tls_recv_decrypt	mongoose.c	/^static int mg_tls_recv_decrypt(struct mg_connection *c, void *buf,$/;"	f	file:
mg_tls_send	mongoose.c	/^long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {$/;"	f
mg_tls_server_cert	mongoose.c	/^static void mg_tls_server_cert(struct mg_connection *c) {$/;"	f	file:
mg_tls_server_extensions	mongoose.c	/^static void mg_tls_server_extensions(struct mg_connection *c) {$/;"	f	file:
mg_tls_server_finish	mongoose.c	/^static void mg_tls_server_finish(struct mg_connection *c) {$/;"	f	file:
mg_tls_server_hello	mongoose.c	/^static void mg_tls_server_hello(struct mg_connection *c) {$/;"	f	file:
mg_tls_server_verify_ecdsa	mongoose.c	/^static void mg_tls_server_verify_ecdsa(struct mg_connection *c) {$/;"	f	file:
mg_to_size_t	mongoose.c	/^bool mg_to_size_t(struct mg_str str, size_t *val) {$/;"	f
mg_unhex	mongoose.c	/^void mg_unhex(const char *buf, size_t len, unsigned char *to) {$/;"	f
mg_unhex_nimble	mongoose.c	/^static unsigned char mg_unhex_nimble(unsigned char c) {$/;"	f	file:
mg_unhexn	mongoose.c	/^unsigned long mg_unhexn(const char *s, size_t len) {$/;"	f
mg_unlist	mongoose.c	/^const char *mg_unlist(size_t no) {$/;"	f
mg_unlist	packed_fs.c	/^const char *mg_unlist(size_t no) {$/;"	f
mg_unpack	mongoose.c	/^const char *mg_unpack(const char *path, size_t *size, time_t *mtime) {$/;"	f
mg_unpack	packed_fs.c	/^const char *mg_unpack(const char *name, size_t *size, time_t *mtime) {$/;"	f
mg_unpacked	mongoose.c	/^struct mg_str mg_unpacked(const char *path) {$/;"	f
mg_url_decode	mongoose.c	/^int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,$/;"	f
mg_url_encode	mongoose.c	/^size_t mg_url_encode(const char *s, size_t sl, char *buf, size_t len) {$/;"	f
mg_url_host	mongoose.c	/^struct mg_str mg_url_host(const char *url) {$/;"	f
mg_url_is_ssl	mongoose.c	/^int mg_url_is_ssl(const char *url) {$/;"	f
mg_url_pass	mongoose.c	/^struct mg_str mg_url_pass(const char *url) {$/;"	f
mg_url_port	mongoose.c	/^unsigned short mg_url_port(const char *url) {$/;"	f
mg_url_uri	mongoose.c	/^const char *mg_url_uri(const char *url) {$/;"	f
mg_url_user	mongoose.c	/^struct mg_str mg_url_user(const char *url) {$/;"	f
mg_v4mapped	mongoose.c	/^static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {$/;"	f	file:
mg_vcasecmp	mongoose.c	/^int mg_vcasecmp(const struct mg_str *str1, const char *str2) {$/;"	f
mg_vcmp	mongoose.c	/^int mg_vcmp(const struct mg_str *s1, const char *s2) {$/;"	f
mg_vmprintf	mongoose.c	/^char *mg_vmprintf(const char *fmt, va_list *ap) {$/;"	f
mg_vprintf	mongoose.c	/^size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {$/;"	f
mg_vsnprintf	mongoose.c	/^size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {$/;"	f
mg_vxprintf	mongoose.c	/^size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,$/;"	f
mg_wakeup	mongoose.c	/^bool mg_wakeup(struct mg_mgr *mgr, unsigned long conn_id, const void *buf,$/;"	f
mg_wakeup_init	mongoose.c	/^bool mg_wakeup_init(struct mg_mgr *mgr) {$/;"	f
mg_wrapfd	mongoose.c	/^struct mg_connection *mg_wrapfd(struct mg_mgr *mgr, int fd,$/;"	f
mg_ws_cb	mongoose.c	/^static void mg_ws_cb(struct mg_connection *c, int ev, void *ev_data) {$/;"	f	file:
mg_ws_client_handshake	mongoose.c	/^static bool mg_ws_client_handshake(struct mg_connection *c) {$/;"	f	file:
mg_ws_connect	mongoose.c	/^struct mg_connection *mg_ws_connect(struct mg_mgr *mgr, const char *url,$/;"	f
mg_ws_mask	mongoose.c	/^static void mg_ws_mask(struct mg_connection *c, size_t len) {$/;"	f	file:
mg_ws_message	mongoose.h	/^struct mg_ws_message {$/;"	s
mg_ws_printf	mongoose.c	/^size_t mg_ws_printf(struct mg_connection *c, int op, const char *fmt, ...) {$/;"	f
mg_ws_send	mongoose.c	/^size_t mg_ws_send(struct mg_connection *c, const void *buf, size_t len,$/;"	f
mg_ws_upgrade	mongoose.c	/^void mg_ws_upgrade(struct mg_connection *c, struct mg_http_message *hm,$/;"	f
mg_ws_vprintf	mongoose.c	/^size_t mg_ws_vprintf(struct mg_connection *c, int op, const char *fmt,$/;"	f
mg_ws_wrap	mongoose.c	/^size_t mg_ws_wrap(struct mg_connection *c, size_t len, int op) {$/;"	f
mg_xprintf	mongoose.c	/^size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {$/;"	f
mgr	mongoose.h	/^  struct mg_mgr *mgr;              \/\/ Mongoose event manager$/;"	m	struct:mg_tcpip_if	typeref:struct:mg_tcpip_if::mg_mgr
mgr	mongoose.h	/^  struct mg_mgr *mgr;          \/\/ Our container$/;"	m	struct:mg_connection	typeref:struct:mg_connection::mg_mgr
mime_types	mongoose.h	/^  const char *mime_types;     \/\/ Extra mime types, ext1=type1,ext2=type2,..$/;"	m	struct:mg_http_serve_opts
mkd	mongoose.h	/^  bool (*mkd)(const char *path);                        \/\/ Create directory$/;"	m	struct:mg_fs
mkdir	mongoose.h	214;"	d
mkdir	mongoose.h	310;"	d
mkdir	mongoose.h	502;"	d
mkhdr	mongoose.c	/^static size_t mkhdr(size_t len, int op, bool is_client, uint8_t *buf) {$/;"	f	file:
mko_aes_gcm_h	mongoose.h	1443;"	d
mkpay	mongoose.c	/^static void mkpay(struct pkt *pkt, void *p) {$/;"	f	file:
mmod_fast	mongoose.c	/^  void (*mmod_fast)(uECC_word_t *result, uECC_word_t *product);$/;"	m	struct:uECC_Curve_t	file:
mod_sqrt	mongoose.c	/^  void (*mod_sqrt)(uECC_word_t *a, uECC_Curve curve);$/;"	m	struct:uECC_Curve_t	file:
mod_sqrt_default	mongoose.c	/^static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {$/;"	f	file:
mod_sqrt_secp224r1	mongoose.c	/^static void mod_sqrt_secp224r1(uECC_word_t *a, uECC_Curve curve) {$/;"	f	file:
mod_sqrt_secp224r1_rm	mongoose.c	/^static void mod_sqrt_secp224r1_rm(uECC_word_t *d2, uECC_word_t *e2,$/;"	f	file:
mod_sqrt_secp224r1_rp	mongoose.c	/^static void mod_sqrt_secp224r1_rp(uECC_word_t *d1, uECC_word_t *e1,$/;"	f	file:
mod_sqrt_secp224r1_rs	mongoose.c	/^static void mod_sqrt_secp224r1_rs(uECC_word_t *d1, uECC_word_t *e1,$/;"	f	file:
mod_sqrt_secp224r1_rss	mongoose.c	/^static void mod_sqrt_secp224r1_rss(uECC_word_t *d1, uECC_word_t *e1,$/;"	f	file:
mode	mongoose.h	/^  int mode;             \/\/ cipher direction: encrypt\/decrypt$/;"	m	struct:__anon14
mode	mongoose.h	/^  int mode;          \/\/ 1 for Encryption, 0 for Decryption$/;"	m	struct:__anon13
mode_t	mongoose.h	189;"	d
mode_t	mongoose.h	309;"	d
mqtt_cb	mongoose.c	/^static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data) {$/;"	f	file:
mqtt_id	mongoose.h	/^  uint16_t mqtt_id;             \/\/ MQTT IDs for pub\/sub$/;"	m	struct:mg_mgr
mqtt_prop_type_by_id	mongoose.c	/^static int mqtt_prop_type_by_id(uint8_t prop_id) {$/;"	f	file:
mtime	packed_fs.c	/^  time_t mtime;$/;"	m	struct:packed_file	file:
mtu	mongoose.h	/^  uint16_t mtu;                    \/\/ Interface MTU$/;"	m	struct:mg_tcpip_if
mul	mongoose.c	/^static void mul(fe out, const fe a, const fe b, unsigned nb) {$/;"	f	file:
mul1	mongoose.c	/^static void mul1(fe out, const fe a) {$/;"	f	file:
mul2add	mongoose.c	/^static void mul2add(uECC_word_t a, uECC_word_t b, uECC_word_t *r0,$/;"	f	file:
muladd	mongoose.c	/^static void muladd(uECC_word_t a, uECC_word_t b, uECC_word_t *r0,$/;"	f	file:
mv	mongoose.h	/^  bool (*mv)(const char *from, const char *to);         \/\/ Rename file$/;"	m	struct:mg_fs
n	mongoose.c	/^  uECC_word_t n[uECC_MAX_WORDS];$/;"	m	struct:uECC_Curve_t	file:
name	mongoose.h	/^  char name[256];       \/\/ Host name$/;"	m	struct:mg_dns_message
name	mongoose.h	/^  const char *name;    \/\/ Event name$/;"	m	struct:mg_profitem
name	mongoose.h	/^  struct mg_str name;      \/\/ Form field name$/;"	m	struct:mg_http_part	typeref:struct:mg_http_part::mg_str
name	mongoose.h	/^  struct mg_str name;   \/\/ Header name$/;"	m	struct:mg_http_header	typeref:struct:mg_http_header::mg_str
name	mongoose.h	/^  struct mg_str name;  \/\/ If not empty, enable host name verification$/;"	m	struct:mg_tls_opts	typeref:struct:mg_tls_opts::mg_str
name	packed_fs.c	/^  const char *name;$/;"	m	struct:packed_file	file:
ndrop	mongoose.h	/^  volatile uint32_t ndrop;      \/\/ Number of received, but dropped frames$/;"	m	struct:mg_tcpip_if
nerr	mongoose.h	/^  volatile uint32_t nerr;       \/\/ Number of driver errors$/;"	m	struct:mg_tcpip_if
next	mongoose.c	/^  struct dns_data *next;$/;"	m	struct:dns_data	typeref:struct:dns_data::dns_data	file:
next	mongoose.h	/^  struct mg_connection *next;  \/\/ Linkage in struct mg_mgr :: connections$/;"	m	struct:mg_connection	typeref:struct:mg_connection::mg_connection
next	mongoose.h	/^  struct mg_rpc *next;              \/\/ Next in list$/;"	m	struct:mg_rpc	typeref:struct:mg_rpc::mg_rpc
next	mongoose.h	/^  struct mg_timer *next;    \/\/ Linkage$/;"	m	struct:mg_timer	typeref:struct:mg_timer::mg_timer
nextid	mongoose.h	/^  unsigned long nextid;         \/\/ Next connection ID$/;"	m	struct:mg_mgr
nfds_t	mongoose.h	/^typedef unsigned long nfds_t;$/;"	t
nibble	mongoose.c	/^static unsigned char nibble(unsigned c) {$/;"	f	file:
nlen	mongoose.h	/^  uint16_t nlen;    \/\/ Name or pointer length$/;"	m	struct:mg_dns_rr
now	mongoose.h	/^  uint64_t now;                 \/\/ Current time$/;"	m	struct:mg_tcpip_if
nrecv	mongoose.h	/^  volatile uint32_t nrecv;      \/\/ Number of received frames$/;"	m	struct:mg_tcpip_if
nsent	mongoose.h	/^  volatile uint32_t nsent;      \/\/ Number of transmitted frames$/;"	m	struct:mg_tcpip_if
num_answers	mongoose.h	/^  uint16_t num_answers;$/;"	m	struct:mg_dns_header
num_authority_prs	mongoose.h	/^  uint16_t num_authority_prs;$/;"	m	struct:mg_dns_header
num_bytes	mongoose.c	/^  wordcount_t num_bytes;$/;"	m	struct:uECC_Curve_t	file:
num_bytes_secp160r1	mongoose.c	10907;"	d	file:
num_bytes_secp192r1	mongoose.c	10908;"	d	file:
num_bytes_secp224r1	mongoose.c	10909;"	d	file:
num_bytes_secp256k1	mongoose.c	10911;"	d	file:
num_bytes_secp256r1	mongoose.c	10910;"	d	file:
num_n_bits	mongoose.c	/^  bitcount_t num_n_bits;$/;"	m	struct:uECC_Curve_t	file:
num_other_prs	mongoose.h	/^  uint16_t num_other_prs;$/;"	m	struct:mg_dns_header
num_props	mongoose.h	/^  size_t num_props;                 \/\/ number of props$/;"	m	struct:mg_mqtt_opts
num_questions	mongoose.h	/^  uint16_t num_questions;$/;"	m	struct:mg_dns_header
num_will_props	mongoose.h	/^  size_t num_will_props;            \/\/ Number of will props$/;"	m	struct:mg_mqtt_opts
num_words	mongoose.c	/^  wordcount_t num_words;$/;"	m	struct:uECC_Curve_t	file:
num_words_secp160r1	mongoose.c	10915;"	d	file:
num_words_secp160r1	mongoose.c	10927;"	d	file:
num_words_secp160r1	mongoose.c	10938;"	d	file:
num_words_secp192r1	mongoose.c	10916;"	d	file:
num_words_secp192r1	mongoose.c	10928;"	d	file:
num_words_secp192r1	mongoose.c	10939;"	d	file:
num_words_secp224r1	mongoose.c	10917;"	d	file:
num_words_secp224r1	mongoose.c	10929;"	d	file:
num_words_secp224r1	mongoose.c	10940;"	d	file:
num_words_secp256k1	mongoose.c	10919;"	d	file:
num_words_secp256k1	mongoose.c	10931;"	d	file:
num_words_secp256k1	mongoose.c	10942;"	d	file:
num_words_secp256r1	mongoose.c	10918;"	d	file:
num_words_secp256r1	mongoose.c	10930;"	d	file:
num_words_secp256r1	mongoose.c	10941;"	d	file:
off	mongoose.c	/^  uint8_t off;     \/\/ Data offset$/;"	m	struct:tcp	file:
omega_mult_secp160r1	mongoose.c	/^static void omega_mult_secp160r1(uint32_t *result, const uint32_t *right) {$/;"	f	file:
omega_mult_secp160r1	mongoose.c	/^static void omega_mult_secp160r1(uint64_t *result, const uint64_t *right) {$/;"	f	file:
omega_mult_secp160r1	mongoose.c	/^static void omega_mult_secp160r1(uint8_t *result, const uint8_t *right) {$/;"	f	file:
omega_mult_secp256k1	mongoose.c	/^static void omega_mult_secp256k1(uint32_t *result, const uint32_t *right) {$/;"	f	file:
omega_mult_secp256k1	mongoose.c	/^static void omega_mult_secp256k1(uint64_t *result, const uint64_t *right) {$/;"	f	file:
omega_mult_secp256k1	mongoose.c	/^static void omega_mult_secp256k1(uint8_t *result, const uint8_t *right) {$/;"	f	file:
onstatechange	mongoose.c	/^static void onstatechange(struct mg_tcpip_if *ifp) {$/;"	f	file:
op	mongoose.c	/^  uint16_t op;     \/\/ Operation$/;"	m	struct:arp	file:
op	mongoose.c	/^  uint8_t op, htype, hlen, hops;$/;"	m	struct:dhcp	file:
op	mongoose.h	/^  void *(*op)(const char *path, int flags);             \/\/ Open file$/;"	m	struct:mg_fs
opendir	mongoose.c	/^DIR *opendir(const char *name) {$/;"	f
options	mongoose.c	/^  uint8_t options[32];$/;"	m	struct:dhcp	file:
opts	mongoose.c	/^  const struct mg_http_serve_opts *opts;$/;"	m	struct:printdirentrydata	typeref:struct:printdirentrydata::mg_http_serve_opts	file:
opts	mongoose.c	/^  uint8_t opts[3];  \/\/ Options$/;"	m	struct:ip6	file:
p	mongoose.c	/^  uECC_word_t p[uECC_MAX_WORDS];$/;"	m	struct:uECC_Curve_t	file:
p_close	mongoose.c	/^static void p_close(void *fp) {$/;"	f	file:
p_list	mongoose.c	/^static void p_list(const char *dir, void (*fn)(const char *, void *),$/;"	f	file:
p_list	mongoose.c	/^static void p_list(const char *path, void (*fn)(const char *, void *),$/;"	f	file:
p_mkdir	mongoose.c	/^static bool p_mkdir(const char *path) {$/;"	f	file:
p_open	mongoose.c	/^static void *p_open(const char *path, int flags) {$/;"	f	file:
p_read	mongoose.c	/^static size_t p_read(void *fd, void *buf, size_t len) {$/;"	f	file:
p_read	mongoose.c	/^static size_t p_read(void *fp, void *buf, size_t len) {$/;"	f	file:
p_remove	mongoose.c	/^static bool p_remove(const char *path) {$/;"	f	file:
p_rename	mongoose.c	/^static bool p_rename(const char *from, const char *to) {$/;"	f	file:
p_seek	mongoose.c	/^static size_t p_seek(void *fd, size_t offset) {$/;"	f	file:
p_seek	mongoose.c	/^static size_t p_seek(void *fp, size_t offset) {$/;"	f	file:
p_stat	mongoose.c	/^static int p_stat(const char *path, size_t *size, time_t *mtime) {$/;"	f	file:
p_write	mongoose.c	/^static size_t p_write(void *fd, const void *buf, size_t len) {$/;"	f	file:
p_write	mongoose.c	/^static size_t p_write(void *fp, const void *buf, size_t len) {$/;"	f	file:
packed_close	mongoose.c	/^static void packed_close(void *fp) {$/;"	f	file:
packed_file	mongoose.c	/^struct packed_file {$/;"	s	file:
packed_file	packed_fs.c	/^static const struct packed_file {$/;"	s	file:
packed_files	packed_fs.c	/^} packed_files[] = {$/;"	v	typeref:struct:packed_file	file:
packed_list	mongoose.c	/^static void packed_list(const char *dir, void (*fn)(const char *, void *),$/;"	f	file:
packed_mkdir	mongoose.c	/^static bool packed_mkdir(const char *path) {$/;"	f	file:
packed_open	mongoose.c	/^static void *packed_open(const char *path, int flags) {$/;"	f	file:
packed_read	mongoose.c	/^static size_t packed_read(void *fd, void *buf, size_t len) {$/;"	f	file:
packed_remove	mongoose.c	/^static bool packed_remove(const char *path) {$/;"	f	file:
packed_rename	mongoose.c	/^static bool packed_rename(const char *from, const char *to) {$/;"	f	file:
packed_seek	mongoose.c	/^static size_t packed_seek(void *fd, size_t offset) {$/;"	f	file:
packed_stat	mongoose.c	/^static int packed_stat(const char *path, size_t *size, time_t *mtime) {$/;"	f	file:
packed_write	mongoose.c	/^static size_t packed_write(void *fd, const void *buf, size_t len) {$/;"	f	file:
page404	mongoose.h	/^  const char *page404;        \/\/ Path to the 404 page, or NULL by default$/;"	m	struct:mg_http_serve_opts
parse_net	mongoose.c	/^static int parse_net(const char *spec, uint32_t *net, uint32_t *mask) {$/;"	f	file:
pass	mongoose.c	/^  size_t key, user, pass, host, port, uri, end;$/;"	m	struct:url	file:
pass	mongoose.h	/^  struct mg_str pass;               \/\/ Password, can be empty$/;"	m	struct:mg_mqtt_opts	typeref:struct:mg_mqtt_opts::mg_str
pay	mongoose.c	/^  struct mg_str pay;  \/\/ Payload data$/;"	m	struct:pkt	typeref:struct:pkt::mg_str	file:
period_ms	mongoose.h	/^  uint64_t period_ms;       \/\/ Timer period in milliseconds$/;"	m	struct:mg_timer
pfn	mongoose.h	/^  mg_event_handler_t pfn;      \/\/ Protocol-specific handler function$/;"	m	struct:mg_connection
pfn	mongoose.h	/^  mg_pfn_t pfn;          \/\/ Response printing function$/;"	m	struct:mg_rpc_req
pfn_data	mongoose.h	/^  void *pfn_data;              \/\/ Protocol-specific function parameter$/;"	m	struct:mg_connection
pfn_data	mongoose.h	/^  void *pfn_data;        \/\/ Response printing function data$/;"	m	struct:mg_rpc_req
phy_addr	mongoose.h	/^  uint8_t phy_addr;  \/\/ PHY address$/;"	m	struct:mg_tcpip_driver_imxrt_data
phy_addr	mongoose.h	/^  uint8_t phy_addr;  \/\/ PHY address$/;"	m	struct:mg_tcpip_driver_stm32f_data
pipe	mongoose.h	/^  MG_SOCKET_TYPE pipe;          \/\/ Socketpair end for mg_wakeup()$/;"	m	struct:mg_mgr
pk	mongoose.h	/^  mbedtls_pk_context pk;    \/\/ Private key context$/;"	m	struct:mg_tls
pkt	mongoose.c	/^struct pkt {$/;"	s	file:
plen	mongoose.c	/^  uint8_t plen;    \/\/ Length of protocol address$/;"	m	struct:arp	file:
poll	mongoose.h	476;"	d
port	mongoose.c	/^  size_t key, user, pass, host, port, uri, end;$/;"	m	struct:url	file:
port	mongoose.h	/^  uint16_t port;     \/\/ TCP or UDP port in network byte order$/;"	m	struct:mg_addr
pos	mongoose.c	/^  size_t pos;$/;"	m	struct:packed_file	file:
print_ip4	mongoose.c	/^static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {$/;"	f	file:
print_ip6	mongoose.c	/^static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {$/;"	f	file:
print_methods	mongoose.c	/^static size_t print_methods(mg_pfn_t pfn, void *pfn_data, va_list *ap) {$/;"	f	file:
printdirentry	mongoose.c	/^static void printdirentry(const char *name, void *userdata) {$/;"	f	file:
printdirentrydata	mongoose.c	/^struct printdirentrydata {$/;"	s	file:
priv	mongoose.h	/^  void *priv;                   \/\/ Used by the MIP stack$/;"	m	struct:mg_mgr
pro	mongoose.c	/^  uint16_t pro;    \/\/ Format of protocol address$/;"	m	struct:arp	file:
prof	mongoose.h	/^  struct mg_iobuf prof;        \/\/ Profile data enabled by MG_ENABLE_PROFILE$/;"	m	struct:mg_connection	typeref:struct:mg_connection::mg_iobuf
propagate	mongoose.c	/^static void propagate(fe x, limb_t over) {$/;"	f	file:
props	mongoose.h	/^  struct mg_mqtt_prop *props;       \/\/ MQTT5 props array$/;"	m	struct:mg_mqtt_opts	typeref:struct:mg_mqtt_opts::mg_mqtt_prop
props_size	mongoose.h	/^  size_t props_size;    \/\/ Length of the properties$/;"	m	struct:mg_mqtt_message
props_start	mongoose.h	/^  size_t props_start;   \/\/ Offset to the start of the properties (MQTT5)$/;"	m	struct:mg_mqtt_message
proto	mongoose.c	/^  uint8_t addr, ctrl, proto[2], code, id, len[2];$/;"	m	struct:lcp	file:
proto	mongoose.c	/^  uint8_t proto;    \/\/ Upper level protocol$/;"	m	struct:ip6	file:
proto	mongoose.c	/^  uint8_t proto;  \/\/ Upper level protocol$/;"	m	struct:ip	file:
proto	mongoose.h	/^  struct mg_str method, uri, query, proto;             \/\/ Request\/response line$/;"	m	struct:mg_http_message	typeref:struct:mg_http_message::
ptr	mongoose.h	/^  const char *ptr;  \/\/ Pointer to string data$/;"	m	struct:mg_str
qcpy	mongoose.c	/^static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,$/;"	f	file:
qos	mongoose.h	/^  uint8_t qos;                      \/\/ message quality of service$/;"	m	struct:mg_mqtt_opts
qos	mongoose.h	/^  uint8_t qos;          \/\/ Quality of service$/;"	m	struct:mg_mqtt_message
query	mongoose.h	/^  struct mg_str method, uri, query, proto;             \/\/ Request\/response line$/;"	m	struct:mg_http_message	typeref:struct:mg_http_message::
raccept	mongoose.c	/^static MG_SOCKET_TYPE raccept(MG_SOCKET_TYPE sock, union usa *usa,$/;"	f	file:
raw	mongoose.c	/^  struct mg_iobuf raw;   \/\/ For TLS only. Incoming raw data$/;"	m	struct:connstate	typeref:struct:connstate::mg_iobuf	file:
raw	mongoose.c	/^  struct mg_str raw;  \/\/ Raw packet data$/;"	m	struct:pkt	typeref:struct:pkt::mg_str	file:
rd	mongoose.h	/^  size_t (*rd)(void *fd, void *buf, size_t len);        \/\/ Read file$/;"	m	struct:mg_fs
read_conn	mongoose.c	/^static void read_conn(struct mg_connection *c) {$/;"	f	file:
read_conn	mongoose.c	/^static void read_conn(struct mg_connection *c, struct pkt *pkt) {$/;"	f	file:
readdir	mongoose.c	/^struct dirent *readdir(DIR *d) {$/;"	f
realpath	mongoose.h	500;"	d
recv	mongoose.h	/^  struct mg_iobuf recv;        \/\/ Incoming data$/;"	m	struct:mg_connection	typeref:struct:mg_connection::mg_iobuf
recv	mongoose.h	604;"	d
recv_queue	mongoose.h	/^  struct mg_queue recv_queue;      \/\/ Receive queue$/;"	m	struct:mg_tcpip_if	typeref:struct:mg_tcpip_if::mg_queue
recv_raw	mongoose.c	/^static long recv_raw(struct mg_connection *c, void *buf, size_t len) {$/;"	f	file:
recvfrom	mongoose.h	607;"	d
regularize_k	mongoose.c	/^static uECC_word_t regularize_k(const uECC_word_t *const k, uECC_word_t *k0,$/;"	f	file:
rem	mongoose.h	/^  struct mg_addr rem;          \/\/ Remote address$/;"	m	struct:mg_connection	typeref:struct:mg_connection::mg_addr
req_data	mongoose.h	/^  void *req_data;        \/\/ Arbitrary request data$/;"	m	struct:mg_rpc_req
resolved	mongoose.h	/^  bool resolved;        \/\/ Resolve successful, addr is set$/;"	m	struct:mg_dns_message
restore_http_cb	mongoose.c	/^static void restore_http_cb(struct mg_connection *c) {$/;"	f	file:
result	mongoose.c	/^  struct dirent result;$/;"	m	struct:win32_dir	typeref:struct:win32_dir::dirent	file:
result_size	mongoose.h	/^      result_size; \/* Hash function result size in bytes, eg 32 for SHA-256. *\/$/;"	m	struct:uECC_HashContext
retain	mongoose.h	/^  bool retain;                      \/\/ Retain flag$/;"	m	struct:mg_mqtt_opts
rk	mongoose.h	/^  uint32_t *rk;      \/\/ pointer to current round key$/;"	m	struct:__anon13
rm	mongoose.h	/^  bool (*rm)(const char *path);                         \/\/ Delete file$/;"	m	struct:mg_fs
rol	mongoose.c	6223;"	d	file:
root_dir	mongoose.h	/^  const char *root_dir;       \/\/ Web root directory, must be non-NULL$/;"	m	struct:mg_http_serve_opts
ror	mongoose.c	6427;"	d	file:
rounds	mongoose.h	/^  int rounds;        \/\/ keysize-based rounds count$/;"	m	struct:__anon13
roundup	mongoose.c	/^static size_t roundup(size_t size, size_t align) {$/;"	f	file:
rpc	mongoose.h	/^  struct mg_rpc *rpc;    \/\/ RPC handler being called$/;"	m	struct:mg_rpc_req	typeref:struct:mg_rpc_req::mg_rpc
rtls	mongoose.h	/^  struct mg_iobuf rtls;        \/\/ TLS only. Incoming encrypted data$/;"	m	struct:mg_connection	typeref:struct:mg_connection::mg_iobuf
rx	mongoose.h	/^  size_t (*rx)(void *buf, size_t len, struct mg_tcpip_if *);  \/\/ Receive frame$/;"	m	struct:mg_tcpip_driver
rx_arp	mongoose.c	/^static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {$/;"	f	file:
rx_dhcp_client	mongoose.c	/^static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {$/;"	f	file:
rx_dhcp_server	mongoose.c	/^static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {$/;"	f	file:
rx_icmp	mongoose.c	/^static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {$/;"	f	file:
rx_ip	mongoose.c	/^static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {$/;"	f	file:
rx_ip6	mongoose.c	/^static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {$/;"	f	file:
rx_tcp	mongoose.c	/^static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {$/;"	f	file:
rx_udp	mongoose.c	/^static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {$/;"	f	file:
s_addr	mongoose.c	/^static char *s_addr;      \/\/ Current address to write to$/;"	v	file:
s_conn	main.c	/^static struct mg_connection *s_conn;              \/\/ Client connection$/;"	v	typeref:struct:mg_connection	file:
s_crc32	mongoose.c	/^static uint32_t s_crc32;  \/\/ Firmware checksum$/;"	v	file:
s_ifp	mongoose.c	/^static struct mg_tcpip_if *s_ifp;                         \/\/ MIP interface$/;"	v	typeref:struct:mg_tcpip_if	file:
s_ifp	mongoose.c	/^static struct mg_tcpip_if *s_ifp;                    \/\/ MIP interface$/;"	v	typeref:struct:mg_tcpip_if	file:
s_ifp	mongoose.c	/^static struct mg_tcpip_if *s_ifp;  \/\/ MIP interface$/;"	v	typeref:struct:mg_tcpip_if	file:
s_ifp	mongoose.c	/^static struct mg_tcpip_if *s_ifp;$/;"	v	typeref:struct:mg_tcpip_if	file:
s_known_types	mongoose.c	/^static struct mg_str s_known_types[] = {$/;"	v	typeref:struct:mg_str	file:
s_log_func	mongoose.c	/^static mg_pfn_t s_log_func = mg_pfn_stdout;$/;"	v	file:
s_log_func_param	mongoose.c	/^static void *s_log_func_param = NULL;$/;"	v	file:
s_prop_map	mongoose.c	/^static const struct mg_mqtt_pmap s_prop_map[] = {$/;"	v	typeref:struct:mg_mqtt_pmap	file:
s_pub_topic	main.c	/^static const char *s_pub_topic = "test";  \/\/ Subscribe topic$/;"	v	file:
s_qos	main.c	/^static int s_qos = 1;                             \/\/ MQTT QoS$/;"	v	file:
s_rxbuf	mongoose.c	/^static uint8_t s_rxbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       \/\/ RX ethernet buffers$/;"	v	file:
s_rxbuf	mongoose.c	/^static uint8_t s_rxbuf[ETH_DESC_CNT][ETH_PKT_SIZE];  \/\/ RX ethernet buffers$/;"	v	file:
s_rxbuf	mongoose.c	/^static uint8_t s_rxbuf[ETH_DESC_CNT][ETH_PKT_SIZE];$/;"	v	file:
s_rxdesc	mongoose.c	/^static uint32_t s_rxdesc[ETH_DESC_CNT][ETH_DS];      \/\/ RX descriptors$/;"	v	file:
s_rxdesc	mongoose.c	/^static uint32_t s_rxdesc[ETH_DESC_CNT][ETH_DS];  \/\/ RX descriptors$/;"	v	file:
s_rxdesc	mongoose.c	/^static volatile uint32_t s_rxdesc[ETH_DESC_CNT][ETH_DS];  \/\/ RX descriptors$/;"	v	file:
s_rxno	mongoose.c	/^static uint32_t s_rxno;$/;"	v	file:
s_rxno	mongoose.c	/^static uint8_t s_rxno;                               \/\/ Current RX descriptor$/;"	v	file:
s_rxno	mongoose.c	/^static uint8_t s_rxno;                           \/\/ Current RX descriptor$/;"	v	file:
s_signo	main.c	/^static int s_signo;$/;"	v	file:
s_size	mongoose.c	/^static size_t s_size;     \/\/ Firmware size to flash. In-progress indicator$/;"	v	file:
s_sub_topic	main.c	/^static const char *s_sub_topic = "test";     \/\/ Publish topic$/;"	v	file:
s_txbuf	mongoose.c	/^static uint8_t s_txbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       \/\/ TX ethernet buffers$/;"	v	file:
s_txbuf	mongoose.c	/^static uint8_t s_txbuf[ETH_DESC_CNT][ETH_PKT_SIZE];  \/\/ TX ethernet buffers$/;"	v	file:
s_txbuf	mongoose.c	/^static uint8_t s_txbuf[ETH_DESC_CNT][ETH_PKT_SIZE];$/;"	v	file:
s_txdesc	mongoose.c	/^static uint32_t s_txdesc[ETH_DESC_CNT][ETH_DS];      \/\/ TX descriptors$/;"	v	file:
s_txdesc	mongoose.c	/^static uint32_t s_txdesc[ETH_DESC_CNT][ETH_DS];  \/\/ TX descriptors$/;"	v	file:
s_txdesc	mongoose.c	/^static volatile uint32_t s_txdesc[ETH_DESC_CNT][ETH_DS];  \/\/ TX descriptors$/;"	v	file:
s_txno	mongoose.c	/^static uint32_t s_txno;$/;"	v	file:
s_txno	mongoose.c	/^static uint8_t s_txno;                               \/\/ Current TX descriptor$/;"	v	file:
s_txno	mongoose.c	/^static uint8_t s_txno;                           \/\/ Current TX descriptor$/;"	v	file:
s_url	main.c	/^static const char *s_url = "0.0.0.0:1883";$/;"	v	file:
sa	mongoose.c	/^  struct sockaddr sa;$/;"	m	union:usa	typeref:struct:usa::sockaddr	file:
scmp	packed_fs.c	/^static int scmp(const char *a, const char *b) {$/;"	f	file:
scope_id	mongoose.h	/^  uint8_t scope_id;  \/\/ IPv6 scope ID$/;"	m	struct:mg_addr
scpy	mongoose.c	/^static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,$/;"	f	file:
sdlimb_t	mongoose.c	/^typedef int64_t sdlimb_t;$/;"	t	file:
secs	mongoose.c	/^  uint16_t secs, flags;$/;"	m	struct:dhcp	file:
send	mongoose.c	/^  struct mg_iobuf send; \/\/ For the receive path, we're reusing c->rtls$/;"	m	struct:tls_data	typeref:struct:tls_data::mg_iobuf	file:
send	mongoose.h	/^  struct mg_iobuf send;        \/\/ Outgoing data$/;"	m	struct:mg_connection	typeref:struct:mg_connection::mg_iobuf
send	mongoose.h	603;"	d
send_syn	mongoose.c	/^static void send_syn(struct mg_connection *c) {$/;"	f	file:
sendto	mongoose.h	606;"	d
seq	mongoose.c	/^  uint32_t seq, ack;           \/\/ TCP seq\/ack counters$/;"	m	struct:connstate	file:
seq	mongoose.c	/^  uint32_t seq;    \/\/ Sequence number$/;"	m	struct:tcp	file:
server_cert_der	mongoose.c	/^  struct mg_str server_cert_der;  \/\/ server certificate in DER format$/;"	m	struct:tls_data	typeref:struct:tls_data::mg_str	file:
server_finished_key	mongoose.c	/^  uint8_t server_finished_key[32];$/;"	m	struct:tls_data	file:
server_key	mongoose.c	/^  uint8_t server_key[32];         \/\/ server EC private key$/;"	m	struct:tls_data	file:
server_write_iv	mongoose.c	/^  uint8_t server_write_iv[12];$/;"	m	struct:tls_data	file:
server_write_key	mongoose.c	/^  uint8_t server_write_key[16];$/;"	m	struct:tls_data	file:
session_id	mongoose.c	/^  uint8_t session_id[32];  \/\/ client session ID between the handshake states$/;"	m	struct:tls_data	file:
setlocaddr	mongoose.c	/^static void setlocaddr(MG_SOCKET_TYPE fd, struct mg_addr *addr) {$/;"	f	file:
setsockopt	mongoose.h	605;"	d
setsockopts	mongoose.c	/^static void setsockopts(struct mg_connection *c) {$/;"	f	file:
settmout	mongoose.c	/^static void settmout(struct mg_connection *c, uint8_t type) {$/;"	f	file:
sha	mongoose.c	/^  uint8_t sha[6];  \/\/ Sender hardware address$/;"	m	struct:arp	file:
sha256	mongoose.c	/^  mg_sha256_ctx sha256;  \/\/ incremental SHA-256 hash for TLS handshake$/;"	m	struct:tls_data	file:
siaddr	mongoose.c	/^  uint32_t ciaddr, yiaddr, siaddr, giaddr;$/;"	m	struct:dhcp	file:
sig0	mongoose.c	6432;"	d	file:
sig1	mongoose.c	6433;"	d	file:
signal_handler	main.c	/^static void signal_handler(int signo) {$/;"	f	file:
sin	mongoose.c	/^  struct sockaddr_in sin;$/;"	m	union:usa	typeref:struct:usa::sockaddr_in	file:
sin6	mongoose.c	/^  struct sockaddr_in6 sin6;$/;"	m	union:usa	typeref:struct:usa::sockaddr_in6	file:
size	mongoose.c	/^  size_t size;$/;"	m	struct:packed_file	file:
size	mongoose.c	/^  uint32_t crc32, size, timestamp, status;$/;"	m	struct:mg_otadata	file:
size	mongoose.h	/^  size_t size;         \/\/ Total size available$/;"	m	struct:mg_iobuf
size	mongoose.h	/^  size_t size;$/;"	m	struct:mg_queue
size	packed_fs.c	/^  size_t size;$/;"	m	struct:packed_file	file:
sk	mongoose.h	/^  size_t (*sk)(void *fd, size_t offset);                \/\/ Set file position$/;"	m	struct:mg_fs
skip_chunk	mongoose.c	/^static int skip_chunk(const char *buf, int len, int *pl, int *dl) {$/;"	f	file:
skip_iotest	mongoose.c	/^static bool skip_iotest(const struct mg_connection *c) {$/;"	f	file:
skiptorn	mongoose.c	/^static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {$/;"	f	file:
sleep	mongoose.h	501;"	d
smax	mongoose.c	/^static bitcount_t smax(bitcount_t a, bitcount_t b) {$/;"	f	file:
snprintf	mongoose.h	460;"	d
sntp_cb	mongoose.c	/^static void sntp_cb(struct mg_connection *c, int ev, void *ev_data) {$/;"	f	file:
sockaddr	mongoose.h	597;"	d
sockaddr_in	mongoose.h	596;"	d
socket	mongoose.h	602;"	d
socklen_t	mongoose.h	/^typedef int socklen_t;$/;"	t
socklen_t	mongoose.h	117;"	d
socklen_t	mongoose.h	675;"	d
spa	mongoose.c	/^  uint32_t spa;    \/\/ Sender protocol address$/;"	m	struct:arp	file:
spi	mongoose.h	/^  void *spi;                        \/\/ Opaque SPI bus descriptor$/;"	m	struct:mg_tcpip_spi
sport	mongoose.c	/^  uint16_t sport;  \/\/ Source port$/;"	m	struct:tcp	file:
sport	mongoose.c	/^  uint16_t sport;  \/\/ Source port$/;"	m	struct:udp	file:
sqr	mongoose.c	/^static void sqr(fe out, const fe a) {$/;"	f	file:
sqr1	mongoose.c	/^static void sqr1(fe a) {$/;"	f	file:
src	mongoose.c	/^  uint32_t src;   \/\/ Source IP$/;"	m	struct:ip	file:
src	mongoose.c	/^  uint8_t src[16];  \/\/ Source IP$/;"	m	struct:ip6	file:
src	mongoose.c	/^  uint8_t src[6];  \/\/ Source MAC address$/;"	m	struct:eth	file:
ss	mongoose.h	/^  SocketSet_t ss;  \/\/ NOTE(lsm): referenced from socket struct$/;"	m	struct:mg_mgr
sseq	mongoose.c	/^  uint32_t sseq;  \/\/ server sequence number, used in encryption$/;"	m	struct:tls_data	file:
ssi_pattern	mongoose.h	/^  const char *ssi_pattern;    \/\/ SSI file name pattern, e.g. #.shtml$/;"	m	struct:mg_http_serve_opts
ssl	mongoose.h	/^  SSL *ssl;$/;"	m	struct:mg_tls
ssl	mongoose.h	/^  mbedtls_ssl_context ssl;  \/\/ SSL\/TLS context$/;"	m	struct:mg_tls
st	mongoose.h	/^  int (*st)(const char *path, size_t *size, time_t *mtime);  \/\/ stat file$/;"	m	struct:mg_fs
state	mongoose.c	/^  enum mg_tls_hs_state state;  \/\/ keep track of connection handshake progress$/;"	m	struct:tls_data	typeref:enum:tls_data::mg_tls_hs_state	file:
state	mongoose.h	/^  uint32_t state[5];$/;"	m	struct:__anon11
state	mongoose.h	/^  uint32_t state[8];$/;"	m	struct:__anon12
state	mongoose.h	/^  uint8_t state;                \/\/ Current state$/;"	m	struct:mg_tcpip_if
static_cb	mongoose.c	/^static void static_cb(struct mg_connection *c, int ev, void *ev_data) {$/;"	f	file:
status	mongoose.c	/^  uint32_t crc32, size, timestamp, status;$/;"	m	struct:mg_otadata	file:
stm32f_eth	mongoose.c	/^struct stm32f_eth {$/;"	s	file:
stm32h_eth	mongoose.c	/^struct stm32h_eth {$/;"	s	file:
strdup	mongoose.h	205;"	d
strdup	mongoose.h	306;"	d
strdup	mongoose.h	463;"	d
strdup	mongoose.h	539;"	d
strerror	mongoose.h	541;"	d
stripquotes	mongoose.c	/^static struct mg_str stripquotes(struct mg_str s) {$/;"	f	file:
sub	mongoose.c	/^static void sub(fe out, const fe a, const fe b) {$/;"	f	file:
tail	mongoose.h	/^  volatile size_t tail;$/;"	m	struct:mg_queue
tcp	mongoose.c	/^  struct tcp *tcp;$/;"	m	struct:pkt	typeref:struct:pkt::tcp	file:
tcp	mongoose.c	/^struct tcp {$/;"	s	file:
tha	mongoose.c	/^  uint8_t tha[6];  \/\/ Target hardware address$/;"	m	struct:arp	file:
ticket	mongoose.h	/^  mbedtls_ssl_ticket_context ticket;  \/\/ Session tickets context$/;"	m	struct:mg_tls
tickets	mongoose.h	/^  mbedtls_ssl_ticket_context tickets;$/;"	m	struct:mg_tls_ctx
timegm	mongoose.h	503;"	d
timer	mongoose.c	/^  uint64_t timer;              \/\/ TCP keep-alive \/ ACK timer$/;"	m	struct:connstate	file:
timer_1000ms	mongoose.h	/^  uint64_t timer_1000ms;        \/\/ 1000 ms timer: for DHCP and link state$/;"	m	struct:mg_tcpip_if
timer_fn	main.c	/^static void timer_fn(void *arg) {$/;"	f	file:
timerid	mongoose.h	/^  unsigned long timerid;        \/\/ Next timer ID$/;"	m	struct:mg_mgr
timers	mongoose.h	/^  struct mg_timer *timers;      \/\/ Active timers$/;"	m	struct:mg_mgr	typeref:struct:mg_mgr::mg_timer
timestamp	mongoose.c	/^  uint32_t crc32, size, timestamp, status;$/;"	m	struct:mg_otadata	file:
timestamp	mongoose.h	/^  uint32_t timestamp;  \/\/ Milliseconds since connection creation (MG_EV_OPEN)$/;"	m	struct:mg_profitem
timeval	mongoose.h	/^struct timeval {$/;"	s
tls	mongoose.h	/^  void *tls;                   \/\/ TLS specific data$/;"	m	struct:mg_connection
tls_ctx	mongoose.h	/^  void *tls_ctx;                \/\/ TLS context shared by all TLS sessions$/;"	m	struct:mg_mgr
tls_data	mongoose.c	/^struct tls_data {$/;"	s	file:
tls_err_cb	mongoose.c	/^static int tls_err_cb(const char *s, size_t len, void *c) {$/;"	f	file:
tm4c_emac	mongoose.c	/^struct tm4c_emac {$/;"	s	file:
tm4cspin	mongoose.c	/^static inline void tm4cspin(volatile uint32_t count) {$/;"	f	file:
tmiss	mongoose.c	/^  uint8_t tmiss;         \/\/ Number of keep-alive misses$/;"	m	struct:connstate	file:
tmp	mongoose.h	/^  uint8_t *tmp;    \/* Must point to a buffer of at least (2 * result_size +$/;"	m	struct:uECC_HashContext
to_wchar	mongoose.c	/^static int to_wchar(const char *path, wchar_t *wbuf, size_t wbuf_len) {$/;"	f	file:
tomgaddr	mongoose.c	/^static void tomgaddr(union usa *usa, struct mg_addr *a, bool is_ip6) {$/;"	f	file:
topic	mongoose.h	/^  struct mg_str topic;              \/\/ message\/subscription topic$/;"	m	struct:mg_mqtt_opts	typeref:struct:mg_mqtt_opts::mg_str
topic	mongoose.h	/^  struct mg_str topic;  \/\/ Parsed topic for PUBLISH$/;"	m	struct:mg_mqtt_message	typeref:struct:mg_mqtt_message::mg_str
tos	mongoose.c	/^  uint8_t tos;    \/\/ Unused$/;"	m	struct:ip	file:
tousa	mongoose.c	/^static socklen_t tousa(struct mg_addr *a, union usa *usa) {$/;"	f	file:
tpa	mongoose.c	/^  uint32_t tpa;    \/\/ Target protocol address$/;"	m	struct:arp	file:
trim_len	mongoose.c	/^static size_t trim_len(struct mg_connection *c, size_t len) {$/;"	f	file:
true	mongoose.h	/^typedef enum { false = 0, true = 1 } bool;$/;"	e	enum:__anon7
ttl	mongoose.c	/^  uint8_t ttl;      \/\/ Time to live$/;"	m	struct:ip6	file:
ttl	mongoose.c	/^  uint8_t ttl;    \/\/ Time to live$/;"	m	struct:ip	file:
ttype	mongoose.c	/^  uint8_t ttype;               \/\/ Timer type. 0: ack, 1: keep-alive$/;"	m	struct:connstate	file:
tv_sec	mongoose.h	/^  time_t tv_sec;$/;"	m	struct:timeval
tv_usec	mongoose.h	/^  long tv_usec;$/;"	m	struct:timeval
tx	mongoose.h	/^  size_t (*tx)(const void *, size_t, struct mg_tcpip_if *);   \/\/ Transmit frame$/;"	m	struct:mg_tcpip_driver
tx	mongoose.h	/^  struct mg_str tx;                \/\/ Output (TX) buffer$/;"	m	struct:mg_tcpip_if	typeref:struct:mg_tcpip_if::mg_str
tx_dhcp	mongoose.c	/^static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,$/;"	f	file:
tx_dhcp_discover	mongoose.c	/^static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {$/;"	f	file:
tx_dhcp_request_re	mongoose.c	/^static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,$/;"	f	file:
tx_dhcp_request_sel	mongoose.c	/^static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,$/;"	f	file:
tx_ip	mongoose.c	/^static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,$/;"	f	file:
tx_tcp	mongoose.c	/^static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,$/;"	f	file:
tx_tcp_pkt	mongoose.c	/^static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,$/;"	f	file:
tx_udp	mongoose.c	/^static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,$/;"	f	file:
txn	mongoose.h	/^  uint8_t (*txn)(void *, uint8_t);  \/\/ SPI transaction: write 1 byte, read reply$/;"	m	struct:mg_tcpip_spi
txnid	mongoose.c	/^  uint16_t txnid;$/;"	m	struct:dns_data	file:
txnid	mongoose.h	/^  uint16_t txnid;       \/\/ Transaction ID$/;"	m	struct:mg_dns_message
txnid	mongoose.h	/^  uint16_t txnid;  \/\/ Transaction ID$/;"	m	struct:mg_dns_header
type	mongoose.c	/^  uint16_t type;   \/\/ Ethernet type$/;"	m	struct:eth	file:
type	mongoose.c	/^  uint8_t type;$/;"	m	struct:icmp	file:
type	mongoose.c	/^  uint8_t type;$/;"	m	struct:mg_mqtt_pmap	file:
uECC	mongoose.c	/^  uECC_HashContext uECC;$/;"	m	struct:SHA256_HashContext	file:
uECC_ARM_USE_UMAAL	mongoose.h	2024;"	d
uECC_ARM_USE_UMAAL	mongoose.h	2027;"	d
uECC_ARM_USE_UMAAL	mongoose.h	2029;"	d
uECC_Curve	mongoose.h	/^typedef const struct uECC_Curve_t *uECC_Curve;$/;"	t	typeref:struct:uECC_Curve_t
uECC_Curve_t	mongoose.c	/^struct uECC_Curve_t {$/;"	s	file:
uECC_ENABLE_VLI_API	mongoose.h	1847;"	d
uECC_HashContext	mongoose.h	/^typedef struct uECC_HashContext {$/;"	s
uECC_HashContext	mongoose.h	/^} uECC_HashContext;$/;"	t	typeref:struct:uECC_HashContext
uECC_MAX_WORDS	mongoose.c	10235;"	d	file:
uECC_MAX_WORDS	mongoose.c	10238;"	d	file:
uECC_MAX_WORDS	mongoose.c	10239;"	d	file:
uECC_MAX_WORDS	mongoose.c	10242;"	d	file:
uECC_MAX_WORDS	mongoose.c	10243;"	d	file:
uECC_MAX_WORDS	mongoose.c	10246;"	d	file:
uECC_MAX_WORDS	mongoose.c	10247;"	d	file:
uECC_MAX_WORDS	mongoose.c	10251;"	d	file:
uECC_MAX_WORDS	mongoose.c	10254;"	d	file:
uECC_MAX_WORDS	mongoose.c	10255;"	d	file:
uECC_MAX_WORDS	mongoose.c	10258;"	d	file:
uECC_MAX_WORDS	mongoose.c	10259;"	d	file:
uECC_MAX_WORDS	mongoose.c	10262;"	d	file:
uECC_MAX_WORDS	mongoose.c	10263;"	d	file:
uECC_MAX_WORDS	mongoose.c	10267;"	d	file:
uECC_MAX_WORDS	mongoose.c	10270;"	d	file:
uECC_MAX_WORDS	mongoose.c	10271;"	d	file:
uECC_MAX_WORDS	mongoose.c	10274;"	d	file:
uECC_MAX_WORDS	mongoose.c	10275;"	d	file:
uECC_MAX_WORDS	mongoose.c	10278;"	d	file:
uECC_MAX_WORDS	mongoose.c	10279;"	d	file:
uECC_OPTIMIZATION_LEVEL	mongoose.h	1490;"	d
uECC_PLATFORM	mongoose.h	2002;"	d
uECC_PLATFORM	mongoose.h	2005;"	d
uECC_PLATFORM	mongoose.h	2007;"	d
uECC_PLATFORM	mongoose.h	2009;"	d
uECC_PLATFORM	mongoose.h	2011;"	d
uECC_PLATFORM	mongoose.h	2014;"	d
uECC_PLATFORM	mongoose.h	2016;"	d
uECC_PLATFORM	mongoose.h	2018;"	d
uECC_RNG_Function	mongoose.h	/^typedef int (*uECC_RNG_Function)(uint8_t *dest, unsigned size);$/;"	t
uECC_RNG_MAX_TRIES	mongoose.c	10150;"	d	file:
uECC_SQUARE_FUNC	mongoose.h	1498;"	d
uECC_SUPPORTS_secp160r1	mongoose.h	1519;"	d
uECC_SUPPORTS_secp192r1	mongoose.h	1522;"	d
uECC_SUPPORTS_secp224r1	mongoose.h	1525;"	d
uECC_SUPPORTS_secp256k1	mongoose.h	1531;"	d
uECC_SUPPORTS_secp256r1	mongoose.h	1462;"	d
uECC_SUPPORTS_secp256r1	mongoose.h	1528;"	d
uECC_SUPPORT_COMPRESSED_POINT	mongoose.h	1537;"	d
uECC_VLI_API	mongoose.c	10154;"	d	file:
uECC_VLI_API	mongoose.c	10156;"	d	file:
uECC_VLI_NATIVE_LITTLE_ENDIAN	mongoose.h	1514;"	d
uECC_WORD_BITS	mongoose.h	2071;"	d
uECC_WORD_BITS	mongoose.h	2081;"	d
uECC_WORD_BITS	mongoose.h	2090;"	d
uECC_WORD_BITS_MASK	mongoose.h	2073;"	d
uECC_WORD_BITS_MASK	mongoose.h	2083;"	d
uECC_WORD_BITS_MASK	mongoose.h	2092;"	d
uECC_WORD_BITS_SHIFT	mongoose.h	2072;"	d
uECC_WORD_BITS_SHIFT	mongoose.h	2082;"	d
uECC_WORD_BITS_SHIFT	mongoose.h	2091;"	d
uECC_WORD_SIZE	mongoose.h	2035;"	d
uECC_WORD_SIZE	mongoose.h	2037;"	d
uECC_WORD_SIZE	mongoose.h	2039;"	d
uECC_WORD_SIZE	mongoose.h	2049;"	d
uECC_WORD_SIZE	mongoose.h	2050;"	d
uECC_WORD_SIZE	mongoose.h	2057;"	d
uECC_WORD_SIZE	mongoose.h	2058;"	d
uECC_arch_other	mongoose.h	1471;"	d
uECC_arm	mongoose.h	1474;"	d
uECC_arm64	mongoose.h	1477;"	d
uECC_arm_thumb	mongoose.h	1475;"	d
uECC_arm_thumb2	mongoose.h	1476;"	d
uECC_avr	mongoose.h	1478;"	d
uECC_compress	mongoose.c	/^void uECC_compress(const uint8_t *public_key, uint8_t *compressed,$/;"	f
uECC_compute_public_key	mongoose.c	/^int uECC_compute_public_key(const uint8_t *private_key, uint8_t *public_key,$/;"	f
uECC_curve_G	mongoose.c	/^const uECC_word_t *uECC_curve_G(uECC_Curve curve) {$/;"	f
uECC_curve_b	mongoose.c	/^const uECC_word_t *uECC_curve_b(uECC_Curve curve) {$/;"	f
uECC_curve_n	mongoose.c	/^const uECC_word_t *uECC_curve_n(uECC_Curve curve) {$/;"	f
uECC_curve_num_bits	mongoose.c	/^unsigned uECC_curve_num_bits(uECC_Curve curve) {$/;"	f
uECC_curve_num_bytes	mongoose.c	/^unsigned uECC_curve_num_bytes(uECC_Curve curve) {$/;"	f
uECC_curve_num_n_bits	mongoose.c	/^unsigned uECC_curve_num_n_bits(uECC_Curve curve) {$/;"	f
uECC_curve_num_n_bytes	mongoose.c	/^unsigned uECC_curve_num_n_bytes(uECC_Curve curve) {$/;"	f
uECC_curve_num_n_words	mongoose.c	/^unsigned uECC_curve_num_n_words(uECC_Curve curve) {$/;"	f
uECC_curve_num_words	mongoose.c	/^unsigned uECC_curve_num_words(uECC_Curve curve) {$/;"	f
uECC_curve_p	mongoose.c	/^const uECC_word_t *uECC_curve_p(uECC_Curve curve) {$/;"	f
uECC_curve_private_key_size	mongoose.c	/^int uECC_curve_private_key_size(uECC_Curve curve) {$/;"	f
uECC_curve_public_key_size	mongoose.c	/^int uECC_curve_public_key_size(uECC_Curve curve) {$/;"	f
uECC_decompress	mongoose.c	/^void uECC_decompress(const uint8_t *compressed, uint8_t *public_key,$/;"	f
uECC_dword_t	mongoose.h	/^typedef uint16_t uECC_dword_t;$/;"	t
uECC_dword_t	mongoose.h	/^typedef uint64_t uECC_dword_t;$/;"	t
uECC_generate_random_int	mongoose.c	/^uECC_VLI_API int uECC_generate_random_int(uECC_word_t *random,$/;"	f
uECC_get_rng	mongoose.c	/^uECC_RNG_Function uECC_get_rng(void) {$/;"	f
uECC_make_key	mongoose.c	/^int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve) {$/;"	f
uECC_point_mult	mongoose.c	/^void uECC_point_mult(uECC_word_t *result, const uECC_word_t *point,$/;"	f
uECC_secp160r1	mongoose.c	/^uECC_Curve uECC_secp160r1(void) {$/;"	f
uECC_secp192r1	mongoose.c	/^uECC_Curve uECC_secp192r1(void) {$/;"	f
uECC_secp224r1	mongoose.c	/^uECC_Curve uECC_secp224r1(void) {$/;"	f
uECC_secp256k1	mongoose.c	/^uECC_Curve uECC_secp256k1(void) {$/;"	f
uECC_secp256r1	mongoose.c	/^uECC_Curve uECC_secp256r1(void) {$/;"	f
uECC_set_rng	mongoose.c	/^void uECC_set_rng(uECC_RNG_Function rng_function) {$/;"	f
uECC_shared_secret	mongoose.c	/^int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,$/;"	f
uECC_sign	mongoose.c	/^int uECC_sign(const uint8_t *private_key, const uint8_t *message_hash,$/;"	f
uECC_sign_deterministic	mongoose.c	/^int uECC_sign_deterministic(const uint8_t *private_key,$/;"	f
uECC_sign_with_k_internal	mongoose.c	/^static int uECC_sign_with_k_internal(const uint8_t *private_key,$/;"	f	file:
uECC_valid_point	mongoose.c	/^uECC_VLI_API int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve) {$/;"	f
uECC_valid_public_key	mongoose.c	/^int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve) {$/;"	f
uECC_verify	mongoose.c	/^int uECC_verify(const uint8_t *public_key, const uint8_t *message_hash,$/;"	f
uECC_vli_add	mongoose.c	/^uECC_VLI_API uECC_word_t uECC_vli_add(uECC_word_t *result,$/;"	f
uECC_vli_bytesToNative	mongoose.c	/^uECC_VLI_API void uECC_vli_bytesToNative(uECC_word_t *native,$/;"	f
uECC_vli_bytesToNative	mongoose.c	/^uECC_VLI_API void uECC_vli_bytesToNative(uint8_t *native, const uint8_t *bytes,$/;"	f
uECC_vli_clear	mongoose.c	/^uECC_VLI_API void uECC_vli_clear(uECC_word_t *vli, wordcount_t num_words) {$/;"	f
uECC_vli_cmp	mongoose.c	/^uECC_VLI_API cmpresult_t uECC_vli_cmp(const uECC_word_t *left,$/;"	f
uECC_vli_cmp_unsafe	mongoose.c	/^static cmpresult_t uECC_vli_cmp_unsafe(const uECC_word_t *left,$/;"	f	file:
uECC_vli_equal	mongoose.c	/^uECC_VLI_API uECC_word_t uECC_vli_equal(const uECC_word_t *left,$/;"	f
uECC_vli_isZero	mongoose.c	/^uECC_VLI_API uECC_word_t uECC_vli_isZero(const uECC_word_t *vli,$/;"	f
uECC_vli_mmod	mongoose.c	/^uECC_VLI_API void uECC_vli_mmod(uECC_word_t *result, uECC_word_t *product,$/;"	f
uECC_vli_mmod_fast	mongoose.c	/^void uECC_vli_mmod_fast(uECC_word_t *result, uECC_word_t *product,$/;"	f
uECC_vli_modAdd	mongoose.c	/^uECC_VLI_API void uECC_vli_modAdd(uECC_word_t *result, const uECC_word_t *left,$/;"	f
uECC_vli_modInv	mongoose.c	/^uECC_VLI_API void uECC_vli_modInv(uECC_word_t *result, const uECC_word_t *input,$/;"	f
uECC_vli_modMult	mongoose.c	/^uECC_VLI_API void uECC_vli_modMult(uECC_word_t *result, const uECC_word_t *left,$/;"	f
uECC_vli_modMult_fast	mongoose.c	/^uECC_VLI_API void uECC_vli_modMult_fast(uECC_word_t *result,$/;"	f
uECC_vli_modSquare	mongoose.c	/^uECC_VLI_API void uECC_vli_modSquare(uECC_word_t *result,$/;"	f
uECC_vli_modSquare_fast	mongoose.c	/^uECC_VLI_API void uECC_vli_modSquare_fast(uECC_word_t *result,$/;"	f
uECC_vli_modSub	mongoose.c	/^uECC_VLI_API void uECC_vli_modSub(uECC_word_t *result, const uECC_word_t *left,$/;"	f
uECC_vli_mod_sqrt	mongoose.c	/^void uECC_vli_mod_sqrt(uECC_word_t *a, uECC_Curve curve) {$/;"	f
uECC_vli_mult	mongoose.c	/^uECC_VLI_API void uECC_vli_mult(uECC_word_t *result, const uECC_word_t *left,$/;"	f
uECC_vli_nativeToBytes	mongoose.c	/^uECC_VLI_API void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,$/;"	f
uECC_vli_numBits	mongoose.c	/^uECC_VLI_API bitcount_t uECC_vli_numBits(const uECC_word_t *vli,$/;"	f
uECC_vli_rshift1	mongoose.c	/^uECC_VLI_API void uECC_vli_rshift1(uECC_word_t *vli, wordcount_t num_words) {$/;"	f
uECC_vli_set	mongoose.c	/^uECC_VLI_API void uECC_vli_set(uECC_word_t *dest, const uECC_word_t *src,$/;"	f
uECC_vli_square	mongoose.c	/^uECC_VLI_API void uECC_vli_square(uECC_word_t *result, const uECC_word_t *left,$/;"	f
uECC_vli_sub	mongoose.c	/^uECC_VLI_API uECC_word_t uECC_vli_sub(uECC_word_t *result,$/;"	f
uECC_vli_testBit	mongoose.c	/^uECC_VLI_API uECC_word_t uECC_vli_testBit(const uECC_word_t *vli,$/;"	f
uECC_word_t	mongoose.h	/^typedef uint32_t uECC_word_t;$/;"	t
uECC_word_t	mongoose.h	/^typedef uint64_t uECC_word_t;$/;"	t
uECC_word_t	mongoose.h	/^typedef uint8_t uECC_word_t;$/;"	t
uECC_x86	mongoose.h	1472;"	d
uECC_x86_64	mongoose.h	1473;"	d
uchar	mongoose.h	/^typedef unsigned char uchar;  \/\/ add some convienent shorter types$/;"	t
udp	mongoose.c	/^  struct udp *udp;$/;"	m	struct:pkt	typeref:struct:pkt::udp	file:
udp	mongoose.c	/^struct udp {$/;"	s	file:
uint	mongoose.h	/^typedef unsigned int uint;$/;"	t
uint16_t	mongoose.h	/^typedef unsigned short uint16_t;$/;"	t
uint32_t	mongoose.h	/^typedef unsigned int uint32_t;$/;"	t
uint64_t	mongoose.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint8_t	mongoose.h	/^typedef unsigned char uint8_t;$/;"	t
umaal	mongoose.c	/^static limb_t umaal(limb_t *carry, limb_t acc, limb_t mand, limb_t mier) {$/;"	f	file:
up	mongoose.h	/^  bool (*up)(struct mg_tcpip_if *);                           \/\/ Up\/down status$/;"	m	struct:mg_tcpip_driver
update_SHA256	mongoose.c	/^static void update_SHA256(const uECC_HashContext *base, const uint8_t *message,$/;"	f	file:
update_V	mongoose.c	/^static void update_V(const uECC_HashContext *hash_context, uint8_t *K,$/;"	f	file:
update_hash	mongoose.h	/^  void (*update_hash)(const struct uECC_HashContext *context,$/;"	m	struct:uECC_HashContext
uri	mongoose.c	/^  size_t key, user, pass, host, port, uri, end;$/;"	m	struct:url	file:
uri	mongoose.h	/^  struct mg_str method, uri, query, proto;             \/\/ Request\/response line$/;"	m	struct:mg_http_message	typeref:struct:mg_http_message::
uri_to_path	mongoose.c	/^static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,$/;"	f	file:
uri_to_path2	mongoose.c	/^static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,$/;"	f	file:
url	mongoose.c	/^struct url {$/;"	s	file:
url	mongoose.h	/^  const char *url;          \/\/ DNS server URL$/;"	m	struct:mg_dns
urlparse	mongoose.c	/^static struct url urlparse(const char *url) {$/;"	f	file:
urp	mongoose.c	/^  uint16_t urp;   \/\/ Urgent pointer$/;"	m	struct:tcp	file:
usa	mongoose.c	/^union usa {$/;"	u	file:
use_dns6	mongoose.h	/^  bool use_dns6;                \/\/ Use DNS6 server by default, see #1532$/;"	m	struct:mg_mgr
user	mongoose.c	/^  size_t key, user, pass, host, port, uri, end;$/;"	m	struct:url	file:
user	mongoose.h	/^  struct mg_str user;               \/\/ Username, can be empty$/;"	m	struct:mg_mqtt_opts	typeref:struct:mg_mqtt_opts::mg_str
userdata	mongoose.h	/^  void *userdata;               \/\/ Arbitrary user data pointer$/;"	m	struct:mg_mgr
v1	packed_fs.c	/^static const unsigned char v1[] = {$/;"	v	file:
val	mongoose.h	/^  struct mg_str val;  \/\/ Non-NULL only for UTF-8 types and user properties$/;"	m	struct:mg_mqtt_prop	typeref:struct:mg_mqtt_prop::mg_str
value	mongoose.h	/^  struct mg_str value;  \/\/ Header value$/;"	m	struct:mg_http_header	typeref:struct:mg_http_header::mg_str
varint_size	mongoose.c	/^static uint8_t varint_size(size_t length) {$/;"	f	file:
vcb	mongoose.c	/^static bool vcb(uint8_t c) {$/;"	f	file:
ver	mongoose.c	/^  uint8_t ver;      \/\/ Version$/;"	m	struct:ip6	file:
ver	mongoose.c	/^  uint8_t ver;    \/\/ Version$/;"	m	struct:ip	file:
version	mongoose.h	/^  uint8_t version;                  \/\/ Can be 4 (3.1.1), or 5. If 0, assume 4$/;"	m	struct:mg_mqtt_opts
vli_mmod_fast_secp160r1	mongoose.c	/^static void vli_mmod_fast_secp160r1(uECC_word_t *result, uECC_word_t *product) {$/;"	f	file:
vli_mmod_fast_secp192r1	mongoose.c	/^static void vli_mmod_fast_secp192r1(uint32_t *result, uint32_t *product) {$/;"	f	file:
vli_mmod_fast_secp192r1	mongoose.c	/^static void vli_mmod_fast_secp192r1(uint64_t *result, uint64_t *product) {$/;"	f	file:
vli_mmod_fast_secp192r1	mongoose.c	/^static void vli_mmod_fast_secp192r1(uint8_t *result, uint8_t *product) {$/;"	f	file:
vli_mmod_fast_secp224r1	mongoose.c	/^static void vli_mmod_fast_secp224r1(uint32_t *result, uint32_t *product) {$/;"	f	file:
vli_mmod_fast_secp224r1	mongoose.c	/^static void vli_mmod_fast_secp224r1(uint64_t *result, uint64_t *product) {$/;"	f	file:
vli_mmod_fast_secp224r1	mongoose.c	/^static void vli_mmod_fast_secp224r1(uint8_t *result, uint8_t *product) {$/;"	f	file:
vli_mmod_fast_secp256k1	mongoose.c	/^static void vli_mmod_fast_secp256k1(uECC_word_t *result, uECC_word_t *product) {$/;"	f	file:
vli_mmod_fast_secp256r1	mongoose.c	/^static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {$/;"	f	file:
vli_mmod_fast_secp256r1	mongoose.c	/^static void vli_mmod_fast_secp256r1(uint64_t *result, uint64_t *product) {$/;"	f	file:
vli_mmod_fast_secp256r1	mongoose.c	/^static void vli_mmod_fast_secp256r1(uint8_t *result, uint8_t *product) {$/;"	f	file:
vli_modInv_update	mongoose.c	/^static void vli_modInv_update(uECC_word_t *uv, const uECC_word_t *mod,$/;"	f	file:
vli_numDigits	mongoose.c	/^static wordcount_t vli_numDigits(const uECC_word_t *vli,$/;"	f	file:
vsnprintf	mongoose.h	461;"	d
w5500_init	mongoose.c	/^static bool w5500_init(struct mg_tcpip_if *ifp) {$/;"	f	file:
w5500_r1	mongoose.c	/^static  uint8_t w5500_r1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t r = 0; w5500_rn(s, block, addr, &r, 1); return r; }$/;"	f	file:
w5500_r2	mongoose.c	/^static  uint16_t w5500_r2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr) { uint8_t buf[2] = {0, 0}; w5500_rn(s, block, addr, buf, sizeof(buf)); return (uint16_t) ((buf[0] << 8) | buf[1]); }$/;"	f	file:
w5500_rn	mongoose.c	/^static  void w5500_rn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, false, buf, len); }$/;"	f	file:
w5500_rx	mongoose.c	/^static size_t w5500_rx(void *buf, size_t buflen, struct mg_tcpip_if *ifp) {$/;"	f	file:
w5500_tx	mongoose.c	/^static size_t w5500_tx(const void *buf, size_t buflen, struct mg_tcpip_if *ifp) {$/;"	f	file:
w5500_txn	mongoose.c	/^static void w5500_txn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, bool wr,$/;"	f	file:
w5500_up	mongoose.c	/^static bool w5500_up(struct mg_tcpip_if *ifp) {$/;"	f	file:
w5500_w1	mongoose.c	/^static  void w5500_w1(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint8_t val) { w5500_wn(s, block, addr, &val, 1); }$/;"	f	file:
w5500_w2	mongoose.c	/^static  void w5500_w2(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, uint16_t val) { uint8_t buf[2] = {(uint8_t) (val >> 8), (uint8_t) (val & 255)}; w5500_wn(s, block, addr, buf, sizeof(buf)); }$/;"	f	file:
w5500_wn	mongoose.c	/^static  void w5500_wn(struct mg_tcpip_spi *s, uint8_t block, uint16_t addr, void *buf, size_t len) { w5500_txn(s, block, addr, true, buf, len); }$/;"	f	file:
will_props	mongoose.h	/^  struct mg_mqtt_prop *will_props;  \/\/ Valid only for CONNECT packet (MQTT5)$/;"	m	struct:mg_mqtt_opts	typeref:struct:mg_mqtt_opts::mg_mqtt_prop
win	mongoose.c	/^  uint16_t win;   \/\/ Window$/;"	m	struct:tcp	file:
win32_dir	mongoose.c	/^typedef struct win32_dir {$/;"	s	file:
wordcount_t	mongoose.h	/^typedef int8_t wordcount_t;$/;"	t
wr	mongoose.h	/^  size_t (*wr)(void *fd, const void *buf, size_t len);  \/\/ Write file$/;"	m	struct:mg_fs
write_conn	mongoose.c	/^static void write_conn(struct mg_connection *c) {$/;"	f	file:
ws_handshake	mongoose.c	/^static void ws_handshake(struct mg_connection *c, const struct mg_str *wskey,$/;"	f	file:
ws_msg	mongoose.c	/^struct ws_msg {$/;"	s	file:
ws_process	mongoose.c	/^static size_t ws_process(uint8_t *buf, size_t len, struct ws_msg *msg) {$/;"	f	file:
wufn	mongoose.c	/^static void wufn(struct mg_connection *c, int ev, void *ev_data) {$/;"	f	file:
x25519	mongoose.c	/^static int x25519(uint8_t out[X25519_BYTES], const uint8_t scalar[X25519_BYTES],$/;"	f	file:
x25519_cli	mongoose.c	/^  uint8_t x25519_cli[32];  \/\/ client X25519 key between the handshake states$/;"	m	struct:tls_data	file:
x25519_core	mongoose.c	/^static void x25519_core(fe xs[5], const uint8_t scalar[X25519_BYTES],$/;"	f	file:
x25519_sec	mongoose.c	/^  uint8_t x25519_sec[32];  \/\/ x25519 secret between the handshake states$/;"	m	struct:tls_data	file:
x_side	mongoose.c	/^  void (*x_side)(uECC_word_t *result, const uECC_word_t *x, uECC_Curve curve);$/;"	m	struct:uECC_Curve_t	file:
x_side_default	mongoose.c	/^static void x_side_default(uECC_word_t *result, const uECC_word_t *x,$/;"	f	file:
x_side_secp256k1	mongoose.c	/^static void x_side_secp256k1(uECC_word_t *result, const uECC_word_t *x,$/;"	f	file:
xid	mongoose.c	/^  uint32_t xid;$/;"	m	struct:dhcp	file:
xisinf	mongoose.c	/^static int xisinf(double x) {$/;"	f	file:
xisnan	mongoose.c	/^static int xisnan(double x) {$/;"	f	file:
y	mongoose.h	/^  uchar y[16];          \/\/ the current cipher-input IV|Counter value$/;"	m	struct:__anon14
yiaddr	mongoose.c	/^  uint32_t ciaddr, yiaddr, siaddr, giaddr;$/;"	m	struct:dhcp	file:
zeros	mongoose.c	/^static uint8_t zeros[32] = {0};$/;"	v	file:
zeros_sha256_digest	mongoose.c	/^static uint8_t zeros_sha256_digest[32] =$/;"	v	file:
